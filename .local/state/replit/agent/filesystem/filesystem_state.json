{"file_contents":{"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/hooks/use-currency-rates.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { CurrencyRate } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Type definitions for the forms\nexport interface CreateCurrencyRateForm {\n  toCurrency: string;\n  rate: string;\n  isActive?: boolean;\n}\n\nexport interface UpdateCurrencyRateForm {\n  rate: string;\n  isActive?: boolean;\n}\n\n// Hook to fetch all currency rates (admin and super admin)\nexport function useCurrencyRates() {\n  const { user } = useAuth();\n  \n  return useQuery<CurrencyRate[]>({\n    queryKey: ['/api/admin/currency-rates'],\n    enabled: user?.role === 'admin' || user?.role === 'super_admin',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n// Hook to fetch active currency rates only\nexport function useActiveCurrencyRates() {\n  const { user } = useAuth();\n  \n  return useQuery<CurrencyRate[]>({\n    queryKey: ['/api/admin/currency-rates/active'],\n    enabled: user?.role === 'admin' || user?.role === 'super_admin',\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n// Hook to create a new currency rate\nexport function useCreateCurrencyRate() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: CreateCurrencyRateForm) => {\n      const response = await apiRequest('POST', '/api/admin/currency-rates', {\n        fromCurrency: 'USD', // Always USD as base\n        toCurrency: data.toCurrency,\n        rate: data.rate,\n        isActive: data.isActive ?? true,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currency-rates'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currency-rates/active'] });\n      toast({\n        title: 'Success',\n        description: 'Currency exchange rate created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create currency rate',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\n// Hook to update an existing currency rate\nexport function useUpdateCurrencyRate() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: UpdateCurrencyRateForm }) => {\n      const response = await apiRequest('PUT', `/api/admin/currency-rates/${id}`, {\n        rate: data.rate,\n        isActive: data.isActive,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currency-rates'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currency-rates/active'] });\n      toast({\n        title: 'Success',\n        description: 'Currency exchange rate updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update currency rate',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\n// Hook to delete/deactivate a currency rate\nexport function useDeleteCurrencyRate() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/admin/currency-rates/${id}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currency-rates'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currency-rates/active'] });\n      toast({\n        title: 'Success',\n        description: 'Currency exchange rate deactivated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to deactivate currency rate',\n        variant: 'destructive',\n      });\n    },\n  });\n}","size_bytes":4049},"client/src/pages/admin-login.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Eye, EyeOff, Shield, Lock } from 'lucide-react';\n\nconst loginSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(1, 'Password is required'),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, navigate] = useLocation();\n  const { login, user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Always call useForm hook at top level\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: '',\n      password: '',\n    },\n  });\n\n  // Redirect if user is already logged in\n  useEffect(() => {\n    if (!authLoading && user) {\n      const userRole = user.role;\n      if (userRole === 'admin' || userRole === 'super_admin') {\n        navigate('/admin/dashboard');\n      } else if (userRole === 'user') {\n        navigate('/customer/dashboard');\n      } else {\n        navigate('/dashboard');\n      }\n    }\n  }, [user, authLoading, navigate]);\n\n  // Show loading while checking authentication\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900 dark:to-orange-800\">\n        <div className=\"animate-spin h-8 w-8 border-4 border-orange-600 border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  // Don't render the login form if user is already authenticated\n  if (user) {\n    return null;\n  }\n\n\n  const onSubmit = async (data: LoginForm) => {\n    if (isLoading) return; // Prevent multiple submissions\n    \n    setIsLoading(true);\n    try {\n      const response = await login(data.username, data.password);\n      \n      // Navigate directly to the appropriate dashboard based on user role\n      const userRole = response?.user?.role;\n      if (userRole === 'admin' || userRole === 'super_admin') {\n        navigate('/admin/dashboard');\n      } else if (userRole === 'user') {\n        navigate('/customer/dashboard');\n      } else {\n        navigate('/dashboard');\n      }\n      \n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: error.message || 'Login failed',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900 dark:to-orange-800 p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"border-0 bg-white/90 dark:bg-orange-800/90 backdrop-blur-sm\">\n          <CardHeader className=\"space-y-4 pb-6\">\n            <div className=\"flex justify-center\">\n              <div className=\"p-3 rounded-full bg-orange-100 dark:bg-orange-900/50\">\n                <Shield className=\"h-8 w-8 text-orange-600 dark:text-orange-400\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-center text-orange-900 dark:text-orange-100\">\n              MapEstate Admin\n            </CardTitle>\n            <CardDescription className=\"text-center text-orange-600 dark:text-orange-400\">\n              Sign in to access your admin dashboard\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-orange-700 dark:text-orange-300\">Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Enter your username\"\n                          className=\"h-12 bg-white dark:bg-orange-900/50 border-orange-300 dark:border-orange-600 focus:border-orange-500 focus:ring-orange-500\"\n                          data-testid=\"input-username\"\n                          autoComplete=\"username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-orange-700 dark:text-orange-300\">Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            {...field}\n                            type={showPassword ? 'text' : 'password'}\n                            placeholder=\"Enter your password\"\n                            className=\"h-12 pr-12 bg-white dark:bg-orange-900/50 border-orange-300 dark:border-orange-600 focus:border-orange-500 focus:ring-orange-500\"\n                            data-testid=\"input-password\"\n                            autoComplete=\"current-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-12 px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-password\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-orange-400\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-orange-400\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-12 bg-orange-600 hover:bg-orange-700 dark:bg-orange-600 dark:hover:bg-orange-700 text-white font-semibold transition-all duration-200\"\n                  disabled={isLoading}\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full\" />\n                      <span>Signing in...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Lock className=\"h-4 w-4\" />\n                      <span>Sign In</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </Form>\n            <div className=\"mt-6 pt-6 border-t border-orange-200 dark:border-orange-700\">\n              <p className=\"text-xs text-center text-orange-500 dark:text-orange-400\">\n                This is a secure admin area. Only authorized personnel should access this portal.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8090},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/mysql2';\nimport mysql from 'mysql2/promise';\nimport * as schema from \"@shared/schema\";\nimport { getValidatedDatabaseConfig } from './config/dbConfig';\n\nlet queryClient: mysql.Pool;\nlet db: ReturnType<typeof drizzle>;\nconst dbType = 'mysql';\n\nasync function initializeDb() {\n  try {\n    const config = getValidatedDatabaseConfig();\n    \n    console.log(\"🔄 Connecting to MySQL VPS database...\");\n    \n    // Create connection pool with proper mysql2 configuration\n    queryClient = mysql.createPool({\n      host: config.host,\n      port: config.port,\n      user: config.user,\n      password: config.password,\n      database: config.database,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n      enableKeepAlive: true,\n      keepAliveInitialDelay: 0,\n    });\n    \n    db = drizzle(queryClient, { schema, mode: 'default' });\n    console.log(\"✅ MySQL VPS connection established successfully\");\n    \n    // Test the connection\n    try {\n      console.log(\"🔍 Testing database connection...\");\n      await queryClient.query('SELECT 1');\n      console.log(\"💓 Database connection is healthy\");\n    } catch (pingError) {\n      console.warn(\"⚠️ Connection test failed:\", pingError);\n      throw pingError;\n    }\n    \n    return db;\n  } catch (error) {\n    console.error(\"❌ Failed to connect to MySQL VPS database:\");\n    console.error(`   Error: ${error}`);\n    throw new Error(`MySQL connection failed: ${error}`);\n  }\n}\n\n\nfunction getDb() {\n  if (!db) {\n    throw new Error(\"Database not initialized. Call initializeDb() first.\");\n  }\n  return db;\n}\n\n// Health check function\nasync function checkDatabaseHealth() {\n  try {\n    await queryClient.query('SELECT 1');\n    return true;\n  } catch (error) {\n    console.warn(\"⚠️ Database health check failed:\", error);\n    return false;\n  }\n}\n\n// Connection recovery function\nasync function recoverConnection() {\n  try {\n    console.log(\"🔄 Attempting database connection recovery...\");\n    if (queryClient) {\n      await queryClient.end();\n    }\n    return await initializeDb();\n  } catch (error) {\n    console.error(\"❌ Connection recovery failed:\", error);\n    throw error;\n  }\n}\n\nfunction getDbType(): 'mysql' {\n  return dbType;\n}\n\nexport { getDb as db, initializeDb, getDbType, checkDatabaseHealth, recoverConnection };","size_bytes":2351},"client/src/components/property-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { OptimizedImage } from \"@/components/ui/optimized-image\";\nimport { useLocation } from \"wouter\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport {\n  useAddToFavorites,\n  useRemoveFromFavorites,\n  useIsFavorite,\n} from \"@/hooks/use-properties\";\nimport { useLocalFavorites } from \"@/hooks/use-local-favorites\";\nimport { useState, useEffect } from \"react\";\nimport type { Property } from \"@/types\";\nimport {\n  Heart,\n  Bed,\n  Bath,\n  Square,\n  MapPin,\n  User,\n  ChevronLeft,\n  ChevronRight,\n  Phone,\n  MessageCircle,\n  Map,\n} from \"lucide-react\";\nimport {\n  formatPrice,\n  formatPricePerUnit,\n  useCurrencyConversion,\n} from \"@/lib/currency\";\nimport { useCurrency } from \"@/lib/currency-context\";\nimport { normalizePropertyImageUrl } from \"@/lib/utils\";\n\ninterface PropertyCardProps {\n  property: Property;\n  userId?: string;\n  className?: string;\n  onMapClick?: (property: Property) => void;\n  showMapButton?: boolean;\n}\n\nexport default function PropertyCard({\n  property,\n  userId,\n  className,\n  onMapClick,\n  showMapButton = false,\n}: PropertyCardProps) {\n  const { t, getLocalized, isRTL } = useTranslation();\n  const [, navigate] = useLocation();\n  const addToFavorites = useAddToFavorites();\n  const removeFromFavorites = useRemoveFromFavorites();\n  const { data: favoriteData } = useIsFavorite(userId || \"\", property.id);\n  const localFavorites = useLocalFavorites();\n\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const { preferredCurrency } = useCurrency();\n  \n  // Check both server favorites (for logged-in users) and local favorites (for guests)\n  const isFavorite = userId \n    ? (favoriteData?.isFavorite || false)\n    : localFavorites.isFavorite(property.id);\n\n  // Get currency conversion rate if needed\n  const conversionQuery = useCurrencyConversion(\n    property.currency,\n    preferredCurrency,\n  );\n\n  // Get all images or use default if no images\n  const images =\n    Array.isArray(property.images) && property.images.length > 0\n      ? property.images.map((img: any) => {\n          const imageUrl = img.imageUrl || img;\n          return normalizePropertyImageUrl(imageUrl);\n        })\n      : [\n          \"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        ];\n\n  const hasMultipleImages = images.length > 1;\n\n  const handleFavoriteClick = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (userId) {\n      // Logged-in user: use server-based favorites\n      try {\n        if (isFavorite) {\n          await removeFromFavorites.mutateAsync({\n            userId,\n            propertyId: property.id,\n          });\n        } else {\n          await addToFavorites.mutateAsync({ userId, propertyId: property.id });\n        }\n      } catch (error) {\n        console.error(\"Failed to update favorite:\", error);\n      }\n    } else {\n      // Guest user: use localStorage favorites\n      localFavorites.toggleFavorite(property.id);\n    }\n  };\n\n  const nextImage = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setCurrentImageIndex((prev) => (prev + 1) % images.length);\n  };\n\n  const prevImage = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);\n  };\n\n  // Calculate converted amount if currency conversion is available\n  const baseAmount = parseFloat(property.price);\n  const convertedAmount = conversionQuery.data?.convertedAmount\n    ? conversionQuery.data.convertedAmount * baseAmount\n    : baseAmount;\n  const displayCurrency =\n    property.currency === preferredCurrency\n      ? property.currency\n      : preferredCurrency;\n\n  const handleViewProperty = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Get current language prefix from URL to maintain language consistency\n    const currentPath = window.location.pathname;\n    const languageMatch = currentPath.match(/^\\/(en|ar|kur)\\//);\n    const languagePrefix = languageMatch ? `/${languageMatch[1]}` : '/en'; // Default to English if no prefix found\n\n    // Navigate to property detail page using slug if available, fallback to ID\n    const identifier = property.slug || property.id;\n    navigate(`${languagePrefix}/property/${identifier}`);\n  };\n\n  const handleMapClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onMapClick) {\n      onMapClick(property);\n    }\n  };\n\n  return (\n    <Card\n      className={`property-card bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 rounded-xl overflow-hidden transition-all duration-300 hover:-translate-y-2 hover:shadow-xl shadow-lg group ${className}`}\n      data-testid={`property-card-${property.id}`}\n    >\n      <div className=\"relative\">\n        <div className=\"relative h-48 sm:h-52 md:h-56 lg:h-48 xl:h-52 overflow-hidden\">\n          <OptimizedImage\n            src={images[currentImageIndex]}\n            alt={property.title}\n            className=\"transition-transform duration-500 group-hover:scale-105\"\n            aspectRatio=\"3/2\"\n            objectFit=\"cover\"\n            sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw\"\n            fallbackSrc=\"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n            width={400}\n            height={267}\n          />\n\n          {/* Navigation arrows - only show if multiple images */}\n          {hasMultipleImages && (\n            <>\n              <button\n                onClick={prevImage}\n                className=\"absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-2 h-10 w-10 flex items-center justify-center transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/20\"\n                aria-label=\"Previous image\"\n              >\n                <ChevronLeft className=\"h-5 w-5\" />\n              </button>\n\n              <button\n                onClick={nextImage}\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full p-2 h-10 w-10 flex items-center justify-center transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/20\"\n                aria-label=\"Next image\"\n              >\n                <ChevronRight className=\"h-5 w-5\" />\n              </button>\n\n              {/* Image counter */}\n              <div\n                className={`absolute bottom-2 ${isRTL ? \"left-2\" : \"right-2\"} bg-black/50 text-white px-2 py-1 rounded text-xs`}\n              >\n                {currentImageIndex + 1} / {images.length}\n              </div>\n            </>\n          )}\n        </div>\n\n        <Badge\n          className={`absolute top-4 ${isRTL ? \"right-4\" : \"left-4\"} ${\n            property.listingType === \"sale\"\n              ? \"bg-red-600 text-white\"\n              : \"bg-green-600 text-white\"\n          }`}\n        >\n          {property.listingType === \"sale\"\n            ? t(\"filter.forSale\")\n            : t(\"filter.forRent\")}\n        </Badge>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={handleFavoriteClick}\n          className={`absolute top-4 ${isRTL ? \"left-4\" : \"right-4\"} rounded-full p-2 transition-all duration-200 ${\n            isFavorite\n              ? \"bg-red-50 hover:bg-red-100 text-red-500 border border-red-200\"\n              : \"bg-black/50 hover:bg-black/70 text-white\"\n          }`}\n          data-testid={`favorite-button-${property.id}`}\n        >\n          <Heart\n            className={`h-4 w-4 transition-all duration-200 ${\n              isFavorite ? \"fill-current scale-110\" : \"hover:scale-105\"\n            }`}\n          />\n        </Button>\n      </div>\n\n      <CardContent className=\"p-4 sm:p-5 md:p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2 mb-3\">\n          <h3\n            className=\"text-lg sm:text-xl font-semibold text-gray-900 dark:text-white line-clamp-2 sm:line-clamp-1 flex-1 pr-2\"\n            data-testid={`property-title-${property.id}`}\n            title={getLocalized(property.title, property.title)}\n          >\n            {getLocalized(property.title, property.title)}\n          </h3>\n          <span\n            className=\"text-xl sm:text-2xl font-bold text-orange-600 dark:text-orange-400 whitespace-nowrap\"\n            data-testid={`property-price-${property.id}`}\n          >\n            {formatPrice(\n              property.price,\n              property.currency,\n              property.listingType,\n              displayCurrency,\n              convertedAmount,\n              t,\n            )}\n          </span>\n        </div>\n\n        <div className=\"flex items-start text-gray-600 dark:text-gray-300 mb-4\">\n          <MapPin className=\"h-4 w-4 mr-2 mt-0.5 flex-shrink-0\" />\n          <p\n            className=\"text-sm sm:text-base line-clamp-2 leading-relaxed\"\n            data-testid={`property-address-${property.id}`}\n            title={`${property.address}, ${property.city}`}\n          >\n            {property.address}, {property.city}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 sm:gap-3 text-xs sm:text-sm text-gray-600 dark:text-gray-300 mb-4\">\n          {property.bedrooms && (\n            <div className=\"flex items-center\">\n              <Bed\n                className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\"\n                style={{ color: \"#FF7800\" }}\n              />\n              <span className=\"truncate\">\n                {property.bedrooms} {t(\"property.beds\")}\n              </span>\n            </div>\n          )}\n          {property.bathrooms && (\n            <div className=\"flex items-center\">\n              <Bath\n                className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\"\n                style={{ color: \"#FF7800\" }}\n              />\n              <span className=\"truncate\">\n                {property.bathrooms} {t(\"property.baths\")}\n              </span>\n            </div>\n          )}\n          {property.area && (\n            <div className=\"flex items-center col-span-2 sm:col-span-1\">\n              <Square\n                className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\"\n                style={{ color: \"#FF7800\" }}\n              />\n              <span className=\"truncate\">\n                {property.area.toLocaleString()} {t(\"property.sqFt\")}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-3\">\n          {property.agent && (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center\">\n                <User className=\"h-3 w-3 sm:h-4 sm:w-4 text-orange-600 dark:text-orange-400\" />\n              </div>\n              <span className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300 truncate\">\n                {property.agent.firstName} {property.agent.lastName}\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex items-center gap-2\">\n            {showMapButton && (\n              <Button\n                onClick={handleMapClick}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"bg-orange-50 hover:bg-orange-100 border-orange-200 text-orange-600 px-3 h-8 sm:h-9\"\n                data-testid={`map-button-${property.id}`}\n                title=\"Show on map\"\n              >\n                <Map className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              </Button>\n            )}\n            <Button\n              onClick={handleViewProperty}\n              className=\"flex-1 h-8 sm:h-9 text-xs sm:text-sm\"\n              data-testid={`view-details-button-${property.id}`}\n            >\n              {t(\"property.viewDetails\")}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12110},"client/src/components/GlobalLoader.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNetworkStatus } from '@/hooks/useNetworkStatus';\nimport logoImage from \"@assets/logo_1757848527935.png\";\n\ninterface GlobalLoaderProps {\n  isLoading: boolean;\n  message?: string;\n}\n\nexport function GlobalLoader({ isLoading, message }: GlobalLoaderProps) {\n  const { isSlowConnection } = useNetworkStatus();\n  const [showSlowMessage, setShowSlowMessage] = useState(false);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    \n    if (isLoading && isSlowConnection) {\n      // Show slow connection message after 3 seconds of loading\n      timer = setTimeout(() => {\n        setShowSlowMessage(true);\n      }, 3000);\n    } else {\n      setShowSlowMessage(false);\n    }\n\n    return () => {\n      if (timer) clearTimeout(timer);\n    };\n  }, [isLoading, isSlowConnection]);\n\n  if (!isLoading) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center\">\n      <div className=\"bg-white dark:bg-gray-900 rounded-lg p-6 shadow-xl max-w-sm mx-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"relative\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-2 border-transparent border-t-primary border-r-primary\"></div>\n            <img \n              src={logoImage} \n              alt=\"MapEstate Logo\" \n              title=\"MapEstate Loading\"\n              width=\"24\"\n              height=\"24\"\n              loading=\"eager\"\n              className=\"absolute inset-1 h-6 w-6 object-contain\"\n            />\n          </div>\n          <div>\n            <div className=\"font-medium text-foreground\">\n              {message || 'Loading...'}\n            </div>\n            {showSlowMessage && (\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                Your connection is slow. This may take a while.\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1987},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/dashboard-redirect.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function DashboardRedirect() {\n  const { user, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!user) {\n        navigate('/admin/login');\n        return;\n      }\n\n      // Redirect based on user role\n      switch (user.role) {\n        case 'admin':\n        case 'super_admin':\n          navigate('/admin/dashboard');\n          break;\n        case 'user':\n          navigate('/customer/dashboard');\n          break;\n        default:\n          navigate('/admin/login');\n      }\n    }\n  }, [user, isLoading, navigate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin h-12 w-12 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-300\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}","size_bytes":1159},"client/src/components/property-map.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { PropertyWithDetails, PropertyFilters } from \"@shared/schema\";\nimport { Search, MapPin, Navigation, X } from \"lucide-react\";\nimport {\n  useAddToFavorites,\n  useRemoveFromFavorites,\n  useIsFavorite,\n} from \"@/hooks/use-properties\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useCurrency } from \"@/lib/currency-context\";\nimport { formatPrice } from \"@/lib/currency\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { normalizePropertyImageUrl } from \"@/lib/utils\";\n\ninterface PropertyMapProps {\n  properties: PropertyWithDetails[];\n  filters?: PropertyFilters;\n  onFilterChange?: (filters: PropertyFilters) => void;\n  onPropertyClick?: (property: PropertyWithDetails) => void;\n  onPropertySelect?: (property: PropertyWithDetails) => void;\n  onVisiblePropertiesChange?: (count: number) => void;\n  userId?: string;\n  className?: string;\n}\n\nexport default function PropertyMap({\n  properties,\n  filters = {},\n  onFilterChange,\n  onPropertyClick,\n  onPropertySelect,\n  onVisiblePropertiesChange,\n  userId,\n  className,\n}: PropertyMapProps) {\n  const { t, getLocalized, language } = useTranslation();\n  const { preferredCurrency } = useCurrency();\n  const { user } = useAuth();\n\n  // Add conditional spacing for Arabic and Kurdish languages\n  const isRTL = language === \"ar\" || language === \"kur\";\n  const spacingFilter = isRTL\n    ? \"space-x-3 sm:space-x-4\"\n    : \"space-x-2 sm:space-x-3\";\n  const spacingType = isRTL ? \"space-x-3\" : \"space-x-2\";\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const markersRef = useRef<any[]>([]);\n  const currentPropertiesRef = useRef<PropertyWithDetails[]>([]);\n  const [isLocating, setIsLocating] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const userLocationMarkerRef = useRef<any>(null);\n  const [isUserLocationVisible, setIsUserLocationVisible] = useState(false);\n\n  // Track last calculated bounds to avoid unnecessary recalculation\n  const lastBoundsRef = useRef<string>('');\n  const lastValidCountRef = useRef<number>(0);\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Function to calculate visible properties within map bounds\n  const calculateVisibleProperties = (forceUpdate = false) => {\n    console.log(`🔍 calculateVisibleProperties called with forceUpdate=${forceUpdate}, properties count: ${properties?.length || 0}`);\n    \n    if (!mapInstanceRef.current) {\n      console.log(`❌ No map instance available - skipping count update`);\n      return; // Don't reset count to 0 during initialization\n    }\n\n    // Don't update count if no properties are loaded yet - wait for properties to load\n    if (!properties || properties.length === 0) {\n      console.log(`❌ No properties available to calculate - skipping count update`);\n      return; // Don't reset count to 0 during loading\n    }\n\n    try {\n      const bounds = mapInstanceRef.current.getBounds();\n      const currentBounds = bounds.toBBoxString();\n      const currentZoom = mapInstanceRef.current.getZoom();\n      \n      // Create a unique key that includes both bounds and zoom to detect changes\n      const boundsAndZoomKey = `${currentBounds}_zoom_${currentZoom}`;\n      \n      // Skip calculation if bounds AND zoom haven't changed (optimization)\n      // But allow force update for important events like map initialization\n      if (!forceUpdate && boundsAndZoomKey === lastBoundsRef.current) {\n        console.log(`⏭️ Skipping calculation - bounds and zoom unchanged: ${boundsAndZoomKey}`);\n        return;\n      }\n      lastBoundsRef.current = boundsAndZoomKey;\n      \n      // Always count individual properties within bounds regardless of zoom level\n      // This ensures consistent count when zooming in and out\n      const visibleProperties = properties.filter(property => {\n        const lat = parseFloat(property.latitude || '');\n        const lng = parseFloat(property.longitude || '');\n        \n        // Skip properties with invalid coordinates\n        if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {\n          return false;\n        }\n        \n        // Check if property coordinates are within current map bounds (Leaflet uses [lat, lng])\n        return bounds.contains([lat, lng]);\n      });\n      \n      console.log(`📍 Visible properties calculation: ${visibleProperties.length} of ${properties.length} total properties, zoom: ${currentZoom}`);\n      \n      // Store the last valid non-zero count\n      if (visibleProperties.length > 0) {\n        lastValidCountRef.current = visibleProperties.length;\n      }\n      \n      // If count is 0 and we're during a potential zoom operation, debounce the update\n      if (visibleProperties.length === 0 && lastValidCountRef.current > 0) {\n        console.log(`⏳ Count is 0 but last valid was ${lastValidCountRef.current} - debouncing update`);\n        \n        // Clear existing timeout\n        if (debounceTimeoutRef.current) {\n          clearTimeout(debounceTimeoutRef.current);\n        }\n        \n        // Set timeout to confirm 0 count after a delay\n        debounceTimeoutRef.current = setTimeout(() => {\n          console.log(`✅ Confirming 0 count after debounce delay`);\n          onVisiblePropertiesChange?.(0);\n        }, 500); // 500ms delay\n        \n        return; // Don't update immediately\n      }\n      \n      // Clear any pending timeout if we have a valid count\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n        debounceTimeoutRef.current = null;\n      }\n      \n      console.log(`📲 Calling onVisiblePropertiesChange with count: ${visibleProperties.length}`);\n      onVisiblePropertiesChange?.(visibleProperties.length);\n    } catch (error) {\n      console.log('Error calculating visible properties:', error);\n      // On error, show total properties count instead of 0\n      onVisiblePropertiesChange?.(properties.length);\n    }\n  };\n\n  // Favorites hooks\n  const addToFavorites = useAddToFavorites();\n  const removeFromFavorites = useRemoveFromFavorites();\n  const queryClient = useQueryClient();\n\n  // Local state for filters\n  const [localFilters, setLocalFilters] = useState<PropertyFilters>(\n    filters || {},\n  );\n  const isLocalUpdate = useRef(false);\n  const clickGuard = useRef<number | null>(null);\n\n  // Helper function to get localized property title with fallback\n  const getPropertyTitle = (property: any) => {\n    return getLocalized(property.title, property.title || \"Untitled Property\");\n  };\n\n  // Pre-calculate currency conversions for all properties  \n  const [convertedPrices, setConvertedPrices] = useState<{\n    [propertyId: string]: number;\n  }>({});\n  \n  // Use ref to maintain converted prices across re-renders\n  const convertedPricesRef = useRef<{[propertyId: string]: number}>({});\n\n  // Helper function to format price for map popups using pre-calculated conversions\n  const formatMapPrice = (property: any) => {\n    // Try to get conversion from state first, then from ref as backup\n    const convertedAmount = convertedPrices[property.id] ?? convertedPricesRef.current[property.id];\n    const hasConversion = convertedAmount !== undefined;\n    \n    // Only use converted price if we have the actual conversion result\n    if (hasConversion) {\n      return formatPrice(\n        property.price,\n        property.currency,\n        property.listingType,\n        preferredCurrency,\n        convertedAmount,\n        t,\n      );\n    }\n    \n    // If no conversion available yet, show original price with original currency\n    return formatPrice(\n      property.price,\n      property.currency,\n      property.listingType,\n      property.currency, // Use original currency until conversion is available\n      parseFloat(property.price),\n      t,\n    );\n  };\n\n  // Check for dark mode and update markers when theme changes\n  useEffect(() => {\n    const checkDarkMode = () => {\n      const newIsDarkMode = document.documentElement.classList.contains(\"dark\");\n      setIsDarkMode(newIsDarkMode);\n\n      // Re-render markers when theme changes to update their styling\n      if (currentPropertiesRef.current.length > 0) {\n        updateMarkersForProperties(currentPropertiesRef.current);\n      }\n    };\n\n    checkDarkMode();\n\n    // Listen for theme changes\n    const observer = new MutationObserver(checkDarkMode);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  // Pre-calculate currency conversions when properties or currency changes\n  useEffect(() => {\n    const calculateConversions = async () => {\n      console.log(\"🔄 Currency conversion triggered:\", {\n        propertiesCount: properties?.length || 0,\n        preferredCurrency: preferredCurrency,\n        properties: properties?.map((p) => ({\n          id: p.id,\n          price: p.price,\n          currency: p.currency,\n        })),\n      });\n\n      if (!properties || properties.length === 0) {\n        console.log(\"❌ No properties to convert\");\n        return;\n      }\n\n      const newConvertedPrices: { [propertyId: string]: number } = {};\n\n      for (const property of properties) {\n        if (property.currency === preferredCurrency) {\n          // Same currency, no conversion needed\n          console.log(\n            \"✅ Same currency for\",\n            property.id,\n            \":\",\n            property.currency,\n          );\n          newConvertedPrices[property.id] = parseFloat(property.price);\n        } else {\n          try {\n            console.log(\n              \"💱 Converting\",\n              property.id,\n              \":\",\n              property.price,\n              property.currency,\n              \"→\",\n              preferredCurrency,\n            );\n            // Use the same conversion API as the rest of the app\n            const response = await fetch(\n              `/api/currency/convert?amount=${property.price}&from=${property.currency}&to=${preferredCurrency}`,\n            );\n            if (response.ok) {\n              const data = await response.json();\n              console.log(\n                \"✅ Converted\",\n                property.id,\n                \":\",\n                data.convertedAmount,\n              );\n              newConvertedPrices[property.id] = data.convertedAmount;\n            } else {\n              // Fallback to original price if conversion fails\n              console.log(\n                \"❌ Conversion failed for\",\n                property.id,\n                \"- using original price\",\n              );\n              newConvertedPrices[property.id] = parseFloat(property.price);\n            }\n          } catch (error) {\n            // Fallback to original price if conversion fails\n            console.log(\"❌ Conversion error for\", property.id, \":\", error);\n            newConvertedPrices[property.id] = parseFloat(property.price);\n          }\n        }\n      }\n\n      console.log(\"📊 Final converted prices:\", newConvertedPrices);\n      setConvertedPrices(newConvertedPrices);\n      // Also update the ref to persist across re-renders\n      convertedPricesRef.current = { ...newConvertedPrices };\n    };\n\n    calculateConversions();\n  }, [properties, preferredCurrency]);\n\n  // Function to update popup prices dynamically\n  const updatePopupPrices = () => {\n    currentPropertiesRef.current.forEach((property) => {\n      const priceElement = document.getElementById(\n        `popup-price-${property.id}`,\n      );\n      if (priceElement) {\n        const newPrice = formatMapPrice(property);\n        priceElement.innerHTML = newPrice;\n      }\n    });\n  };\n\n  // Update markers when currency changes to refresh price displays in popups\n  useEffect(() => {\n    if (currentPropertiesRef.current.length > 0) {\n      updateMarkersForProperties(currentPropertiesRef.current);\n      // Also update any currently visible popups\n      updatePopupPrices();\n    }\n  }, [preferredCurrency, convertedPrices]);\n\n  // Recalculate visible properties count when properties change\n  useEffect(() => {\n    if (mapInstanceRef.current && properties && properties.length > 0) {\n      // Use a small delay to ensure the map is fully ready\n      const timer = setTimeout(() => {\n        calculateVisibleProperties(true); // Force update when properties change\n      }, 300);\n      \n      return () => clearTimeout(timer);\n    }\n    // Don't immediately set to 0 when properties.length === 0 \n    // because this happens during loading phase\n  }, [properties]);\n\n  // Sync local filters with prop changes, but don't overwrite local updates\n  useEffect(() => {\n    if (isLocalUpdate.current) {\n      isLocalUpdate.current = false;\n      return;\n    }\n    setLocalFilters(filters || {});\n  }, [filters]);\n\n  // Properties are already filtered from the API, so we use them directly\n  // The filtering happens on the server side when onFilterChange is called\n\n  // Add global functions for popup interactions\n  useEffect(() => {\n    // Define global function for changing slides in map popups\n    (window as any).changeSlide = (popupId: string, direction: number) => {\n      try {\n        const popup = document.getElementById(popupId);\n        if (!popup) return;\n\n        const slides = popup.querySelectorAll(\".popup-slide\");\n        const counter = popup.querySelector(\".slide-counter\");\n        if (!slides || slides.length === 0) return;\n\n        // Find current active slide\n        let currentIndex = 0;\n        slides.forEach((slide, index) => {\n          if (slide && (slide as HTMLElement).style.opacity === \"1\") {\n            currentIndex = index;\n          }\n        });\n\n        // Calculate next index\n        let nextIndex = currentIndex + direction;\n        if (nextIndex >= slides.length) nextIndex = 0;\n        if (nextIndex < 0) nextIndex = slides.length - 1;\n\n        // Hide all slides\n        slides.forEach((slide) => {\n          if (slide) {\n            (slide as HTMLElement).style.opacity = \"0\";\n          }\n        });\n\n        // Show next slide\n        if (slides[nextIndex]) {\n          (slides[nextIndex] as HTMLElement).style.opacity = \"1\";\n        }\n\n        // Update counter\n        if (counter) {\n          counter.textContent = (nextIndex + 1).toString();\n        }\n      } catch (error) {\n        console.warn(\"Error in changeSlide function:\", error);\n      }\n    };\n\n    // Define global function for handling favorites from map popups\n    (window as any).toggleFavoriteFromMap = async (propertyId: string) => {\n      if (!userId) {\n        console.warn(\"User not logged in, cannot toggle favorite\");\n        return;\n      }\n\n      try {\n        // Check current favorite status using the correct query key format\n        const currentData = queryClient.getQueryData([\n          \"/api/favorites/check\",\n          { userId, propertyId },\n        ]) as { isFavorite?: boolean } | undefined;\n        const isFavorite = currentData?.isFavorite || false;\n\n        if (isFavorite) {\n          await removeFromFavorites.mutateAsync({ userId, propertyId });\n        } else {\n          await addToFavorites.mutateAsync({ userId, propertyId });\n        }\n\n        // Update the heart button immediately\n        const heartButton = document.querySelector(\n          `#heart-btn-${propertyId}`,\n        ) as HTMLElement;\n        if (heartButton) {\n          const newIsFavorite = !isFavorite;\n          heartButton.innerHTML = newIsFavorite\n            ? '<i class=\"fas fa-heart\" style=\"color: #ef4444; font-size: 14px;\"></i>'\n            : '<i class=\"far fa-heart\" style=\"color: #6b7280; font-size: 14px;\"></i>';\n          heartButton.style.backgroundColor = newIsFavorite\n            ? \"#fee2e2\"\n            : \"#f3f4f6\";\n        }\n      } catch (error) {\n        console.error(\"Failed to toggle favorite:\", error);\n      }\n    };\n\n    // Define global function for viewing property details from map popup\n    (window as any).viewPropertyFromMap = (propertyId: string) => {\n      try {\n        // Find the property to get its slug\n        const property = properties.find((p) => p.id === propertyId);\n        const identifier = property?.slug || propertyId;\n\n\n        // Navigate to property detail page using multiple approaches\n        console.log(\n          \"Navigating to property:\",\n          propertyId,\n          \"using identifier:\",\n          identifier,\n        );\n\n        // Get current language prefix from URL to maintain language consistency\n        const currentPath = window.location.pathname;\n        const languageMatch = currentPath.match(/^\\/(en|ar|kur)\\//);\n        const languagePrefix = languageMatch ? `/${languageMatch[1]}` : '/en'; // Default to English if no prefix found\n\n        // First try: Direct window navigation\n        if (window.location) {\n          window.location.href = `${languagePrefix}/property/${identifier}`;\n          return;\n        }\n\n        // Fallback: Open in new window if direct navigation fails\n        window.open(`${languagePrefix}/property/${identifier}`, \"_self\");\n      } catch (error) {\n        console.error(\"Navigation failed:\", error);\n        // Last resort: Open in new tab with the identifier\n        const property = properties.find((p) => p.id === propertyId);\n        const identifier = property?.slug || propertyId;\n        const currentPath = window.location.pathname;\n        const languageMatch = currentPath.match(/^\\/(en|ar|kur)\\//);\n        const languagePrefix = languageMatch ? `/${languageMatch[1]}` : '/en';\n        window.open(`${languagePrefix}/property/${identifier}`, \"_blank\");\n      }\n    };\n\n    // Define global function for zooming to property from cluster popup with smooth motion\n    (window as any).zoomToPropertyFromCluster = (\n      propertyId: string,\n      lat: string,\n      lng: string,\n    ) => {\n      if (mapInstanceRef.current && lat && lng) {\n        const latitude = parseFloat(lat);\n        const longitude = parseFloat(lng);\n        const L = (window as any).L;\n\n        // Add visual feedback - highlight the clicked item temporarily\n        const clickedItem = document.querySelector(\n          `[onclick*=\"${propertyId}\"]`,\n        ) as HTMLElement;\n        if (clickedItem) {\n          clickedItem.style.background =\n            \"linear-gradient(135deg, #FF7800 0%, #e56600 100%)\";\n          clickedItem.style.color = \"white\";\n          clickedItem.style.transform = \"scale(1.02)\";\n          clickedItem.style.transition = \"all 0.3s ease\";\n\n          // Reset after animation\n          setTimeout(() => {\n            if (clickedItem) {\n              clickedItem.style.background = \"transparent\";\n              clickedItem.style.color = \"\";\n              clickedItem.style.transform = \"scale(1)\";\n            }\n          }, 1500);\n        }\n\n        // Close any open popups first with animation\n        mapInstanceRef.current.closePopup();\n\n        // First, zoom out slightly to show movement, then zoom to target\n        const currentZoom = mapInstanceRef.current.getZoom();\n        // More reasonable zoom behavior - don't zoom too aggressively\n        const targetZoom = Math.min(Math.max(14, currentZoom + 1), 17);\n\n        // Create smooth multi-stage animation\n        setTimeout(() => {\n          if (mapInstanceRef.current) {\n            // Stage 1: Smooth pan and zoom with easing\n            mapInstanceRef.current.flyTo([latitude, longitude], targetZoom, {\n              animate: true,\n              duration: 1.5,\n              easeLinearity: 0.1,\n            });\n\n            // Stage 2: Add a temporary pulse marker to show the target\n            setTimeout(() => {\n              if (mapInstanceRef.current && L) {\n                const pulseMarker = L.divIcon({\n                  html: `\n                    <div style=\"\n                      width: 60px;\n                      height: 60px;\n                      border-radius: 50%;\n                      background: radial-gradient(circle, rgba(255, 120, 0, 0.8) 0%, rgba(255, 120, 0, 0.4) 50%, transparent 70%);\n                      animation: pulseAnimation 2s ease-out;\n                      pointer-events: none;\n                      display: flex;\n                      align-items: center;\n                      justify-content: center;\n                    \">\n                      <div style=\"\n                        width: 20px;\n                        height: 20px;\n                        background: #FF7800;\n                        border-radius: 50%;\n                        border: 3px solid white;\n                        box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n                      \"></div>\n                    </div>\n                    <style>\n                      @keyframes pulseAnimation {\n                        0% { transform: scale(0.5); opacity: 0; }\n                        50% { transform: scale(1.2); opacity: 1; }\n                        100% { transform: scale(1); opacity: 0.8; }\n                      }\n                    </style>\n                  `,\n                  className: \"pulse-marker\",\n                  iconSize: [60, 60],\n                  iconAnchor: [30, 30],\n                });\n\n                const tempMarker = L.marker([latitude, longitude], {\n                  icon: pulseMarker,\n                }).addTo(mapInstanceRef.current);\n\n                // Remove the pulse marker after animation\n                setTimeout(() => {\n                  if (tempMarker && mapInstanceRef.current) {\n                    mapInstanceRef.current.removeLayer(tempMarker);\n                  }\n                }, 2000);\n              }\n            }, 800);\n          }\n        }, 200);\n\n        // Optional: trigger property selection callback if available\n        if (onPropertySelect) {\n          const property = properties.find((p) => p.id === propertyId);\n          if (property) {\n            setTimeout(() => {\n              onPropertySelect(property);\n            }, 1000);\n          }\n        }\n      }\n    };\n\n    // Cleanup global functions on unmount\n    return () => {\n      if ((window as any).changeSlide) {\n        delete (window as any).changeSlide;\n      }\n      if ((window as any).toggleFavoriteFromMap) {\n        delete (window as any).toggleFavoriteFromMap;\n      }\n      if ((window as any).viewPropertyFromMap) {\n        delete (window as any).viewPropertyFromMap;\n      }\n      if ((window as any).zoomToPropertyFromCluster) {\n        delete (window as any).zoomToPropertyFromCluster;\n      }\n    };\n  }, []);\n\n  // Initialize map\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    const initializeMap = () => {\n      // Check if Leaflet is available\n      if (\n        typeof window !== \"undefined\" &&\n        (window as any).L &&\n        mapRef.current &&\n        !mapInstanceRef.current\n      ) {\n        const L = (window as any).L;\n\n        try {\n          // Clear any existing map first\n          if (mapInstanceRef.current) {\n            mapInstanceRef.current.remove();\n            mapInstanceRef.current = null;\n          }\n\n          // Clear Leaflet ID if exists\n          if ((mapRef.current as any)._leaflet_id) {\n            delete (mapRef.current as any)._leaflet_id;\n          }\n\n          // Ensure the container is ready\n          if (!mapRef.current || !mapRef.current.offsetParent) {\n            // Container not ready yet, retry in a moment\n            setTimeout(initializeMap, 100);\n            return;\n          }\n\n          // Calculate dynamic zoom limits based on viewport\n          const viewportHeight = window.innerHeight;\n          const minZoom = viewportHeight < 600 ? 6 : 4; // Allow more zoom out for better area coverage\n          const maxZoom = 18;\n\n          // Initialize map centered on Erbil, Kurdistan with zoom restrictions\n          mapInstanceRef.current = L.map(mapRef.current, {\n            zoomControl: false, // Disable default zoom control\n            attributionControl: false, // Disable attribution control\n            minZoom: minZoom, // Prevent excessive zoom out\n            maxZoom: maxZoom, // Prevent excessive zoom in\n            zoomSnap: 0.5, // Allow half-zoom levels for smoother experience\n            zoomDelta: 0.5, // Smoother zoom steps\n          }).setView([36.1911, 44.0093], 13);\n\n          // Add OpenStreetMap tiles\n          L.tileLayer(\n            \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          ).addTo(mapInstanceRef.current);\n\n          // Add multiple event listeners to ensure count is always accurate\n          const updateCountAndMarkers = () => {\n            updateMarkersForProperties(currentPropertiesRef.current);\n            calculateVisibleProperties(true); // Force update on map events\n          };\n\n          // Listen to multiple map events to catch all possible changes\n          mapInstanceRef.current.on(\"zoomend\", updateCountAndMarkers);\n          mapInstanceRef.current.on(\"moveend\", updateCountAndMarkers);\n          mapInstanceRef.current.on(\"dragend\", updateCountAndMarkers);\n          mapInstanceRef.current.on(\"resize\", updateCountAndMarkers);\n\n          // Also set up a periodic check as a fallback\n          const periodicUpdate = setInterval(() => {\n            if (mapInstanceRef.current && properties.length > 0) {\n              calculateVisibleProperties();\n            }\n          }, 1000); // Check every second\n\n          // Store the interval ID for cleanup\n          (mapInstanceRef.current as any)._periodicUpdateId = periodicUpdate;\n\n          // Add initial visible properties calculation\n          setTimeout(() => {\n            calculateVisibleProperties(true); // Force update on initialization\n          }, 200);\n\n          // Invalidate size to ensure proper rendering\n          setTimeout(() => {\n            if (mapInstanceRef.current) {\n              mapInstanceRef.current.invalidateSize();\n            }\n          }, 100);\n\n          console.log(\"Map initialized successfully\");\n        } catch (error) {\n          console.error(\"Error initializing map:\", error);\n        }\n      }\n    };\n\n    // Try to initialize immediately\n    initializeMap();\n\n    // If Leaflet is not ready, wait for it\n    if (!(window as any).L) {\n      const checkLeaflet = setInterval(() => {\n        if ((window as any).L) {\n          clearInterval(checkLeaflet);\n          initializeMap();\n        }\n      }, 100);\n\n      return () => {\n        clearInterval(checkLeaflet);\n        if (mapInstanceRef.current) {\n          mapInstanceRef.current.remove();\n        }\n      };\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstanceRef.current) {\n        try {\n          // Clean up periodic update interval\n          const periodicUpdateId = (mapInstanceRef.current as any)._periodicUpdateId;\n          if (periodicUpdateId) {\n            clearInterval(periodicUpdateId);\n          }\n\n          // Clean up event listeners before removing map\n          mapInstanceRef.current.off(\"zoomend\");\n          mapInstanceRef.current.off(\"moveend\");\n          mapInstanceRef.current.off(\"dragend\");\n          mapInstanceRef.current.off(\"resize\");\n          mapInstanceRef.current.remove();\n        } catch (error) {\n          console.warn(\"Error cleaning up map:\", error);\n        }\n        mapInstanceRef.current = null;\n      }\n\n      // Clear markers\n      markersRef.current.forEach((marker) => {\n        try {\n          if (marker && marker.remove) {\n            marker.remove();\n          }\n        } catch (error) {\n          // Ignore cleanup errors\n        }\n      });\n      markersRef.current = [];\n    };\n  }, []);\n\n  // Resize handler for full screen\n  useEffect(() => {\n    const handleResize = () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.invalidateSize();\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // Also invalidate size when component is first rendered with full height\n    const timer = setTimeout(() => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.invalidateSize();\n      }\n    }, 300);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      clearTimeout(timer);\n    };\n  }, []);\n\n  // Country normalization mapping to handle multilingual country names\n  const normalizeCountryName = (country: string): string => {\n    const countryNormalizationMap: { [key: string]: string } = {\n      // Iraq variations\n      \"Iraq\": \"Iraq\",\n      \"العراق\": \"Iraq\",\n      \"عێراق\": \"Iraq\",\n      // Add more country mappings as needed\n      \"Kurdistan\": \"Kurdistan\",\n      \"كوردستان\": \"Kurdistan\",\n      \"کوردستان\": \"Kurdistan\",\n      // Turkey variations\n      \"Turkey\": \"Turkey\",\n      \"تركيا\": \"Turkey\",\n      \"تورکیا\": \"Turkey\",\n      // Iran variations\n      \"Iran\": \"Iran\",\n      \"إيران\": \"Iran\",\n      \"ئێران\": \"Iran\",\n      // Syria variations\n      \"Syria\": \"Syria\",\n      \"سوريا\": \"Syria\",\n      \"سووریا\": \"Syria\",\n      // Default cases\n      \"Unknown Country\": \"Unknown Country\",\n    };\n\n    return countryNormalizationMap[country] || country;\n  };\n\n  // Function to create zoom-based clusters\n  const createZoomBasedClusters = (\n    propertiesToCluster: PropertyWithDetails[],\n    zoomLevel: number,\n  ) => {\n    // Three-tier clustering system based on zoom level:\n    // Low zoom (< 8): Group by country\n    // Medium zoom (8-12): Group by city \n    // High zoom (>= 12): Show individual properties\n    \n    if (zoomLevel < 8) {\n      // Very zoomed out - group by country\n      return createCountryBasedClusters(propertiesToCluster);\n    }\n    else if (zoomLevel < 12) {\n      // Medium zoom - group by city\n      return createCityBasedClusters(propertiesToCluster);\n    }\n    else {\n      // Zoomed in - show individual properties (no clustering)\n      return propertiesToCluster\n        .filter(property => property.latitude && property.longitude)\n        .map(property => ({\n          properties: [property],\n          center: {\n            lat: parseFloat(property.latitude || \"0\"),\n            lng: parseFloat(property.longitude || \"0\"),\n          },\n          clusterType: \"individual\",\n          count: 1,\n        }));\n    }\n  };\n\n  // Function to create country-based clusters with multilingual support\n  const createCountryBasedClusters = (\n    propertiesToCluster: PropertyWithDetails[],\n  ) => {\n    const countryGroups: { [key: string]: PropertyWithDetails[] } = {};\n\n    // Group properties by normalized country name\n    propertiesToCluster.forEach((property) => {\n      if (!property.latitude || !property.longitude) return;\n\n      // Normalize country name to handle multilingual variations\n      const rawCountry = property.country || \"Unknown Country\";\n      const normalizedCountry = normalizeCountryName(rawCountry);\n\n      if (!countryGroups[normalizedCountry]) {\n        countryGroups[normalizedCountry] = [];\n      }\n      countryGroups[normalizedCountry].push(property);\n    });\n\n    // Convert country groups to clusters\n    return Object.entries(countryGroups).map(([country, properties]) => ({\n      properties,\n      country, // This will be the normalized country name\n      clusterType: \"country\",\n      count: properties.length, // Add count property for cluster marker\n      center: {\n        lat:\n          properties.reduce(\n            (sum, p) => sum + parseFloat(p.latitude || \"0\"),\n            0,\n          ) / properties.length,\n        lng:\n          properties.reduce(\n            (sum, p) => sum + parseFloat(p.longitude || \"0\"),\n            0,\n          ) / properties.length,\n      },\n    }));\n  };\n\n  // Function to create city-based clusters\n  const createCityBasedClusters = (\n    propertiesToCluster: PropertyWithDetails[],\n  ) => {\n    const cityGroups: { [key: string]: PropertyWithDetails[] } = {};\n\n    // Group properties by city\n    propertiesToCluster.forEach((property) => {\n      if (!property.latitude || !property.longitude) return;\n\n      // Use city as grouping key, fallback to 'Unknown City'\n      const city = property.city || \"Unknown City\";\n\n      if (!cityGroups[city]) {\n        cityGroups[city] = [];\n      }\n      cityGroups[city].push(property);\n    });\n\n    // Convert city groups to clusters\n    return Object.entries(cityGroups).map(([city, properties]) => ({\n      properties,\n      city,\n      clusterType: \"city\",\n      count: properties.length, // Add count property for cluster marker\n      center: {\n        lat:\n          properties.reduce(\n            (sum, p) => sum + parseFloat(p.latitude || \"0\"),\n            0,\n          ) / properties.length,\n        lng:\n          properties.reduce(\n            (sum, p) => sum + parseFloat(p.longitude || \"0\"),\n            0,\n          ) / properties.length,\n      },\n    }));\n  };\n\n  // Function to create distance-based clusters\n  const createDistanceBasedClusters = (\n    propertiesToCluster: PropertyWithDetails[],\n    zoomLevel: number,\n  ) => {\n    const clusters: any[] = [];\n    const processed = new Set<number>();\n    // Enhanced cluster distance based on zoom level for better grouping\n    const CLUSTER_DISTANCE =\n      zoomLevel > 15\n        ? 0.003 // Very close clustering for high zoom\n        : zoomLevel > 13\n          ? 0.005 // Close clustering\n          : zoomLevel > 11\n            ? 0.01 // Medium clustering\n            : zoomLevel > 9\n              ? 0.03 // Larger clustering for medium zoom\n              : 0.05; // Very large clustering for lower zoom\n\n    propertiesToCluster.forEach((property, index) => {\n      if (processed.has(index) || !property.latitude || !property.longitude)\n        return;\n\n      const lat = parseFloat(property.latitude);\n      const lng = parseFloat(property.longitude);\n      const cluster = [property];\n      processed.add(index);\n\n      // Find nearby properties\n      propertiesToCluster.forEach((otherProperty, otherIndex) => {\n        if (\n          processed.has(otherIndex) ||\n          !otherProperty.latitude ||\n          !otherProperty.longitude\n        )\n          return;\n\n        const otherLat = parseFloat(otherProperty.latitude);\n        const otherLng = parseFloat(otherProperty.longitude);\n\n        const distance = Math.sqrt(\n          Math.pow(lat - otherLat, 2) + Math.pow(lng - otherLng, 2),\n        );\n\n        if (distance <= CLUSTER_DISTANCE) {\n          cluster.push(otherProperty);\n          processed.add(otherIndex);\n        }\n      });\n\n      clusters.push({\n        properties: cluster,\n        center: {\n          lat:\n            cluster.reduce((sum, p) => sum + parseFloat(p.latitude || \"0\"), 0) /\n            cluster.length,\n          lng:\n            cluster.reduce(\n              (sum, p) => sum + parseFloat(p.longitude || \"0\"),\n              0,\n            ) / cluster.length,\n        },\n      });\n    });\n\n    return clusters;\n  };\n\n  // Helper function to get property type icon\n  const getPropertyTypeIcon = (type: string) => {\n    switch (type) {\n      case \"house\":\n        return \"fas fa-home\";\n      case \"apartment\":\n        return \"fas fa-building\";\n      case \"villa\":\n        return \"fas fa-university\";\n      case \"land\":\n        return \"fas fa-mountain\";\n      default:\n        return \"fas fa-home\";\n    }\n  };\n\n  // Helper function to analyze cluster property types\n  const analyzeClusterTypes = (properties: PropertyWithDetails[]) => {\n    const typeCount: { [key: string]: number } = {};\n    properties.forEach((prop) => {\n      const type = prop.type || \"house\";\n      typeCount[type] = (typeCount[type] || 0) + 1;\n    });\n    return typeCount;\n  };\n\n  // Function to create cluster marker\n  const createClusterMarker = (\n    cluster: any,\n    L: any,\n    isCityCluster: boolean = false,\n    totalCount?: number,\n  ) => {\n    const count = totalCount || cluster.properties.length;\n    const { lat, lng } = cluster.center;\n\n    // Always use orange background for cluster markers regardless of theme\n    const isDark = document.documentElement.classList.contains(\"dark\");\n    const bgGradient = \"linear-gradient(135deg, #f97316 0%, #ea580c 100%)\"; // Consistent orange gradient\n    const shadowColor = \"rgba(249, 115, 22, 0.4)\"; // Consistent orange shadow\n    const borderColor = \"#ffffff\";\n\n    // Analyze property types in this cluster\n    const typeAnalysis = analyzeClusterTypes(cluster.properties);\n    const hasActiveFilter = localFilters.type && localFilters.type !== \"all\";\n\n    // If there's an active filter, check if this cluster contains that type\n    const hasFilteredType =\n      hasActiveFilter && typeAnalysis[localFilters.type!] > 0;\n\n    // Determine which icon to show based on filter and cluster content\n    let iconToShow = \"fas fa-home\"; // default\n    if (hasActiveFilter && hasFilteredType) {\n      // Show the filtered type icon if this cluster contains that type\n      iconToShow = getPropertyTypeIcon(localFilters.type!);\n    } else if (Object.keys(typeAnalysis).length === 1) {\n      // If all properties in cluster are same type, show that type's icon\n      const singleType = Object.keys(typeAnalysis)[0];\n      iconToShow = getPropertyTypeIcon(singleType);\n    }\n\n    // Determine cluster size and styling based on count and type\n    const isLargeCluster = count > 10;\n    const clusterSize = isCityCluster ? (isLargeCluster ? 60 : 50) : 44;\n    const fontSize = isCityCluster\n      ? isLargeCluster\n        ? \"12px\"\n        : \"11px\"\n      : \"14px\";\n    const iconSize = isCityCluster ? \"10px\" : \"12px\";\n\n    const clusterIcon = L.divIcon({\n      html: `\n        <div class=\"cluster-marker\" style=\"\n          background: ${bgGradient};\n          width: ${clusterSize}px;\n          height: ${clusterSize}px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          flex-direction: ${isCityCluster ? \"column\" : \"row\"};\n          box-shadow: 0 10px 30px ${shadowColor}, 0 6px 15px rgba(0,0,0,0.2), inset 0 2px 0 rgba(255,255,255,0.2);\n          border: 3px solid ${borderColor};\n          cursor: pointer;\n          font-weight: 700;\n          color: white;\n          font-size: ${fontSize};\n          position: relative;\n          z-index: 1000;\n          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n          text-align: center;\n          transform: translateZ(0) rotateX(8deg) rotateY(8deg);\n          transform-style: preserve-3d;\n        \"\n        onmouseover=\"this.style.transform='scale(1.2) translateZ(15px) rotateX(15deg) rotateY(15deg)'; this.style.boxShadow='0 20px 50px ${shadowColor}, 0 12px 25px rgba(0,0,0,0.3), inset 0 3px 0 rgba(255,255,255,0.3)';\"\n        onmouseout=\"this.style.transform='translateZ(0) rotateX(8deg) rotateY(8deg)'; this.style.boxShadow='0 10px 30px ${shadowColor}, 0 6px 15px rgba(0,0,0,0.2), inset 0 2px 0 rgba(255,255,255,0.2)';\">\n          ${\n            cluster.clusterType === \"country\"\n              ? (() => {\n                  if (hasActiveFilter && hasFilteredType) {\n                    // Show only the filtered type icon for country clusters\n                    return `<i class=\"${iconToShow}\" style=\"font-size: 12px; margin-bottom: 2px; color: white;\"></i>\n                        <div style=\"font-size: 10px; line-height: 1; color: white;\">${count}</div>`;\n                  } else {\n                    // Show all icons when no filter is active\n                    const uniqueTypes = Object.keys(typeAnalysis);\n                    const iconsToShow =\n                      uniqueTypes.length <= 4\n                        ? uniqueTypes\n                        : uniqueTypes.slice(0, 4);\n                    const gridCols =\n                      iconsToShow.length === 1\n                        ? \"1fr\"\n                        : iconsToShow.length === 2\n                          ? \"1fr 1fr\"\n                          : \"1fr 1fr\";\n                    return `<div style=\"display: grid; grid-template-columns: ${gridCols}; gap: 1px; margin-bottom: 2px;\">\n                        ${iconsToShow.map((type) => `<i class=\"${getPropertyTypeIcon(type)}\" style=\"font-size: 8px; color: white;\"></i>`).join(\"\")}\n                        </div>\n                        <div style=\"font-size: 10px; line-height: 1; color: white;\">${count}</div>`;\n                  }\n                })()\n              : cluster.clusterType === \"city\"\n                ? `<i class=\"fas fa-city\" style=\"font-size: ${iconSize}; margin-bottom: 2px; color: white;\"></i>\n             <div style=\"font-size: 10px; line-height: 1; color: white;\">${count}</div>`\n                : `<i class=\"${iconToShow}\" style=\"margin-right: 4px; font-size: ${iconSize}; color: white;\"></i><span style=\"color: white;\">${count}</span>`\n          }\n        </div>\n      `,\n      className: \"custom-cluster-marker\",\n      iconSize: [clusterSize, clusterSize],\n      iconAnchor: [clusterSize / 2, clusterSize / 2],\n    });\n\n    const marker = L.marker([lat, lng], { icon: clusterIcon }).addTo(\n      mapInstanceRef.current,\n    );\n\n    const popupBg = isDark ? \"#1f2937\" : \"#ffffff\";\n    const textColor = isDark ? \"#ffffff\" : \"#000000\";\n    const subTextColor = isDark ? \"#d1d5db\" : \"#666666\";\n    const popupBorderColor = isDark ? \"#374151\" : \"#e5e7eb\";\n\n    let popupTitle;\n    if (cluster.clusterType === \"country\" && cluster.country) {\n      popupTitle = `${count} ${t(\"map.propertiesIn\")} ${cluster.country}`;\n    } else if (cluster.clusterType === \"city\" && cluster.city) {\n      popupTitle = `${count} ${t(\"map.propertiesIn\")} ${cluster.city}`;\n    } else {\n      popupTitle = `${count} ${t(\"map.propertiesInThisArea\")}`;\n    }\n\n    const popupContent = `\n      <div class=\"cluster-popup responsive-cluster-popup\" style=\"\n        width: 100%; \n        max-width: min(400px, 90vw); \n        min-width: min(280px, 85vw); \n        background: ${popupBg}; \n        color: ${textColor}; \n        border-radius: 12px; \n        box-shadow: 0 20px 60px rgba(0,0,0,0.3), 0 10px 30px rgba(0,0,0,0.2), inset 0 1px 0 rgba(255,255,255,0.1);\n        transform: translateZ(15px) rotateX(3deg);\n        transform-style: preserve-3d;\n        backdrop-filter: blur(10px);\n        border: 1px solid rgba(255,255,255,0.1);\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n        overflow: hidden;\n      \">\n        <div style=\"\n          background: linear-gradient(135deg, #FF7800 0%, #e56600 100%); \n          color: white; \n          padding: clamp(12px, 4vw, 16px); \n          margin: 0; \n          border-radius: 12px 12px 0 0; \n          font-weight: 600; \n          text-align: center; \n          font-size: clamp(13px, 3vw, 15px);\n          letter-spacing: 0.3px;\n          word-wrap: break-word;\n          border-bottom: 1px solid rgba(255, 120, 0, 0.2);\n        \">\n          ${popupTitle}\n        </div>\n        <div style=\"\n          max-height: min(350px, 60vh); \n          overflow-y: auto; \n          padding: clamp(6px, 2vw, 8px); \n          scrollbar-width: thin;\n          scrollbar-color: #cbd5e0 transparent;\n        \">\n          <style>\n            .cluster-popup::-webkit-scrollbar { width: 6px; }\n            .cluster-popup::-webkit-scrollbar-track { background: transparent; }\n            .cluster-popup::-webkit-scrollbar-thumb { background: #cbd5e0; border-radius: 3px; }\n            .cluster-popup::-webkit-scrollbar-thumb:hover { background: #a0aec0; }\n          </style>\n          ${cluster.properties\n            .map((property: any) => {\n              const rawImageUrl = property.images && property.images.length > 0\n                ? (property.images[0].imageUrl || property.images[0])\n                : \"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=400&h=250&fit=crop&crop=center\";\n              \n              const propertyImage = rawImageUrl.startsWith('http') \n                ? rawImageUrl\n                : normalizePropertyImageUrl(rawImageUrl);\n\n              return `\n                <div style=\"\n                  display: flex; \n                  gap: clamp(8px, 2vw, 12px); \n                  padding: clamp(8px, 2vw, 12px); \n                  border-bottom: 1px solid ${popupBorderColor}; \n                  cursor: pointer; \n                  color: ${textColor}; \n                  border-radius: 8px;\n                  transition: background-color 0.2s ease;\n                  margin-bottom: clamp(4px, 1vw, 8px);\n                \" \n                onclick=\"window.zoomToPropertyFromCluster('${property.id}', ${property.latitude}, ${property.longitude})\"\n                onmouseover=\"this.style.backgroundColor='${isDark ? \"#374151\" : \"#f8fafc\"}'\"\n                onmouseout=\"this.style.backgroundColor='transparent'\">\n                  \n                  <div style=\"\n                    width: clamp(60px, 15vw, 80px); \n                    height: clamp(45px, 12vw, 60px); \n                    border-radius: 6px; \n                    overflow: hidden; \n                    flex-shrink: 0;\n                    background: #e2e8f0;\n                  \">\n                    <img src=\"${propertyImage}\" \n                         alt=\"${getPropertyTitle(property)}\" \n                         style=\"\n                           width: 100%; \n                           height: 100%; \n                           object-fit: cover;\n                         \" \n                         onerror=\"this.src='https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=400&h=250&fit=crop&crop=center';\" />\n                  </div>\n                  \n                  <div style=\"flex: 1; min-width: 0;\">\n                    <div style=\"\n                      font-weight: 600; \n                      font-size: clamp(12px, 3vw, 14px); \n                      margin-bottom: 4px; \n                      color: ${textColor};\n                      white-space: nowrap;\n                      overflow: hidden;\n                      text-overflow: ellipsis;\n                      line-height: 1.3;\n                    \">${getPropertyTitle(property)}</div>\n                    \n                    <div style=\"\n                      font-size: clamp(10px, 2.5vw, 12px); \n                      color: ${subTextColor}; \n                      margin-bottom: 6px;\n                      white-space: nowrap;\n                      overflow: hidden;\n                      text-overflow: ellipsis;\n                      line-height: 1.3;\n                    \">${property.address}</div>\n                    \n                    <div style=\"\n                      display: flex;\n                      align-items: center;\n                      justify-content: space-between;\n                      margin-bottom: 4px;\n                    \">\n                      <div id=\"popup-price-${property.id}\" style=\"\n                        font-weight: 700; \n                        color: #FF7800; \n                        font-size: clamp(11px, 3vw, 13px);\n                        display: flex;\n                        align-items: center;\n                        gap: 4px;\n                        line-height: 1.3;\n                      \">\n                        ${formatMapPrice(property)}\n                      </div>\n                      <div style=\"\n                        display: inline-flex;\n                        align-items: center;\n                        gap: 3px;\n                        padding: 2px 6px;\n                        border-radius: 12px;\n                        font-size: clamp(8px, 2vw, 10px);\n                        font-weight: 600;\n                        text-transform: uppercase;\n                        letter-spacing: 0.5px;\n                        ${\n                          property.listingType === \"rent\"\n                            ? \"background: rgba(34, 197, 94, 0.15); color: #059669; border: 1px solid rgba(34, 197, 94, 0.3);\"\n                            : \"background: rgba(239, 68, 68, 0.15); color: #dc2626; border: 1px solid rgba(239, 68, 68, 0.3);\"\n                        }\n                      \">\n                        ${\n                          property.listingType === \"rent\"\n                            ? `<span style=\"color: #059669;\"></span><span>${t(\"filter.forRent\")}</span>`\n                            : `<span style=\"color: #dc2626;\"></span><span>${t(\"filter.forSale\")}</span>`\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              `;\n            })\n            .join(\"\")}\n        </div>\n      </div>\n    `;\n\n    // Add cluster marker to map\n    marker.addTo(mapInstanceRef.current);\n\n    marker.bindPopup(popupContent, {\n      maxWidth: 350,\n      className: \"custom-cluster-popup\",\n    });\n\n    markersRef.current.push(marker);\n  };\n\n  // Helper function to get favorite status for popup\n  const getFavoriteStatus = (propertyId: string) => {\n    if (!userId) return false;\n    const favoriteData = queryClient.getQueryData([\n      \"/api/favorites/check\",\n      { userId, propertyId },\n    ]) as { isFavorite?: boolean } | undefined;\n    return favoriteData?.isFavorite || false;\n  };\n\n  // Function to create individual property marker\n  const createSingleMarker = (property: any, L: any) => {\n    const lat = parseFloat(property.latitude || \"0\");\n    const lng = parseFloat(property.longitude || \"0\");\n\n    // Create custom icon based on property type and listing type\n    const getPropertyIcon = (\n      type: string,\n      listingType: string,\n      isFeatured: boolean = false,\n      hasWave: boolean = false,\n    ) => {\n      // Get theme-aware colors\n      const isDark = document.documentElement.classList.contains(\"dark\");\n\n      // Main colors for sale/rent with better contrast\n      let bgColor = listingType === \"sale\" ? \"#dc2626\" : \"#059669\";\n      let markerBorderColor = \"#ffffff\";\n      let shadowColor =\n        listingType === \"sale\"\n          ? isDark\n            ? \"rgba(220, 38, 38, 0.4)\"\n            : \"rgba(220, 38, 38, 0.3)\"\n          : isDark\n            ? \"rgba(5, 150, 105, 0.4)\"\n            : \"rgba(5, 150, 105, 0.3)\";\n\n      let animationClass = (isFeatured || hasWave) ? \"premium-marker\" : \"\";\n      let iconType =\n        type === \"apartment\"\n          ? \"fa-building\"\n          : type === \"land\"\n            ? \"fa-map-marked-alt\"\n            : type === \"villa\"\n              ? \"fa-university\"\n              : \"fa-home\";\n\n      // Premium wave animation circles\n      const waveAnimation = hasWave\n        ? `\n        <div class=\"wave-circle\" style=\"\n          position: absolute;\n          top: -8px;\n          left: -8px;\n          right: -8px;\n          bottom: -8px;\n          border-radius: 50%;\n          border: 3px solid #F59E0B;\n          animation: wave-pulse 2s ease-in-out infinite;\n        \"></div>\n        <div class=\"wave-circle\" style=\"\n          position: absolute;\n          top: -16px;\n          left: -16px;\n          right: -16px;\n          bottom: -16px;\n          border-radius: 50%;\n          border: 2px solid #F59E0B;\n          animation: wave-pulse 2s ease-in-out infinite 0.5s;\n          opacity: 0.7;\n        \"></div>\n        <div class=\"wave-circle\" style=\"\n          position: absolute;\n          top: -24px;\n          left: -24px;\n          right: -24px;\n          bottom: -24px;\n          border-radius: 50%;\n          border: 1px solid #F59E0B;\n          animation: wave-pulse 2s ease-in-out infinite 1s;\n          opacity: 0.4;\n        \"></div>\n        <style>\n          @keyframes wave-pulse {\n            0% {\n              transform: scale(0.8);\n              opacity: 1;\n            }\n            100% {\n              transform: scale(1.5);\n              opacity: 0;\n            }\n          }\n        </style>\n      `\n        : \"\";\n\n      return L.divIcon({\n        html: `\n          <div class=\"property-marker-icon ${animationClass}\" style=\"\n            background: ${bgColor};\n            width: 40px;\n            height: 40px;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 8px 25px ${shadowColor}, 0 4px 10px rgba(0,0,0,0.15), inset 0 1px 0 rgba(255,255,255,0.2);\n            border: 3px solid ${markerBorderColor};\n            cursor: pointer;\n            position: relative;\n            z-index: 1000;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            transform: translateZ(0) rotateX(5deg) rotateY(5deg);\n            transform-style: preserve-3d;\n          \"\n          onmouseover=\"this.style.transform='scale(1.15) translateZ(10px) rotateX(10deg) rotateY(10deg)'; this.style.zIndex='1001'; this.style.boxShadow='0 15px 35px ${shadowColor}, 0 8px 15px rgba(0,0,0,0.2), inset 0 2px 0 rgba(255,255,255,0.3)';\"\n          onmouseout=\"this.style.transform='translateZ(0) rotateX(5deg) rotateY(5deg)'; this.style.zIndex='1000'; this.style.boxShadow='0 8px 25px ${shadowColor}, 0 4px 10px rgba(0,0,0,0.15), inset 0 1px 0 rgba(255,255,255,0.2)';\">\n            <i class=\"fas ${iconType}\" style=\"color: white; font-size: 16px; pointer-events: none;\"></i>\n            ${(isFeatured || hasWave) ? '<div class=\"premium-ring\" style=\"position: absolute; top: -4px; left: -4px; right: -4px; bottom: -4px; border-radius: 50%; border: 2px solid #fbbf24; animation: pulse 2s infinite;\"></div>' : \"\"}\n            ${waveAnimation}\n          </div>\n        `,\n        className: \"custom-property-marker clickable-marker\",\n        iconSize: [40, 40],\n        iconAnchor: [20, 20],\n      });\n    };\n\n    // Check if property has a wave assigned (not 'no-wave' and not null/undefined)\n    const hasWave = property.waveId && property.waveId !== \"no-wave\";\n    const customIcon = getPropertyIcon(\n      property.type,\n      property.listingType,\n      property.isFeatured,\n      hasWave,\n    );\n    const marker = L.marker([lat, lng], { icon: customIcon }).addTo(\n      mapInstanceRef.current,\n    );\n\n    // Add popup with image slider\n    const images =\n      Array.isArray(property.images) && property.images.length > 0\n        ? property.images.map((img: any) => {\n            const imageUrl = img.imageUrl || img;\n            return normalizePropertyImageUrl(imageUrl);\n          })\n        : [\n            \"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=800\",\n          ];\n    const hasMultipleImages = images.length > 1;\n    const popupId = `popup-${property.id}`;\n\n    const isDark = document.documentElement.classList.contains(\"dark\");\n    const popupBg = isDark ? \"#1f2937\" : \"#ffffff\";\n    const textColor = isDark ? \"#ffffff\" : \"#000000\";\n    const subTextColor = isDark ? \"#d1d5db\" : \"#666666\";\n\n    // Get current favorite status for this property\n    const isFavorite = getFavoriteStatus(property.id);\n    const heartIconClass = isFavorite ? \"fas fa-heart\" : \"far fa-heart\";\n    const heartIconColor = isFavorite ? \"#ef4444\" : \"#6b7280\";\n    const heartBgColor = isFavorite ? \"#fee2e2\" : \"#f3f4f6\";\n    const heartBgHover = isFavorite ? \"#fecaca\" : \"#e5e7eb\";\n\n    const popupContent = `\n      <div class=\"property-popup responsive-popup\" id=\"${popupId}\" style=\"\n        background: ${popupBg}; \n        color: ${textColor};\n        border-radius: 12px;\n        box-shadow: 0 20px 60px rgba(0,0,0,0.3), 0 10px 30px rgba(0,0,0,0.2), inset 0 1px 0 rgba(255,255,255,0.1);\n        transform: translateZ(10px) rotateX(2deg);\n        transform-style: preserve-3d;\n        backdrop-filter: blur(10px);\n        border: 1px solid rgba(255,255,255,0.1);\">\n        ${\n          images.length > 0\n            ? `\n          <div class=\"popup-image-container\" style=\"position: relative;\">\n            <div class=\"popup-image-slider\" style=\"position: relative; height: 150px; overflow: hidden;\">\n              ${images\n                .map(\n                  (img: string, index: number) => `\n                <img src=\"${img}\" alt=\"${getPropertyTitle(property)} - Image ${index + 1}\" \n                     class=\"popup-slide\" \n                     style=\"\n                       width: 100%; \n                       height: 150px; \n                       object-fit: cover; \n                       position: absolute; \n                       top: 0; \n                       left: 0;\n                       opacity: ${index === 0 ? \"1\" : \"0\"};\n                       transition: opacity 0.3s ease;\n                     \"\n                     data-slide-index=\"${index}\"\n                     onerror=\"this.style.display='none';\" />\n              `,\n                )\n                .join(\"\")}\n            </div>\n            ${\n              hasMultipleImages\n                ? `\n              <button onclick=\"changeSlide('${popupId}', -1)\" \n                      style=\"\n                        position: absolute; \n                        left: 8px; \n                        top: 50%; \n                        transform: translateY(-50%);\n                        background: rgba(0,0,0,0.5); \n                        color: white; \n                        border: none; \n                        border-radius: 50%; \n                        width: 30px; \n                        height: 30px; \n                        cursor: pointer;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        font-size: 14px;\n                        z-index: 1000;\n                        direction: ltr;\n                      \"\n                      onmouseover=\"this.style.background='rgba(0,0,0,0.7)'\"\n                      onmouseout=\"this.style.background='rgba(0,0,0,0.5)'\">‹</button>\n              <button onclick=\"changeSlide('${popupId}', 1)\" \n                      style=\"\n                        position: absolute; \n                        right: 8px; \n                        top: 50%; \n                        transform: translateY(-50%);\n                        background: rgba(0,0,0,0.5); \n                        color: white; \n                        border: none; \n                        border-radius: 50%; \n                        width: 30px; \n                        height: 30px; \n                        cursor: pointer;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        font-size: 14px;\n                        z-index: 1000;\n                        direction: ltr;\n                      \"\n                      onmouseover=\"this.style.background='rgba(0,0,0,0.7)'\"\n                      onmouseout=\"this.style.background='rgba(0,0,0,0.5)'\">›</button>\n              <div style=\"\n                position: absolute; \n                bottom: 8px; \n                right: 8px; \n                background: rgba(0,0,0,0.7); \n                color: white; \n                padding: 4px 8px; \n                border-radius: 12px; \n                font-size: 12px;\n                z-index: 1000;\n              \">\n                <span class=\"slide-counter\">1</span> / ${images.length}\n              </div>\n            `\n                : \"\"\n            }\n          </div>\n        `\n            : \"\"\n        }\n        <div class=\"popup-content\" style=\"padding: 16px; background: ${popupBg}; direction: ${language === \"ar\" || language === \"kur\" ? \"rtl\" : \"ltr\"}; text-align: ${language === \"ar\" || language === \"kur\" ? \"right\" : \"left\"};\">\n          <h4 class=\"popup-title\" style=\"color: ${textColor}; font-weight: 600; font-size: 16px; margin-bottom: 8px;\">${getPropertyTitle(property)}</h4>\n          <p class=\"popup-address\" style=\"color: ${subTextColor}; font-size: 12px; margin-bottom: 8px;\">${property.address}</p>\n          <p class=\"popup-price\" id=\"popup-price-${property.id}\" style=\"color: #FF7800; font-weight: 700; font-size: 18px; margin-bottom: 12px;\">\n            ${formatMapPrice(property)}\n          </p>\n          <div class=\"popup-details\" style=\"display: flex; gap: 12px; flex-wrap: wrap; margin-bottom: 12px; font-size: 12px; color: ${subTextColor}; justify-content: ${language === \"ar\" || language === \"kur\" ? \"flex-end\" : \"flex-start\"};\">\n            ${property.bedrooms ? `<span style=\"color: ${subTextColor};\">${language === \"ar\" || language === \"kur\" ? `${property.bedrooms} ${t(\"property.beds\")} <i class=\"fas fa-bed\" style=\"color: #FF7800; margin-left: 4px;\"></i>` : `<i class=\"fas fa-bed\" style=\"color: #FF7800; margin-right: 4px;\"></i>${property.bedrooms} ${t(\"property.beds\")}`}</span>` : \"\"} \n            ${property.bathrooms ? `<span style=\"color: ${subTextColor};\">${language === \"ar\" || language === \"kur\" ? `${property.bathrooms} ${t(\"property.baths\")} <i class=\"fas fa-bath\" style=\"color: #FF7800; margin-left: 4px;\"></i>` : `<i class=\"fas fa-bath\" style=\"color: #FF7800; margin-right: 4px;\"></i>${property.bathrooms} ${t(\"property.baths\")}`}</span>` : \"\"}\n            ${property.area ? `<span style=\"color: ${subTextColor};\">${language === \"ar\" || language === \"kur\" ? `${property.area} ${t(\"property.sqFt\")} <i class=\"fas fa-ruler-combined\" style=\"color: #FF7800; margin-left: 4px;\"></i>` : `<i class=\"fas fa-ruler-combined\" style=\"color: #FF7800; margin-right: 4px;\"></i>${property.area} ${t(\"property.sqFt\")}`}</span>` : \"\"}\n          </div>\n          ${(() => {\n            // Priority: Customer contact (from inquiries) > Property contact phone > Agent phone\n            const customerContact = property.customerContact;\n            let contactPhone, contactName;\n\n            if (customerContact && customerContact.phone) {\n              contactPhone = customerContact.phone;\n              contactName = customerContact.name;\n            } else if (property.contactPhone) {\n              contactPhone = property.contactPhone;\n              contactName = property.agent\n                ? `${property.agent.firstName || \"\"} ${property.agent.lastName || \"\"}`.trim() ||\n                  \"Agent\"\n                : \"Owner\";\n            } else if (property.agent && property.agent.phone) {\n              contactPhone = property.agent.phone;\n              contactName = property.agent\n                ? `${property.agent.firstName || \"\"} ${property.agent.lastName || \"\"}`.trim() ||\n                  \"Agent\"\n                : \"Owner\";\n            }\n\n            if (contactPhone) {\n              // Format phone number for display (remove spaces and format cleanly)\n              const displayPhone = contactPhone.replace(/\\s+/g, \"\");\n\n              const isCustomer = customerContact && customerContact.phone;\n              const bgColor = isCustomer\n                ? \"rgba(59, 130, 246, 0.1)\"\n                : \"rgba(37, 211, 102, 0.1)\";\n              const borderColor = isCustomer ? \"#3b82f6\" : \"#25D366\";\n              const iconColor = isCustomer ? \"#3b82f6\" : \"#25D366\";\n              const contactType = isCustomer ? \"Customer\" : \"Agent\";\n\n              return `\n             \n              `;\n            }\n            return \"\";\n          })()}\n          <div class=\"popup-buttons\" style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\n            <button class=\"popup-button\" \n                    onclick=\"window.viewPropertyFromMap('${property.slug || property.id}')\"\n                    onmouseover=\"this.style.background='#e56600'\"\n                    onmouseout=\"this.style.background='#FF7800'\"\n                    style=\"flex: 1; min-width: 100px; background: #FF7800; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-weight: 500; transition: background-color 0.2s ease; z-index: 9999; position: relative;\">\n              ${t(\"property.viewProperty\")}\n            </button>\n            ${\n              userId\n                ? `\n              <button id=\"heart-btn-${property.id}\" \n                      class=\"popup-button heart-button\" \n                      onclick=\"window.toggleFavoriteFromMap('${property.id}')\"\n                      style=\"background: ${heartBgColor}; flex: 0 0 40px; width: 40px; height: 40px; min-width: 40px; display: flex; align-items: center; justify-content: center;\"\n                      onmouseover=\"this.style.background='${heartBgHover}'\"\n                      onmouseout=\"this.style.background='${heartBgColor}'\"\n                      title=\"${isFavorite ? \"Remove from Favorites\" : \"Add to Favorites\"}\">\n                <i class=\"${heartIconClass}\" style=\"color: ${heartIconColor}; font-size: 14px;\"></i>\n              </button>\n            `\n                : \"\"\n            }\n            ${(() => {\n              // Priority: Customer contact (from inquiries) > Property contact phone > Agent phone\n              const customerContact = property.customerContact;\n              let contactPhone,\n                contactName,\n                isCustomer = false;\n\n              if (customerContact && customerContact.phone) {\n                contactPhone = customerContact.phone;\n                contactName = customerContact.name;\n                isCustomer = true;\n              } else if (property.contactPhone) {\n                contactPhone = property.contactPhone;\n                contactName = property.agent\n                  ? `${property.agent.firstName || \"\"} ${property.agent.lastName || \"\"}`.trim() ||\n                    \"Agent\"\n                  : \"Owner\";\n              } else if (property.agent && property.agent.phone) {\n                contactPhone = property.agent.phone;\n                contactName = property.agent\n                  ? `${property.agent.firstName || \"\"} ${property.agent.lastName || \"\"}`.trim() ||\n                    \"Agent\"\n                  : \"Owner\";\n              }\n\n              if (contactPhone) {\n                const cleanPhone = contactPhone.replace(/[^+0-9]/g, \"\");\n                // Format phone number for display (remove spaces and format cleanly)\n                const displayPhone = contactPhone.replace(/\\s+/g, \"\");\n                const callBtnColor = isCustomer ? \"#3b82f6\" : \"#16a34a\";\n                const callBtnHoverColor = isCustomer ? \"#2563eb\" : \"#0c7b00\";\n                const whatsappBtnColor = \"#25D366\";\n                const whatsappBtnHoverColor = \"#128C7E\";\n                const contactType = isCustomer ? \"Customer\" : \"Agent\";\n\n                return `\n                  <button class=\"popup-button\" \n                          onclick=\"window.open('tel:${contactPhone}', '_self')\"\n                          onmouseover=\"this.style.background='${callBtnHoverColor}'\"\n                          onmouseout=\"this.style.background='${callBtnColor}'\"\n                          style=\"background: ${callBtnColor}; flex: 0 0 40px; width: 40px; height: 40px; min-width: 40px; display: flex; align-items: center; justify-content: center;\"\n                          title=\"Call ${contactType} - ${contactName} (${displayPhone})\">\n                    <i class=\"fas fa-phone\" style=\"color: white;\"></i>\n                  </button>\n                  <button class=\"popup-button\" \n                          onclick=\"window.open('https://wa.me/${cleanPhone}?text=Hi, I\\\\'m interested in this property: ${encodeURIComponent(getPropertyTitle(property))} - ${property.currency === \"USD\" ? \"$\" : property.currency}${parseFloat(property.price).toLocaleString()}', '_blank')\"\n                          onmouseover=\"this.style.background='${whatsappBtnHoverColor}'\"\n                          onmouseout=\"this.style.background='${whatsappBtnColor}'\"\n                          style=\"background: ${whatsappBtnColor}; flex: 0 0 40px; width: 40px; height: 40px; min-width: 40px; display: flex; align-items: center; justify-content: center;\"\n                          title=\"WhatsApp ${contactType} - ${contactName} (${displayPhone})\">\n                    <i class=\"fab fa-whatsapp\" style=\"color: white;\"></i>\n                  </button>\n                `;\n              } else {\n                return `<span style=\"color: ${subTextColor}; font-size: 12px; font-style: italic;\">Contact info not available</span>`;\n              }\n            })()}\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add marker to map\n    marker.addTo(mapInstanceRef.current);\n\n    marker.bindPopup(popupContent, {\n      maxWidth: 350,\n      minWidth: 240,\n      className: \"custom-popup\",\n    });\n\n    // Update price when popup opens to ensure latest converted value\n    marker.on(\"popupopen\", () => {\n      console.log(\"🔓 Popup opened for property:\", property.id);\n      const priceElement = document.getElementById(\n        `popup-price-${property.id}`,\n      );\n      if (priceElement) {\n        const newPrice = formatMapPrice(property);\n        console.log(\"💰 Updating popup price:\", {\n          propertyId: property.id,\n          oldPrice: priceElement.innerHTML,\n          newPrice: newPrice,\n        });\n        priceElement.innerHTML = newPrice;\n      } else {\n        console.log(\"❌ Price element not found for property:\", property.id);\n      }\n    });\n\n    // Add click event without zoom behavior\n    marker.on(\"click\", () => {\n      // Trigger callback without zoom\n      if (onPropertySelect) {\n        onPropertySelect(property);\n      }\n    });\n\n    markersRef.current.push(marker);\n  };\n\n  // Update markers when properties change (from API)\n  useEffect(() => {\n    currentPropertiesRef.current = properties;\n    // Only update markers if currency conversion is complete or if using same currency\n    const conversionNeeded = properties.some(\n      (p) => p.currency !== preferredCurrency,\n    );\n    const conversionReady =\n      !conversionNeeded || Object.keys(convertedPrices).length > 0;\n\n    if (conversionReady) {\n      updateMarkersForProperties(properties, properties.length);\n      // Update visible properties count when properties change\n      setTimeout(() => {\n        calculateVisibleProperties(true); // Force update when properties change\n      }, 200);\n    }\n  }, [properties, convertedPrices, preferredCurrency]);\n\n  // Update markers when language changes to refresh translations\n  useEffect(() => {\n    if (currentPropertiesRef.current.length > 0) {\n      updateMarkersForProperties(currentPropertiesRef.current, properties.length);\n    }\n  }, [language]);\n\n  // Update markers function that accepts properties array - always show all markers\n  const updateMarkersForProperties = (\n    propertiesToShow: PropertyWithDetails[],\n    totalPropertiesCount?: number,\n  ) => {\n    if (\n      !mapInstanceRef.current ||\n      typeof window === \"undefined\" ||\n      !(window as any).L\n    )\n      return;\n\n    // Don't update markers if properties array is empty (might be loading)\n    if (!propertiesToShow || propertiesToShow.length === 0) {\n      return;\n    }\n\n    const L = (window as any).L;\n\n    // Clear existing markers safely\n    markersRef.current.forEach((marker) => {\n      try {\n        if (mapInstanceRef.current && marker) {\n          mapInstanceRef.current.removeLayer(marker);\n        }\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    });\n    markersRef.current = [];\n\n    // Get current zoom level to determine clustering strategy\n    const currentZoom = mapInstanceRef.current.getZoom();\n    const clusters = createZoomBasedClusters(propertiesToShow, currentZoom);\n    const isClusteringEnabled = currentZoom < 10;\n\n    clusters.forEach((cluster) => {\n      if (cluster.properties.length === 1) {\n        // Show individual marker if only one property in cluster\n        createSingleMarker(cluster.properties[0], L);\n      } else {\n        // Show cluster marker if multiple properties are grouped\n        // Use the actual count of properties in this specific cluster\n        const clusterCount = cluster.count || cluster.properties.length;\n        createClusterMarker(cluster, L, isClusteringEnabled, clusterCount);\n      }\n    });\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    // Prevent duplicate calls within 100ms\n    const now = Date.now();\n    if (clickGuard.current && now - clickGuard.current < 100) return;\n    clickGuard.current = now;\n\n    console.log(`Filter change: ${key} = ${value}`);\n    isLocalUpdate.current = true;\n    const newFilters = { ...localFilters };\n\n    // Handle special \"clear\" values\n    if (\n      value === \"any-price\" ||\n      value === \"all-types\" ||\n      value === \"any-bedrooms\"\n    ) {\n      delete newFilters[key as keyof PropertyFilters];\n    } else {\n      // Check if the same value is already selected (toggle functionality)\n      const currentValue = localFilters[key as keyof PropertyFilters];\n\n      if (currentValue === value) {\n        // If same value is clicked, unselect it (remove the filter)\n        delete newFilters[key as keyof PropertyFilters];\n        console.log(`Unselecting filter: ${key}`);\n      } else {\n        // Convert values to proper types and set new filter\n        if (key === \"maxPrice\" || key === \"bedrooms\") {\n          newFilters[key as keyof PropertyFilters] = parseInt(value) as any;\n        } else {\n          newFilters[key as keyof PropertyFilters] = value as any;\n        }\n      }\n    }\n\n    // Always maintain the limit for map properties\n    newFilters.limit = 100;\n\n    setLocalFilters(newFilters);\n    console.log(\"Updated filters:\", newFilters);\n\n    // Immediately trigger parent filter change to call API\n    onFilterChange?.(newFilters);\n  };\n\n  // Enhanced geolocation function with better error handling and toggle\n  const handleGetMyLocation = () => {\n    // If user location is already visible, hide it\n    if (isUserLocationVisible && userLocationMarkerRef.current) {\n      console.log(\"🔍 Hiding user location marker...\");\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.removeLayer(userLocationMarkerRef.current);\n      }\n      userLocationMarkerRef.current = null;\n      setIsUserLocationVisible(false);\n      return;\n    }\n\n    console.log(\"🔍 Getting user location...\");\n    \n    if (!mapInstanceRef.current) {\n      console.error(\"❌ Map instance not available\");\n      alert(\"Map is not ready yet. Please wait a moment and try again.\");\n      return;\n    }\n\n    setIsLocating(true);\n\n    // Check if geolocation is supported\n    if (!(\"geolocation\" in navigator)) {\n      console.error(\"❌ Geolocation not supported by this browser\");\n      setIsLocating(false);\n      alert(\"Geolocation is not supported by your browser. Please try using a modern browser like Chrome, Firefox, or Safari.\");\n      return;\n    }\n\n    // Check if we're on a secure context (HTTPS or localhost)\n    const isSecureContext = window.isSecureContext || location.protocol === 'https:' || location.hostname === 'localhost';\n    if (!isSecureContext) {\n      console.error(\"❌ Geolocation requires secure context (HTTPS)\");\n      setIsLocating(false);\n      alert(\"Location services require a secure connection (HTTPS). Please make sure you're accessing the site securely.\");\n      return;\n    }\n\n    console.log(\"✅ Geolocation is supported and context is secure\");\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        console.log(\"✅ Location obtained successfully:\", {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        });\n        \n        const { latitude, longitude } = position.coords;\n        const L = (window as any).L;\n\n        if (mapInstanceRef.current && L) {\n          // Smoothly fly to user's location with animation\n          mapInstanceRef.current.flyTo([latitude, longitude], 15, {\n            animate: true,\n            duration: 2.5, // 2.5 seconds smooth animation\n            easeLinearity: 0.25,\n          });\n\n          // Add a more visible pulsing marker for user's location with orange color\n          const userLocationIcon = L.divIcon({\n            html: `\n              <div style=\"\n                position: relative;\n                width: 40px;\n                height: 40px;\n              \">\n                <div style=\"\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                  transform: translate(-50%, -50%);\n                  width: 40px;\n                  height: 40px;\n                  background: rgba(255, 120, 0, 0.2);\n                  border-radius: 50%;\n                  animation: pulse-orange 2s ease-out infinite;\n                \"></div>\n                <div style=\"\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                  transform: translate(-50%, -50%);\n                  background: #FF7800;\n                  width: 16px;\n                  height: 16px;\n                  border-radius: 50%;\n                  border: 3px solid white;\n                  box-shadow: 0 2px 10px rgba(255, 120, 0, 0.6);\n                  z-index: 10;\n                \">\n                  <div style=\"\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    width: 6px;\n                    height: 6px;\n                    background: white;\n                    border-radius: 50%;\n                  \"></div>\n                </div>\n              </div>\n              <style>\n                @keyframes pulse-orange {\n                  0% {\n                    transform: translate(-50%, -50%) scale(0.5);\n                    opacity: 1;\n                  }\n                  100% {\n                    transform: translate(-50%, -50%) scale(2.5);\n                    opacity: 0;\n                  }\n                }\n              </style>\n            `,\n            className: \"user-location-marker\",\n            iconSize: [40, 40],\n            iconAnchor: [20, 20],\n          });\n\n          // Remove any existing user location marker\n          if (userLocationMarkerRef.current) {\n            mapInstanceRef.current.removeLayer(userLocationMarkerRef.current);\n          }\n\n          // Create and add the user location marker (without popup)\n          userLocationMarkerRef.current = L.marker([latitude, longitude], {\n            icon: userLocationIcon,\n          }).addTo(mapInstanceRef.current);\n          \n          // Set visibility state\n          setIsUserLocationVisible(true);\n          \n          console.log(\"✅ User location marker added to map at\", latitude, longitude);\n        } else {\n          console.error(\"❌ Map instance or Leaflet not available\");\n        }\n\n        // Send location data to backend for tracking\n        const sendLocationToBackend = async () => {\n          try {\n            console.log(\"📤 Sending location data to backend...\");\n            \n            const locationData = {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              accuracy: Math.round(position.coords.accuracy), // Round to integer\n              userId: user?.id || null,\n              metadata: {\n                userAgent: navigator.userAgent,\n                language: navigator.language,\n                permissionStatus: 'granted',\n                city: undefined, // Will be determined by server if available\n                country: undefined // Will be determined by server if available\n              }\n            };\n\n            const response = await apiRequest('POST', '/api/client-locations', locationData);\n            \n            if (response.ok) {\n              console.log(\"✅ Location data sent successfully to backend\");\n              \n              // Invalidate admin dashboard cache so it updates in real-time\n              queryClient.invalidateQueries({ queryKey: ['/api/admin/client-locations'] });\n            } else {\n              console.error(\"❌ Failed to send location data to backend\");\n            }\n          } catch (error) {\n            console.error(\"❌ Error sending location data to backend:\", error);\n            // Don't show user error for tracking - this is background functionality\n          }\n        };\n\n        // Send location data to backend (non-blocking)\n        sendLocationToBackend();\n\n        setIsLocating(false);\n      },\n      (error) => {\n        console.error(\"❌ Geolocation error:\", error);\n        console.error(\"❌ Error details:\", {\n          code: error?.code,\n          message: error?.message,\n          PERMISSION_DENIED: error?.PERMISSION_DENIED,\n          POSITION_UNAVAILABLE: error?.POSITION_UNAVAILABLE,\n          TIMEOUT: error?.TIMEOUT\n        });\n        setIsLocating(false);\n        \n        let errorMessage = \"Unable to get your location. \";\n        \n        // Handle both standard error codes and empty error objects\n        if (!error || !error.code) {\n          errorMessage += \"Location service is not responding. Please check:\\n\\n\";\n          errorMessage += \"• Your device has location services enabled\\n\";\n          errorMessage += \"• Your browser has permission to access location\\n\";\n          errorMessage += \"• You're using HTTPS or localhost\\n\";\n          errorMessage += \"\\nTry refreshing the page and allowing location access when prompted.\";\n        } else {\n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage += \"You denied location access. To enable location services:\\n\\n\";\n              errorMessage += \"• Click the location icon in your browser's address bar\\n\";\n              errorMessage += \"• Select 'Allow' for location access\\n\";\n              errorMessage += \"• Refresh the page and try again\";\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage += \"Location information is unavailable. Please check:\\n\\n\";\n              errorMessage += \"• Your device's location services are enabled\\n\";\n              errorMessage += \"• You have a stable internet connection\\n\";\n              errorMessage += \"• Try moving to a location with better GPS signal\";\n              break;\n            case error.TIMEOUT:\n              errorMessage += \"Location request timed out. Please:\\n\\n\";\n              errorMessage += \"• Check your internet connection\\n\";\n              errorMessage += \"• Try again in a moment\\n\";\n              errorMessage += \"• Make sure location services are enabled on your device\";\n              break;\n            default:\n              errorMessage += \"An unknown error occurred. Please try again or check your browser settings.\";\n              break;\n          }\n        }\n        \n        alert(errorMessage);\n      },\n      {\n        enableHighAccuracy: false, // Set to false for faster response\n        timeout: 15000, // Increased timeout to 15 seconds\n        maximumAge: 60000, // 1 minute cache\n      },\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"relative\">\n        {/* Map Container - Full Size */}\n        <div className=\"relative h-screen\" data-testid=\"property-map\">\n          <div ref={mapRef} className=\"w-full h-full\" />\n\n          {/* Legend Overlay on Map */}\n          <div className=\"fixed bottom-4 left-4 right-4 md:bottom-6 md:left-6 md:right-6 z-[1000] transition-all duration-500 ease-out\">\n            <div className=\"p-4 md:p-5 transition-all duration-300 space-y-4\">\n              {/* Get My Location / Close Location Button - Positioned above filters */}\n              <div className=\"flex justify-end\">\n                <Button\n                  onClick={handleGetMyLocation}\n                  disabled={isLocating}\n                  className={`relative w-10 h-10 rounded-full backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl ${isUserLocationVisible ? 'bg-red-500 hover:bg-red-600 border-red-400' : 'bg-orange-500 hover:bg-orange-600 border-orange-400'} text-white flex-shrink-0 flex items-center justify-center gap-2 overflow-hidden ${isLocating ? \"animate-pulse\" : \"\"}`}\n                  data-testid=\"footer-location-button\"\n                >\n                  {!isLocating && !isUserLocationVisible && (\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent transform -skew-x-12 animate-sweep\" />\n                  )}\n                  {isUserLocationVisible ? (\n                    <X className=\"relative h-4 w-4 text-white z-10\" />\n                  ) : (\n                    <Navigation\n                      className={`relative h-4 w-4 text-white z-10 transition-transform duration-300 ${isLocating ? \"animate-slow-spin\" : \"\"}`}\n                    />\n                  )}\n                </Button>\n              </div>\n\n              {/* Filter buttons row */}\n              <div className=\"flex flex-wrap items-center justify-center gap-3 sm:gap-4 md:gap-6 text-sm\">\n                <div\n                  className={`flex items-center ${spacingFilter} p-2 rounded-xl backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer ${\n                    localFilters.listingType === \"sale\"\n                      ? \"bg-red-100 dark:bg-red-900/40 border-red-300 dark:border-red-600\"\n                      : \"bg-white/95 dark:bg-gray-900/95 border-gray-200/50 dark:border-gray-600/50 hover:bg-white dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-500\"\n                  }`}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    handleFilterChange(\"listingType\", \"sale\");\n                  }}\n                >\n                  <div\n                    className={`w-3 h-3 sm:w-4 sm:h-4 bg-red-500 rounded-full flex-shrink-0 shadow-lg ${localFilters.listingType === \"sale\" ? \"animate-pulse\" : \"\"}`}\n                  ></div>\n                  <span\n                    className={`font-semibold text-sm drop-shadow-lg ${localFilters.listingType === \"sale\" ? \"text-red-700 dark:text-red-300\" : \"text-black dark:text-white\"}`}\n                  >\n                    {t(\"filter.forSale\")}\n                  </span>\n                </div>\n                <div\n                  className={`flex items-center ${spacingFilter} p-2 rounded-xl backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer ${\n                    localFilters.listingType === \"rent\"\n                      ? \"bg-green-100 dark:bg-green-900/40 border-green-300 dark:border-green-600\"\n                      : \"bg-white/95 dark:bg-gray-900/95 border-gray-200/50 dark:border-gray-600/50 hover:bg-white dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-500\"\n                  }`}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    handleFilterChange(\"listingType\", \"rent\");\n                  }}\n                >\n                  <div\n                    className={`w-3 h-3 sm:w-4 sm:h-4 bg-green-500 rounded-full flex-shrink-0 shadow-lg ${localFilters.listingType === \"rent\" ? \"animate-pulse\" : \"\"}`}\n                  ></div>\n                  <span\n                    className={`font-semibold text-sm drop-shadow-lg ${localFilters.listingType === \"rent\" ? \"text-green-700 dark:text-green-300\" : \"text-black dark:text-white\"}`}\n                  >\n                    {t(\"filter.forRent\")}\n                  </span>\n                </div>\n                <div\n                  className={`flex items-center justify-center gap-2 sm:gap-3 md:gap-4 lg:gap-6 ${\n                    isRTL ? \"flex-wrap\" : \"flex-nowrap\"\n                  }`}\n                >\n                  <div\n                    className={`flex items-center ${spacingType} p-2 rounded-xl backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer ${\n                      localFilters.type === \"house\"\n                        ? \"bg-orange-100 dark:bg-orange-900/40 border-orange-300 dark:border-orange-600\"\n                        : \"bg-white/95 dark:bg-gray-900/95 border-gray-200/50 dark:border-gray-600/50 hover:bg-white dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-500\"\n                    }`}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleFilterChange(\"type\", \"house\");\n                    }}\n                  >\n                    <i\n                      className=\"fas fa-home text-sm sm:text-base flex-shrink-0 drop-shadow-lg\"\n                      style={{ color: \"#FF7800\" }}\n                    ></i>\n                    <span\n                      className={`text-sm font-medium drop-shadow-lg ${localFilters.type === \"house\" ? \"text-orange-700 dark:text-orange-300\" : \"text-black dark:text-white\"}`}\n                    >\n                      {t(\"filter.houses\")}\n                    </span>\n                  </div>\n                  <div\n                    className={`flex items-center ${spacingType} p-2 rounded-xl backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer ${\n                      localFilters.type === \"apartment\"\n                        ? \"bg-orange-100 dark:bg-orange-900/40 border-orange-300 dark:border-orange-600\"\n                        : \"bg-white/95 dark:bg-gray-900/95 border-gray-200/50 dark:border-gray-600/50 hover:bg-white dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-500\"\n                    }`}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleFilterChange(\"type\", \"apartment\");\n                    }}\n                  >\n                    <i\n                      className=\"fas fa-building text-sm sm:text-base flex-shrink-0 drop-shadow-lg\"\n                      style={{ color: \"#FF7800\" }}\n                    ></i>\n                    <span\n                      className={`text-sm font-medium drop-shadow-lg ${localFilters.type === \"apartment\" ? \"text-orange-700 dark:text-orange-300\" : \"text-black dark:text-white\"}`}\n                    >\n                      {t(\"filter.apartments\")}\n                    </span>\n                  </div>\n                  <div\n                    className={`flex items-center ${spacingType} p-2 rounded-xl backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer ${\n                      localFilters.type === \"villa\"\n                        ? \"bg-orange-100 dark:bg-orange-900/40 border-orange-300 dark:border-orange-600\"\n                        : \"bg-white/95 dark:bg-gray-900/95 border-gray-200/50 dark:border-gray-600/50 hover:bg-white dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-500\"\n                    }`}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleFilterChange(\"type\", \"villa\");\n                    }}\n                  >\n                    <i\n                      className=\"fas fa-university text-sm sm:text-base flex-shrink-0 drop-shadow-lg\"\n                      style={{ color: \"#FF7800\" }}\n                    ></i>\n                    <span\n                      className={`text-sm font-medium drop-shadow-lg ${localFilters.type === \"villa\" ? \"text-orange-700 dark:text-orange-300\" : \"text-black dark:text-white\"}`}\n                    >\n                      {t(\"filter.villa\")}\n                    </span>\n                  </div>\n                  <div\n                    className={`flex items-center ${spacingType} p-2 rounded-xl backdrop-blur-md border shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl cursor-pointer ${\n                      localFilters.type === \"land\"\n                        ? \"bg-orange-100 dark:bg-orange-900/40 border-orange-300 dark:border-orange-600\"\n                        : \"bg-white/95 dark:bg-gray-900/95 border-gray-200/50 dark:border-gray-600/50 hover:bg-white dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-500\"\n                    }`}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleFilterChange(\"type\", \"land\");\n                    }}\n                  >\n                    <i\n                      className=\"fas fa-map-marked-alt text-sm sm:text-base flex-shrink-0 drop-shadow-lg\"\n                      style={{ color: \"#FF7800\" }}\n                    ></i>\n                    <span\n                      className={`text-sm font-medium drop-shadow-lg ${localFilters.type === \"land\" ? \"text-orange-700 dark:text-orange-300\" : \"text-black dark:text-white\"}`}\n                    >\n                      {t(\"filter.land\")}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Enhanced Fallback content if map fails to load */}\n          {typeof window === \"undefined\" || !(window as any).L ? (\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center backdrop-blur-sm\">\n              <div className=\"text-center p-8 rounded-2xl bg-white/20 backdrop-blur-md shadow-2xl border border-white/30\">\n                <div className=\"relative\">\n                  <MapPin\n                    className=\"mx-auto h-16 w-16 mb-6 animate-bounce drop-shadow-lg\"\n                    style={{ color: \"#FF7800\" }}\n                  />\n                  <div\n                    className=\"absolute -top-2 -right-2 w-6 h-6 rounded-full animate-ping opacity-75\"\n                    style={{ backgroundColor: \"#FF7800\" }}\n                  ></div>\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-800 mb-2\">\n                  {t(\"map.loadingTitle\")}\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {t(\"map.loadingDescription\")}\n                </p>\n                <div className=\"flex items-center justify-center space-x-1 mb-4\">\n                  <div\n                    className=\"w-2 h-2 rounded-full animate-pulse\"\n                    style={{ backgroundColor: \"#FF7800\" }}\n                  ></div>\n                  <div\n                    className=\"w-2 h-2 rounded-full animate-pulse\"\n                    style={{\n                      animationDelay: \"0.2s\",\n                      backgroundColor: \"#FF7800\",\n                    }}\n                  ></div>\n                  <div\n                    className=\"w-2 h-2 rounded-full animate-pulse\"\n                    style={{\n                      animationDelay: \"0.4s\",\n                      backgroundColor: \"#FF7800\",\n                    }}\n                  ></div>\n                </div>\n                <p className=\"text-sm text-gray-500 font-medium\">\n                  {t(\"map.poweredBy\")}\n                </p>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":95360},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { registerServiceWorker } from \"./lib/serviceWorker\";\n\n// Register service worker for caching and offline functionality\nregisterServiceWorker({\n  onSuccess: (registration) => {\n    console.log('✅ App is ready for offline use');\n  },\n  onUpdate: (registration) => {\n    console.log('🔄 New content available, please refresh');\n    // Could show a notification to user here\n  },\n  onError: (error) => {\n    console.error('❌ Service worker registration failed:', error);\n  }\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":646},"netlify.toml":{"content":"[build]\n  publish = \"dist/public\"\n  command = \"npm run build\"\n  \n[build.environment]\n  VITE_API_BASE_URL = \"https://mapestate.net/\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200","size_bytes":196},"client/src/lib/currency-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { SupportedCurrency, getUserPreferredCurrency, setUserPreferredCurrency } from './currency';\n\ninterface CurrencyContextType {\n  preferredCurrency: SupportedCurrency;\n  setPreferredCurrency: (currency: SupportedCurrency) => void;\n}\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\ninterface CurrencyProviderProps {\n  children: ReactNode;\n}\n\nexport function CurrencyProvider({ children }: CurrencyProviderProps) {\n  const [preferredCurrency, setPreferredCurrencyState] = useState<SupportedCurrency>('USD');\n  const queryClient = useQueryClient();\n\n  // Initialize from localStorage on mount\n  useEffect(() => {\n    const stored = getUserPreferredCurrency();\n    setPreferredCurrencyState(stored);\n  }, []);\n\n  const setPreferredCurrency = (currency: SupportedCurrency) => {\n    // Update local state\n    setPreferredCurrencyState(currency);\n    \n    // Update localStorage\n    setUserPreferredCurrency(currency);\n    \n    // Invalidate all currency conversion queries to trigger refetch\n    queryClient.invalidateQueries({ \n      queryKey: ['currency-conversion'],\n      exact: false \n    });\n  };\n\n  const value = {\n    preferredCurrency,\n    setPreferredCurrency,\n  };\n\n  return (\n    <CurrencyContext.Provider value={value}>\n      {children}\n    </CurrencyContext.Provider>\n  );\n}\n\nexport function useCurrency() {\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n}","size_bytes":1673},"shared/slug-utils.ts":{"content":"import type { Property } from './schema';\n\n// Common ID patterns used in the system\nconst LEGACY_ID_PATTERNS = [\n  /^prop-\\d+$/, // Pattern like \"prop-1000\"\n  /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i, // UUID pattern\n  /^\\d+$/ // Simple numeric IDs\n];\n\n// Arabic to Latin transliteration map\nconst arabicToLatin: { [key: string]: string } = {\n  'ا': 'a', 'أ': 'a', 'إ': 'i', 'آ': 'aa',\n  'ب': 'b', 'ت': 't', 'ث': 'th', 'ج': 'j',\n  'ح': 'h', 'خ': 'kh', 'د': 'd', 'ذ': 'dh',\n  'ر': 'r', 'ز': 'z', 'س': 's', 'ش': 'sh',\n  'ص': 's', 'ض': 'd', 'ط': 't', 'ظ': 'z',\n  'ع': 'a', 'غ': 'gh', 'ف': 'f', 'ق': 'q',\n  'ك': 'k', 'ل': 'l', 'م': 'm', 'ن': 'n',\n  'ه': 'h', 'و': 'w', 'ي': 'y', 'ة': 'a',\n  'ى': 'a', 'ئ': 'e', 'ء': ''\n};\n\n// Kurdish (Sorani) to Latin transliteration map\nconst kurdishToLatin: { [key: string]: string } = {\n  'ا': 'a', 'ب': 'b', 'پ': 'p', 'ت': 't',\n  'ج': 'j', 'چ': 'ch', 'ح': 'h', 'خ': 'kh',\n  'د': 'd', 'ر': 'r', 'ڕ': 'rr', 'ز': 'z',\n  'ژ': 'zh', 'س': 's', 'ش': 'sh', 'ع': 'a',\n  'غ': 'gh', 'ف': 'f', 'ڤ': 'v', 'ق': 'q',\n  'ک': 'k', 'گ': 'g', 'ل': 'l', 'ڵ': 'll',\n  'م': 'm', 'ن': 'n', 'ڶ': 'nn', 'ه': 'h',\n  'ھ': 'h', 'و': 'w', 'ی': 'y',\n  'ێ': 'e', 'ە': 'a', 'ۆ': 'o', 'ۇ': 'u'\n};\n\n// Unicode ranges for script detection\nconst ARABIC_RANGE = /[\\u0600-\\u06FF\\u0750-\\u077F]/;\nconst KURDISH_RANGE = /[\\u06C0-\\u06FF\\u0750-\\u077F]|[\\u0695\\u0698\\u06a4\\u06af\\u06b5\\u06d5]/;\n\n/**\n * Detects if text contains Arabic script\n */\nfunction hasArabicScript(text: string): boolean {\n  return ARABIC_RANGE.test(text);\n}\n\n/**\n * Detects if text contains Kurdish script\n */\nfunction hasKurdishScript(text: string): boolean {\n  return KURDISH_RANGE.test(text);\n}\n\n/**\n * Transliterates Arabic text to Latin characters\n */\nfunction transliterateArabic(text: string): string {\n  // Normalize text first\n  const normalized = text.normalize('NFKD');\n  return normalized\n    .split('')\n    .map(char => arabicToLatin[char] || char)\n    .join('')\n    .replace(/[\\u064b\\u064c\\u064d\\u064e\\u064f\\u0650\\u0651\\u0652]/g, '') // Remove Arabic diacritics\n    .trim();\n}\n\n/**\n * Transliterates Kurdish text to Latin characters\n */\nfunction transliterateKurdish(text: string): string {\n  // Normalize text first\n  const normalized = text.normalize('NFKD');\n  return normalized\n    .split('')\n    .map(char => kurdishToLatin[char] || char)\n    .join('')\n    .trim();\n}\n\n/**\n * Smart transliteration based on script detection\n */\nfunction smartTransliterate(text: string): string {\n  if (hasKurdishScript(text)) {\n    return transliterateKurdish(text);\n  } else if (hasArabicScript(text)) {\n    return transliterateArabic(text);\n  }\n  return text;\n}\n\n/**\n * Cleans and formats text for URL slugs\n */\nfunction cleanSlugText(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Only allow letters, numbers, spaces, hyphens\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen\n    .replace(/^-|-$/g, '') // Remove leading/trailing hyphens\n    .trim()\n    .substring(0, 100); // Cap at 100 characters\n}\n\n/**\n * Generates a comprehensive SEO-friendly slug from property data\n */\nexport function generatePropertySlug(property: Property | Partial<Property>): string {\n  const parts: string[] = [];\n  \n  // Add city (smart transliterated)\n  if (property.city) {\n    const citySlug = smartTransliterate(property.city);\n    const cleanCity = cleanSlugText(citySlug);\n    if (cleanCity) {\n      parts.push(cleanCity);\n    }\n  }\n  \n  // Add bedroom count if available\n  if (property.bedrooms && property.bedrooms > 0) {\n    parts.push(`${property.bedrooms}-bedroom`);\n  }\n  \n  // Add property type (smart transliterated)\n  if (property.type) {\n    const typeSlug = smartTransliterate(property.type);\n    const cleanType = cleanSlugText(typeSlug);\n    if (cleanType) {\n      parts.push(cleanType);\n    }\n  }\n  \n  // Add listing type context\n  if (property.listingType) {\n    const listingTypeMap: { [key: string]: string } = {\n      'sale': 'for-sale',\n      'rent': 'for-rent'\n    };\n    parts.push(listingTypeMap[property.listingType] || property.listingType);\n  }\n  \n  // If we don't have enough parts, add a portion of the title\n  if (parts.length < 3 && property.title) {\n    const titleSlug = smartTransliterate(property.title);\n    \n    // Take first 3 meaningful words from title\n    const titleWords = cleanSlugText(titleSlug)\n      .split('-')\n      .filter(word => word.length > 2) // Filter out small words\n      .slice(0, 3);\n    \n    parts.push(...titleWords);\n  }\n  \n  // Ensure we have a fallback\n  if (parts.length === 0) {\n    parts.push('property');\n  }\n  \n  return parts.join('-');\n}\n\n/**\n * Generates a unique slug by appending a counter if needed\n */\nexport function generateUniqueSlug(\n  baseSlug: string, \n  checkSlugExists: (slug: string) => boolean,\n  currentPropertyId?: string\n): string {\n  let slug = baseSlug;\n  let counter = 1;\n  \n  // Check if the slug already exists (excluding current property)\n  while (checkSlugExists(slug)) {\n    slug = `${baseSlug}-${counter}`;\n    counter++;\n    // Prevent infinite loops\n    if (counter > 1000) {\n      slug = `${baseSlug}-${Date.now()}`;\n      break;\n    }\n  }\n  \n  return slug;\n}\n\n/**\n * Extracts property ID from a slug-based URL\n * Handles both new slug format and old ID format for backward compatibility\n */\nexport function extractPropertyIdentifier(urlParam: string): { \n  isSlug: boolean; \n  identifier: string; \n} {\n  // Check if it matches any known legacy ID patterns\n  for (const pattern of LEGACY_ID_PATTERNS) {\n    if (pattern.test(urlParam)) {\n      return { isSlug: false, identifier: urlParam };\n    }\n  }\n  \n  // It's a slug (new format)\n  return { isSlug: true, identifier: urlParam };\n}\n\n/**\n * Validates if a slug is well-formed\n */\nexport function isValidSlug(slug: string): boolean {\n  // Should not be empty, contain only letters, numbers, and hyphens\n  // Should not start or end with hyphen\n  const slugRegex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;\n  return slugRegex.test(slug) && slug.length >= 3 && slug.length <= 100;\n}\n\n/**\n * Checks if a string is a legacy ID format\n */\nexport function isLegacyId(identifier: string): boolean {\n  return LEGACY_ID_PATTERNS.some(pattern => pattern.test(identifier));\n}\n\n/**\n * Formats a slug for display (converts hyphens to spaces and capitalizes)\n */\nexport function formatSlugForDisplay(slug: string): string {\n  return slug\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Generates example SEO-friendly URLs for demonstration\n */\nexport function generateExampleUrls(): string[] {\n  return [\n    '/property/erbil-3-bedroom-apartment-for-sale',\n    '/property/baghdad-2-bedroom-house-for-rent',\n    '/property/sulaymaniyah-4-bedroom-villa-for-sale',\n    '/property/duhok-1-bedroom-apartment-for-rent',\n    '/property/zakho-commercial-land-for-sale'\n  ];\n}","size_bytes":7024},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":677},"server/vite.local.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      // Fix for Node.js < 20.11 - use fileURLToPath instead of import.meta.dirname\n      const __dirname = path.dirname(fileURLToPath(import.meta.url));\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  // Fix for Node.js < 20.11 - use fileURLToPath instead of import.meta.dirname\n  const __dirname = path.dirname(fileURLToPath(import.meta.url));\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2579},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Normalizes property image URLs to ensure they point to the correct path\n * Supports both full URLs (from dynamic host) and relative paths\n * @param imageUrl - The image URL to normalize\n * @returns Properly formatted image URL\n */\nexport function normalizePropertyImageUrl(imageUrl: string): string {\n  if (!imageUrl) return '';\n  \n  // Handle external full URLs (http/https) - return as-is\n  if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {\n    return imageUrl;\n  }\n  \n  // Handle URLs that already start with / (relative paths)\n  if (imageUrl.startsWith('/')) {\n    return imageUrl;\n  }\n  \n  // Handle URLs that start with \"uploads/\" - add leading slash\n  if (imageUrl.startsWith('uploads/')) {\n    return `/${imageUrl}`;\n  }\n  \n  // Handle bare filenames - add /uploads/ prefix\n  return `/uploads/${imageUrl}`;\n}\n","size_bytes":1014},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/settings-modal.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle,\n  DialogDescription\n} from \"@/components/ui/dialog\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  User, \n  Globe, \n  Bell, \n  Monitor, \n  Save,\n  Eye,\n  MapPin,\n  Heart,\n  Mail\n} from \"lucide-react\";\n\ninterface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function SettingsModal({ isOpen, onClose }: SettingsModalProps) {\n  console.log('SettingsModal rendered with isOpen:', isOpen);\n  const { language, changeLanguage, t } = useTranslation();\n  const [userSettings, setUserSettings] = useState({\n    // Profile Settings\n    displayName: \"\",\n    email: \"\",\n    phone: \"\",\n    \n    // Language & Region (will sync with global language)\n    language: language,\n    currency: \"USD\",\n    dateFormat: \"MM/DD/YYYY\",\n    \n    // Notifications\n    emailNotifications: true,\n    pushNotifications: true,\n    favoriteUpdates: true,\n    priceAlerts: false,\n    \n    // Display Preferences\n    mapStyle: \"default\",\n    showPropertyPrices: true,\n    showDistance: true,\n    autoZoom: true,\n    \n    // Privacy\n    showProfile: true,\n    shareLocation: false\n  });\n\n  const handleSave = () => {\n    // In a real app, this would save to the backend\n    console.log(\"Saving settings:\", userSettings);\n    onClose();\n  };\n\n  const updateSetting = (key: string, value: any) => {\n    if (key === 'language') {\n      // Update global language state when language is changed\n      changeLanguage(value as 'en' | 'ar' | 'kur');\n    } else {\n      setUserSettings(prev => ({\n        ...prev,\n        [key]: value\n      }));\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent \n        className=\"max-w-2xl max-h-[80vh] overflow-y-auto bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 shadow-2xl\" \n        data-testid=\"settings-modal\"\n        style={{ zIndex: 10002 }}\n      >\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            {t('settings.settingsPreferences')}\n          </DialogTitle>\n          <DialogDescription>\n            {t('settings.settingsDescription')}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Profile Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <User className=\"h-4 w-4\" />\n                {t('settings.profileInformation')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"displayName\">{t('settings.displayName')}</Label>\n                  <Input\n                    id=\"displayName\"\n                    value={userSettings.displayName}\n                    onChange={(e) => updateSetting('displayName', e.target.value)}\n                    placeholder={t('settings.displayNamePlaceholder')}\n                    data-testid=\"display-name-input\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">{t('settings.email')}</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={userSettings.email}\n                    onChange={(e) => updateSetting('email', e.target.value)}\n                    placeholder={t('settings.emailPlaceholder')}\n                    data-testid=\"email-input\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">{t('settings.phone')}</Label>\n                <Input\n                  id=\"phone\"\n                  value={userSettings.phone}\n                  onChange={(e) => updateSetting('phone', e.target.value)}\n                  placeholder={t('settings.phonePlaceholder')}\n                  data-testid=\"phone-input\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Language & Region */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Globe className=\"h-4 w-4\" />\n                {t('settings.languageRegion')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>{t('settings.language')}</Label>\n                  <Select value={userSettings.language} onValueChange={(value) => updateSetting('language', value)}>\n                    <SelectTrigger data-testid=\"language-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"ar\">العربية (Arabic)</SelectItem>\n                      <SelectItem value=\"kur\">کوردی (Kurdish)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>{t('settings.currency')}</Label>\n                  <Select value={userSettings.currency} onValueChange={(value) => updateSetting('currency', value)}>\n                    <SelectTrigger data-testid=\"currency-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"USD\">USD ($)</SelectItem>\n                      <SelectItem value=\"IQD\">IQD (د.ع)</SelectItem>\n                      <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>{t('settings.dateFormat')}</Label>\n                  <Select value={userSettings.dateFormat} onValueChange={(value) => updateSetting('dateFormat', value)}>\n                    <SelectTrigger data-testid=\"date-format-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notifications */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Bell className=\"h-4 w-4\" />\n                {t('settings.notifications')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    {t('settings.emailNotifications')}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.emailNotificationsDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.emailNotifications}\n                  onCheckedChange={(checked) => updateSetting('emailNotifications', checked)}\n                  data-testid=\"email-notifications-switch\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Bell className=\"h-4 w-4\" />\n                    {t('settings.pushNotifications')}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.pushNotificationsDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.pushNotifications}\n                  onCheckedChange={(checked) => updateSetting('pushNotifications', checked)}\n                  data-testid=\"push-notifications-switch\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Heart className=\"h-4 w-4\" />\n                    {t('settings.favoriteUpdates')}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.favoriteUpdatesDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.favoriteUpdates}\n                  onCheckedChange={(checked) => updateSetting('favoriteUpdates', checked)}\n                  data-testid=\"favorite-updates-switch\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>{t('settings.priceAlerts')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.priceAlertsDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.priceAlerts}\n                  onCheckedChange={(checked) => updateSetting('priceAlerts', checked)}\n                  data-testid=\"price-alerts-switch\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Display Preferences */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Monitor className=\"h-4 w-4\" />\n                {t('settings.displayPreferences')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>{t('settings.mapStyle')}</Label>\n                <Select value={userSettings.mapStyle} onValueChange={(value) => updateSetting('mapStyle', value)}>\n                  <SelectTrigger data-testid=\"map-style-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"default\">{t('settings.mapStyleDefault')}</SelectItem>\n                    <SelectItem value=\"satellite\">{t('settings.mapStyleSatellite')}</SelectItem>\n                    <SelectItem value=\"terrain\">{t('settings.mapStyleTerrain')}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    {t('settings.showPropertyPrices')}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.showPropertyPricesDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.showPropertyPrices}\n                  onCheckedChange={(checked) => updateSetting('showPropertyPrices', checked)}\n                  data-testid=\"show-prices-switch\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4\" />\n                    {t('settings.showDistance')}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.showDistanceDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.showDistance}\n                  onCheckedChange={(checked) => updateSetting('showDistance', checked)}\n                  data-testid=\"show-distance-switch\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>{t('settings.autoZoom')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">{t('settings.autoZoomDesc')}</p>\n                </div>\n                <Switch\n                  checked={userSettings.autoZoom}\n                  onCheckedChange={(checked) => updateSetting('autoZoom', checked)}\n                  data-testid=\"auto-zoom-switch\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"cancel-settings\">\n              {t('settings.cancel')}\n            </Button>\n            <Button onClick={handleSave} className=\"flex items-center gap-2\" data-testid=\"save-settings\">\n              <Save className=\"h-4 w-4\" />\n              {t('settings.saveSettings')}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14065},"client/src/lib/meta-enhancement.ts":{"content":"import { getLanguageInfo, type Language } from './i18n';\n\nexport interface EnhancedMetaData {\n  title: string;\n  description: string;\n  keywords: string[];\n  ogImage?: string;\n  twitterCard: {\n    type: 'summary_large_image' | 'summary';\n    image?: string;\n    imageAlt?: string;\n  };\n  additionalTags?: Record<string, string>;\n  structuredData?: object;\n}\n\n// Enhanced keyword sets for different property contexts\nconst PROPERTY_KEYWORDS = {\n  general: [\n    'real estate', 'property', 'Kurdistan', 'Iraq', 'Erbil', 'Sulaymaniyah', 'Dohuk',\n    'Middle East real estate', 'Iraq property market', 'Kurdistan region property'\n  ],\n  types: {\n    apartment: ['apartment', 'flat', 'condo', 'residential unit', 'multi-family'],\n    house: ['house', 'home', 'residential property', 'single-family', 'villa'],\n    villa: ['villa', 'luxury home', 'executive property', 'premium residence'],\n    land: ['land', 'plot', 'lot', 'development land', 'residential land', 'commercial land']\n  },\n  actions: {\n    sale: ['for sale', 'buy', 'purchase', 'investment property', 'property investment'],\n    rent: ['for rent', 'rental', 'lease', 'tenant', 'monthly rent', 'residential rental']\n  },\n  features: [\n    'modern amenities', 'parking', 'security', 'garden', 'balcony', 'furnished',\n    'unfurnished', 'city center', 'residential area', 'commercial district'\n  ],\n  locations: [\n    'Ankawa', 'Downtown Erbil', 'Sami Abdulrahman Park area', 'Hawler',\n    'Sulaymaniyah city', 'Dohuk center', 'Kurdistan mountains', 'urban area'\n  ]\n};\n\n// Generate location-specific keywords based on city\nexport function generateLocationKeywords(city?: string, country?: string): string[] {\n  const keywords: string[] = [];\n  \n  if (city) {\n    keywords.push(\n      `${city} real estate`,\n      `${city} property`,\n      `${city} homes`,\n      `properties in ${city}`,\n      `${city} rentals`,\n      `${city} property market`\n    );\n  }\n  \n  if (country) {\n    keywords.push(\n      `${country} real estate`,\n      `property ${country}`,\n      `${country} property investment`\n    );\n  }\n  \n  return keywords;\n}\n\n// Generate property-specific meta data\nexport function generatePropertyMeta(\n  property: {\n    title: string;\n    description?: string;\n    type: string;\n    listingType: 'sale' | 'rent';\n    price: string;\n    currency: string;\n    city: string;\n    country: string;\n    bedrooms?: number;\n    bathrooms?: number;\n    area?: number;\n    images?: string[];\n  },\n  language: Language\n): EnhancedMetaData {\n  \n  const langInfo = getLanguageInfo(language);\n  const propertyTypeKeywords = PROPERTY_KEYWORDS.types[property.type as keyof typeof PROPERTY_KEYWORDS.types] || [property.type];\n  const actionKeywords = PROPERTY_KEYWORDS.actions[property.listingType];\n  const locationKeywords = generateLocationKeywords(property.city, property.country);\n  \n  // Enhanced title with property specifics\n  const title = `${property.title} - ${property.type} for ${property.listingType} in ${property.city} | MapEstate`;\n  \n  // Enhanced description with more details\n  const bedroomInfo = property.bedrooms ? `${property.bedrooms} bedroom ` : '';\n  const bathroomInfo = property.bathrooms ? `${property.bathrooms} bathroom ` : '';\n  const areaInfo = property.area ? `${property.area} M² ` : '';\n  \n  const description = property.description || \n    `${bedroomInfo}${bathroomInfo}${property.type} ${areaInfo}for ${property.listingType} in ${property.city}, ${property.country}. ` +\n    `Premium real estate in Kurdistan region with modern amenities. Contact our expert agents for viewing and more information.`;\n  \n  // Comprehensive keyword set\n  const keywords = [\n    ...PROPERTY_KEYWORDS.general,\n    ...propertyTypeKeywords,\n    ...actionKeywords,\n    ...locationKeywords,\n    ...PROPERTY_KEYWORDS.features.slice(0, 5), // Top 5 features\n    ...(property.bedrooms ? [`${property.bedrooms} bedroom`] : []),\n    ...(property.bathrooms ? [`${property.bathrooms} bathroom`] : []),\n    `${property.city} ${property.type}`,\n    `${property.listingType} ${property.city}`,\n    'AI property search',\n    'real estate agent Kurdistan'\n  ];\n  \n  return {\n    title,\n    description,\n    keywords: Array.from(new Set(keywords)), // Remove duplicates\n    ogImage: property.images?.[0],\n    twitterCard: {\n      type: 'summary_large_image',\n      image: property.images?.[0],\n      imageAlt: `${property.type} in ${property.city} - ${property.title}`\n    },\n    additionalTags: {\n      'property:price:amount': property.price,\n      'property:price:currency': property.currency,\n      'property:type': property.type,\n      'property:status': property.listingType,\n      'geo:region': `IQ-${property.city === 'Erbil' ? 'KR' : 'IQ'}`,\n      'geo:placename': `${property.city}, ${property.country}`,\n    }\n  };\n}\n\n// Generate search page meta data\nexport function generateSearchMeta(\n  filters: {\n    type?: string;\n    listingType?: 'sale' | 'rent';\n    city?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    bedrooms?: number;\n  },\n  resultCount: number,\n  language: Language\n): EnhancedMetaData {\n  \n  const propertyType = filters.type || 'properties';\n  const listingType = filters.listingType || 'sale and rent';\n  const city = filters.city || 'Kurdistan';\n  \n  // Improve title phrasing - avoid showing \"0 properties\"  \n  const countText = resultCount > 0 ? `${resultCount} ` : '';\n  const listingText = listingType === 'sale' ? 'for Sale' : \n                      listingType === 'rent' ? 'for Rent' : \n                      'for Sale & Rent';\n  const title = `${countText}${propertyType} ${listingText} in ${city} | MapEstate`;\n  \n  const priceRange = filters.minPrice || filters.maxPrice ? \n    ` (${filters.minPrice ? `from $${filters.minPrice}` : ''}${filters.minPrice && filters.maxPrice ? ' - ' : ''}${filters.maxPrice ? `to $${filters.maxPrice}` : ''})` : '';\n  \n  const bedroomFilter = filters.bedrooms ? ` with ${filters.bedrooms}+ bedrooms` : '';\n  \n  const description = `Discover ${countText}premium ${propertyType} ${listingText.toLowerCase()} in ${city}, Iraq${priceRange}${bedroomFilter}. ` +\n    `Browse our comprehensive listings with detailed photos, property information, and expert real estate agent support. ` +\n    `Find your perfect home with AI-powered search in Kurdistan region.`;\n  \n  // Limit keywords to most relevant (better for SEO)\n  const keywords = [\n    ...PROPERTY_KEYWORDS.general.slice(0, 8), // Top 8 general keywords\n    ...generateLocationKeywords(filters.city, 'Iraq').slice(0, 6), // Top 6 location keywords\n    `${propertyType} ${city}`,\n    `${listingType === 'sale' ? 'buy' : listingType === 'rent' ? 'rent' : 'buy rent'} ${propertyType}`,\n    `${city} real estate listings`,\n    ...(filters.bedrooms ? [`${filters.bedrooms} bedroom ${propertyType}`] : []),\n    'property search Kurdistan',\n    'AI real estate finder'\n  ];\n  \n  return {\n    title,\n    description,\n    keywords: Array.from(new Set(keywords)),\n    twitterCard: {\n      type: 'summary_large_image',\n      imageAlt: `${propertyType} for ${listingType} in ${city}`\n    },\n    additionalTags: {\n      'search:type': propertyType,\n      'search:listing-type': listingType,\n      'search:location': city,\n      'search:results': resultCount.toString()\n    }\n  };\n}\n\n// Generate homepage meta data\nexport function generateHomeMeta(\n  featuredCount: number,\n  language: Language\n): EnhancedMetaData {\n  \n  const title = 'MapEstate - AI-Powered Real Estate in Kurdistan, Iraq | Find Your Perfect Home';\n  \n  const description = `Find your perfect home in Kurdistan, Iraq with AI-powered property search. ` +\n    `Browse ${featuredCount > 0 ? `over ${featuredCount}` : ''} premium properties for sale and rent including houses, apartments, villas, and land. ` +\n    `Expert real estate agents, advanced search filters, and intelligent recommendations. Start your property journey today.`;\n  \n  const keywords = [\n    ...PROPERTY_KEYWORDS.general,\n    'AI real estate platform',\n    'smart property search',\n    'Kurdistan property portal',\n    'Iraq real estate marketplace',\n    'intelligent property finder',\n    'expert real estate agents Kurdistan',\n    'premium properties Iraq',\n    'residential commercial property',\n    'property investment opportunities',\n    'modern real estate platform',\n    'digital property search'\n  ];\n  \n  return {\n    title,\n    description,\n    keywords: Array.from(new Set(keywords)),\n    twitterCard: {\n      type: 'summary_large_image',\n      imageAlt: 'MapEstate - AI-Powered Real Estate Platform for Kurdistan, Iraq'\n    },\n    additionalTags: {\n      'application-name': 'MapEstate',\n      'apple-mobile-web-app-title': 'MapEstate',\n      'msapplication-tooltip': 'Find real estate in Kurdistan, Iraq',\n      'website:type': 'real estate platform'\n    }\n  };\n}\n\n// Generate FAQ structured data\nexport function generateFAQStructuredData(language: Language) {\n  const faqData = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"FAQPage\",\n    \"mainEntity\": [\n      {\n        \"@type\": \"Question\",\n        \"name\": \"How does AI property search work on MapEstate?\",\n        \"acceptedAnswer\": {\n          \"@type\": \"Answer\",\n          \"text\": \"MapEstate uses artificial intelligence to understand your property preferences and requirements in natural language. Simply describe what you're looking for, and our AI will find matching properties in Kurdistan, Iraq based on location, budget, size, and other criteria.\"\n        }\n      },\n      {\n        \"@type\": \"Question\",\n        \"name\": \"What types of properties are available in Kurdistan, Iraq?\",\n        \"acceptedAnswer\": {\n          \"@type\": \"Answer\",\n          \"text\": \"MapEstate offers a comprehensive range of properties including apartments, houses, villas, and land plots for both sale and rent across major Kurdistan cities like Erbil, Sulaymaniyah, and Dohuk.\"\n        }\n      },\n      {\n        \"@type\": \"Question\",\n        \"name\": \"How can I contact real estate agents through MapEstate?\",\n        \"acceptedAnswer\": {\n          \"@type\": \"Answer\",\n          \"text\": \"You can contact verified real estate agents directly through our platform using the contact forms on property listings, phone calls, or messaging system. All agents are vetted professionals with local market expertise.\"\n        }\n      }\n    ]\n  };\n  \n  return faqData;\n}\n\n// Enhanced organization structured data\nexport function generateOrganizationStructuredData() {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Organization\",\n    \"name\": \"MapEstate\",\n    \"description\": \"AI-Powered Real Estate Platform for Kurdistan, Iraq\",\n    \"url\": \"https://mapestate.net/\",\n    \"logo\": \"https://mapestate.net/logo_1757848527935.png\",\n    \"foundingDate\": \"2024\",\n    \"contactPoint\": [\n      {\n        \"@type\": \"ContactPoint\",\n        \"contactType\": \"customer service\",\n        \"availableLanguage\": [\"English\", \"Arabic\", \"Kurdish\"],\n        \"areaServed\": \"Kurdistan Region, Iraq\"\n      }\n    ],\n    \"areaServed\": {\n      \"@type\": \"Country\",\n      \"name\": \"Iraq\"\n    },\n    \"serviceArea\": {\n      \"@type\": \"AdministrativeArea\",\n      \"name\": \"Kurdistan Region\"\n    },\n    \"knowsAbout\": [\n      \"Real Estate\",\n      \"Property Management\",\n      \"Property Search\",\n      \"Real Estate Investment\",\n      \"Kurdistan Property Market\"\n    ],\n    \"hasOfferCatalog\": {\n      \"@type\": \"OfferCatalog\",\n      \"name\": \"Real Estate Services\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"Offer\",\n          \"itemOffered\": {\n            \"@type\": \"Service\",\n            \"name\": \"Property Search\",\n            \"description\": \"AI-powered property search and recommendations\"\n          }\n        },\n        {\n          \"@type\": \"Offer\",\n          \"itemOffered\": {\n            \"@type\": \"Service\", \n            \"name\": \"Real Estate Agent Services\",\n            \"description\": \"Professional real estate agent support and consultation\"\n          }\n        }\n      ]\n    }\n  };\n}","size_bytes":11925},"server/storage.ts":{"content":"import { \n  users, properties, inquiries, favorites, searchHistory, customerActivity, customerPoints,\n  waves, customerWavePermissions, currencyRates, clientLocations,\n  userLanguages, propertyImages, propertyAmenities, propertyFeatures,\n  searchFilters, activityMetadata,\n  type User, type InsertUser, type UserLanguage, type InsertUserLanguage,\n  type Property, type InsertProperty, type PropertyWithDetails,\n  type PropertyImage, type InsertPropertyImage,\n  type PropertyAmenity, type InsertPropertyAmenity,\n  type PropertyFeature, type InsertPropertyFeature,\n  type Inquiry, type InsertInquiry,\n  type Favorite, type InsertFavorite,\n  type SearchHistory, type InsertSearchHistory,\n  type SearchFilter, type InsertSearchFilter,\n  type CustomerActivity, type InsertCustomerActivity,\n  type ActivityMetadata, type InsertActivityMetadata,\n  type CustomerPoints, type InsertCustomerPoints,\n  type Wave, type InsertWave,\n  type CustomerWavePermission, type InsertCustomerWavePermission,\n  type CurrencyRate, type InsertCurrencyRate, type UpdateCurrencyRate,\n  type ClientLocation, type InsertClientLocation,\n  type PropertyFilters\n} from \"@shared/schema\";\n\n// Utility function to sanitize user data for API responses\nfunction sanitizeUser(user: User | null | undefined): Omit<User, 'password'> | null {\n  if (!user) return null;\n  const { password, ...sanitizedUser } = user;\n  return sanitizedUser;\n}\nimport { db } from \"./db\";\nimport { MemStorage } from \"./memStorage\";\nimport { eq, and, like, gte, lte, desc, asc, sql, inArray } from \"drizzle-orm\";\nimport { generatePropertySlug, generateUniqueSlug } from \"@shared/slug-utils\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  getUserLanguages(userId: string): Promise<UserLanguage[]>;\n  addUserLanguage(userId: string, language: string): Promise<UserLanguage>;\n  removeUserLanguage(userId: string, language: string): Promise<boolean>;\n  \n  // Language permissions management\n  grantAllLanguagePermissionsToUser(userId: string): Promise<void>;\n  fixExistingUsersLanguagePermissions(): Promise<void>;\n  \n  // Authentication\n  authenticateUser(username: string, password: string): Promise<User | null>;\n  getAllUsers(): Promise<User[]>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Properties - with simplified interface for compatibility\n  getProperty(id: string): Promise<PropertyWithDetails | undefined>;\n  getPropertyBySlug(slug: string): Promise<PropertyWithDetails | undefined>;\n  getProperties(filters?: PropertyFilters): Promise<PropertyWithDetails[]>;\n  getFeaturedProperties(): Promise<PropertyWithDetails[]>;\n  createProperty(property: InsertProperty, images?: string[], amenities?: string[], features?: string[], userId?: string): Promise<Property>;\n  updateProperty(id: string, property: Partial<InsertProperty>, images?: string[], amenities?: string[], features?: string[]): Promise<Property | undefined>;\n  deleteProperty(id: string): Promise<boolean>;\n  incrementPropertyViews(id: string): Promise<void>;\n  isSlugTaken(slug: string, excludePropertyId?: string): Promise<boolean>;\n  clearAllProperties(): Promise<void>;\n\n  // Property Images\n  getPropertyImages(propertyId: string): Promise<PropertyImage[]>;\n  getAllPropertyImages(): Promise<Array<PropertyImage & { propertyTitle?: string | null }>>;\n  addPropertyImage(image: InsertPropertyImage): Promise<PropertyImage>;\n  removePropertyImage(propertyId: string, imageUrl: string): Promise<boolean>;\n  removePropertyImageWithResequencing(propertyId: string, imageUrl: string): Promise<{ success: boolean; remainingCount: number }>;\n  updatePropertyImageOrder(propertyId: string, imageUpdates: { imageUrl: string; sortOrder: number }[]): Promise<void>;\n\n  // Property Amenities\n  getPropertyAmenities(propertyId: string): Promise<PropertyAmenity[]>;\n  addPropertyAmenity(amenity: InsertPropertyAmenity): Promise<PropertyAmenity>;\n  removePropertyAmenity(propertyId: string, amenity: string): Promise<boolean>;\n  replacePropertyAmenities(propertyId: string, amenities: string[]): Promise<void>;\n\n  // Property Features\n  getPropertyFeatures(propertyId: string): Promise<PropertyFeature[]>;\n  addPropertyFeature(feature: InsertPropertyFeature): Promise<PropertyFeature>;\n  removePropertyFeature(propertyId: string, feature: string): Promise<boolean>;\n  replacePropertyFeatures(propertyId: string, features: string[]): Promise<void>;\n\n  // Inquiries\n  getInquiry(id: string): Promise<Inquiry | undefined>;\n  getInquiriesForProperty(propertyId: string): Promise<Inquiry[]>;\n  createInquiry(inquiry: InsertInquiry): Promise<Inquiry>;\n  updateInquiryStatus(id: string, status: string): Promise<Inquiry | undefined>;\n\n  // Favorites\n  getFavoritesByUser(userId: string): Promise<PropertyWithDetails[]>;\n  addToFavorites(favorite: InsertFavorite): Promise<Favorite>;\n  removeFromFavorites(userId: string, propertyId: string): Promise<boolean>;\n  isFavorite(userId: string, propertyId: string): Promise<boolean>;\n\n  // Search History\n  addSearchHistory(search: InsertSearchHistory): Promise<SearchHistory>;\n  getSearchHistoryByUser(userId: string): Promise<SearchHistory[]>;\n  addSearchFilter(filter: InsertSearchFilter): Promise<SearchFilter>;\n\n  // Customer Analytics\n  addCustomerActivity(activity: InsertCustomerActivity): Promise<CustomerActivity>;\n  getCustomerActivities(userId: string, limit?: number): Promise<CustomerActivity[]>;\n  getCustomerPoints(userId: string): Promise<CustomerPoints | undefined>;\n  updateCustomerPoints(userId: string, points: Partial<InsertCustomerPoints>): Promise<CustomerPoints>;\n  getCustomerAnalytics(userId: string): Promise<{\n    totalActivities: number;\n    activitiesByType: { activityType: string; count: number; points: number }[];\n    pointsHistory: { date: string; points: number }[];\n    monthlyActivity: { month: string; activities: number }[];\n  }>;\n\n  // Wave management\n  getWaves(): Promise<Wave[]>;\n  getWave(id: string): Promise<Wave | undefined>;\n  createWave(wave: InsertWave): Promise<Wave>;\n  updateWave(id: string, wave: Partial<InsertWave>): Promise<Wave | undefined>;\n  deleteWave(id: string): Promise<boolean>;\n  getPropertiesByWave(waveId: string): Promise<Property[]>;\n\n  // Customer Wave Permissions  \n  getCustomerWavePermissions(userId: string): Promise<CustomerWavePermission[]>;\n  grantWavePermission(permission: InsertCustomerWavePermission): Promise<CustomerWavePermission>;\n  revokeWavePermission(userId: string, waveId: string): Promise<boolean>;\n  getWavePermission(userId: string, waveId: string): Promise<CustomerWavePermission | undefined>;\n  updateWavePermission(id: string, permission: Partial<InsertCustomerWavePermission>): Promise<CustomerWavePermission | undefined>;\n  getUserWaveUsage(userId: string): Promise<{ waveId: string; used: number; max: number }[]>;\n  getUserRemainingWaves(userId: string): Promise<number>;\n  updateUsersWithZeroWaveBalance(): Promise<void>;\n  deductWaveBalance(userId: string, amount: number): Promise<boolean>;\n  addWaveBalance(userId: string, amount: number): Promise<boolean>;\n  checkWavePermission(userId: string, waveId: string | null | undefined): Promise<{ allowed: boolean; reason?: string }>;\n  incrementWaveUsage(userId: string, waveId: string | null | undefined): Promise<void>;\n  decrementWaveUsage(userId: string, waveId: string | null | undefined): Promise<void>;\n\n  // Currency Rates\n  getCurrencyRates(): Promise<CurrencyRate[]>;\n  getActiveCurrencyRates(): Promise<CurrencyRate[]>;\n  getCurrencyRate(fromCurrency: string, toCurrency: string): Promise<CurrencyRate | undefined>;\n  createCurrencyRate(rate: InsertCurrencyRate): Promise<CurrencyRate>;\n  updateCurrencyRate(id: string, rate: UpdateCurrencyRate): Promise<CurrencyRate | undefined>;\n  deactivateCurrencyRate(id: string): Promise<boolean>;\n  convertPrice(amount: number, fromCurrency: string, toCurrency: string): Promise<number>;\n\n  // Client Locations\n  createClientLocation(location: InsertClientLocation): Promise<ClientLocation>;\n  addClientLocation(location: InsertClientLocation): Promise<ClientLocation>;\n  getClientLocations(filters?: any, limit?: number): Promise<ClientLocation[]>;\n  countClientLocations(filters?: any): Promise<number>;\n  getClientLocationStats(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private get dbConn() { \n    return db(); \n  }\n\n  // Helper method to get property with all related data\n  private async getPropertyWithDetails(propertyId: string): Promise<PropertyWithDetails | undefined> {\n    const [property] = await this.dbConn\n      .select()\n      .from(properties)\n      .leftJoin(users, eq(properties.agentId, users.id))\n      .leftJoin(waves, eq(properties.waveId, waves.id))\n      .where(eq(properties.id, propertyId));\n\n    if (!property.properties) return undefined;\n\n    const [images, amenities, features, inquiriesData, favoritesData] = await Promise.all([\n      this.getPropertyImages(propertyId),\n      this.getPropertyAmenities(propertyId),\n      this.getPropertyFeatures(propertyId),\n      this.getInquiriesForProperty(propertyId),\n      this.dbConn.select().from(favorites).where(eq(favorites.propertyId, propertyId))\n    ]);\n\n    const sanitizedProperty = {\n      ...property.properties,\n      agent: property.users ? sanitizeUser(property.users) : null,\n      wave: property.waves,\n      images,\n      // Convert amenities and features from database objects to string arrays for frontend\n      amenities: amenities.map(a => a.amenity),\n      features: features.map(f => f.feature),\n      inquiries: inquiriesData,\n      favorites: favoritesData\n    };\n    \n    // Return with type assertion to maintain interface compatibility\n    return sanitizedProperty as PropertyWithDetails;\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await this.dbConn.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await this.dbConn.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await this.dbConn.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const id = crypto.randomUUID();\n    \n    // Hash password before storing if it's not already hashed\n    let hashedPassword = user.password;\n    if (user.password && !user.password.startsWith('$2')) {\n      const { hashPassword } = await import(\"./auth\");\n      hashedPassword = await hashPassword(user.password);\n    }\n    \n    await this.dbConn.insert(users).values({ ...user, id, password: hashedPassword });\n    \n    // Add all supported languages by default for regular users to allow multilingual posting\n    if (!user.role || user.role === 'user') {\n      const supportedLanguages = ['en', 'ar', 'kur'];\n      for (const language of supportedLanguages) {\n        try {\n          await this.addUserLanguage(id, language);\n        } catch (error) {\n          // Log error but don't fail user creation if language already exists\n          console.warn(`Failed to add language ${language} to user ${id}:`, error);\n        }\n      }\n    }\n    \n    return await this.getUser(id) as User;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    // Hash password if it's being updated and not already hashed\n    let updatedUser = { ...user };\n    if (user.password && !user.password.startsWith('$2')) {\n      const { hashPassword } = await import(\"./auth\");\n      updatedUser.password = await hashPassword(user.password);\n    }\n    \n    await this.dbConn.update(users).set(updatedUser).where(eq(users.id, id));\n    return await this.getUser(id);\n  }\n\n  async getUserLanguages(userId: string): Promise<UserLanguage[]> {\n    return await this.dbConn.select().from(userLanguages).where(eq(userLanguages.userId, userId));\n  }\n\n  async addUserLanguage(userId: string, language: string): Promise<UserLanguage> {\n    await this.dbConn.insert(userLanguages).values({ userId, language });\n    const [userLanguage] = await this.dbConn\n      .select()\n      .from(userLanguages)\n      .where(and(eq(userLanguages.userId, userId), eq(userLanguages.language, language)));\n    return userLanguage;\n  }\n\n  async removeUserLanguage(userId: string, language: string): Promise<boolean> {\n    const result = await this.dbConn\n      .delete(userLanguages)\n      .where(and(eq(userLanguages.userId, userId), eq(userLanguages.language, language)));\n    return true; // MySQL doesn't return affectedRows in the same way\n  }\n\n  // Helper function to grant all supported language permissions to existing users\n  async grantAllLanguagePermissionsToUser(userId: string): Promise<void> {\n    const supportedLanguages = ['en', 'ar', 'kur'];\n    const userLanguages = await this.getUserLanguages(userId);\n    const existingLanguages = userLanguages.map(ul => ul.language);\n    \n    for (const language of supportedLanguages) {\n      if (!existingLanguages.includes(language)) {\n        try {\n          await this.addUserLanguage(userId, language);\n          console.log(`✅ Added language permission: ${language} for user ${userId}`);\n        } catch (error) {\n          console.warn(`Failed to add language ${language} to user ${userId}:`, error);\n        }\n      }\n    }\n  }\n\n  // Function to fix all existing users to have all language permissions\n  async fixExistingUsersLanguagePermissions(): Promise<void> {\n    try {\n      console.log('🔧 Fixing existing users language permissions...');\n      \n      // Get all regular users (non-admin users)\n      const allUsers = await this.dbConn\n        .select({ id: users.id, role: users.role, username: users.username })\n        .from(users)\n        .where(sql`role IS NULL OR role = 'user'`);\n      \n      console.log(`Found ${allUsers.length} regular users to fix`);\n      \n      for (const user of allUsers) {\n        await this.grantAllLanguagePermissionsToUser(user.id);\n      }\n      \n      console.log('✅ Finished fixing existing users language permissions');\n    } catch (error) {\n      console.error('❌ Error fixing existing users language permissions:', error);\n    }\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) {\n      return null;\n    }\n    \n    // Handle backward compatibility for existing plaintext passwords\n    const { comparePassword, hashPassword } = await import(\"./auth\");\n    \n    // If password is already hashed (starts with $2), use bcrypt comparison\n    if (user.password.startsWith('$2')) {\n      const isValidPassword = await comparePassword(password, user.password);\n      return isValidPassword ? user : null;\n    } else {\n      // Legacy plaintext comparison - rehash and update if successful\n      const isMatch = user.password === password;\n      if (isMatch) {\n        // Upgrade to hashed password\n        const hashedPassword = await hashPassword(password);\n        await this.updateUser(user.id, { password: hashedPassword });\n        return user;\n      }\n      return null;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await this.dbConn.select().from(users);\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    await this.dbConn.delete(users).where(eq(users.id, id));\n    return true;\n  }\n\n  // Properties\n  async getProperty(id: string): Promise<PropertyWithDetails | undefined> {\n    return await this.getPropertyWithDetails(id);\n  }\n\n  async getPropertyBySlug(slug: string): Promise<PropertyWithDetails | undefined> {\n    const [property] = await this.dbConn.select().from(properties).where(eq(properties.slug, slug));\n    if (!property) return undefined;\n    return await this.getPropertyWithDetails(property.id);\n  }\n\n  async getProperties(filters: PropertyFilters = {}): Promise<PropertyWithDetails[]> {\n    // Build the base query\n    const baseQuery = this.dbConn\n      .select()\n      .from(properties)\n      .leftJoin(users, eq(properties.agentId, users.id))\n      .leftJoin(waves, eq(properties.waveId, waves.id));\n\n    // Apply filters\n    const conditions: any[] = [];\n\n    if (filters.type) {\n      conditions.push(eq(properties.type, filters.type));\n    }\n    if (filters.listingType) {\n      conditions.push(eq(properties.listingType, filters.listingType));\n    }\n    if (filters.city) {\n      conditions.push(like(properties.city, `%${filters.city}%`));\n    }\n    if (filters.country) {\n      conditions.push(eq(properties.country, filters.country));\n    }\n    if (filters.language) {\n      conditions.push(eq(properties.language, filters.language));\n    }\n    if (filters.minPrice) {\n      conditions.push(gte(properties.price, filters.minPrice.toString()));\n    }\n    if (filters.maxPrice) {\n      conditions.push(lte(properties.price, filters.maxPrice.toString()));\n    }\n    if (filters.bedrooms) {\n      conditions.push(eq(properties.bedrooms, filters.bedrooms));\n    }\n    if (filters.bathrooms) {\n      conditions.push(eq(properties.bathrooms, filters.bathrooms));\n    }\n    if (filters.search) {\n      conditions.push(\n        sql`(${properties.title} LIKE ${`%${filters.search}%`} OR ${properties.description} LIKE ${`%${filters.search}%`})`\n      );\n    }\n\n    // Build query with conditions\n    let query: any = conditions.length > 0 ? baseQuery.where(and(...conditions)) : baseQuery;\n\n    // Apply sorting\n    if (filters.sortBy === 'price') {\n      query = query.orderBy(filters.sortOrder === 'desc' ? desc(properties.price) : asc(properties.price));\n    } else if (filters.sortBy === 'date') {\n      query = query.orderBy(filters.sortOrder === 'asc' ? asc(properties.createdAt) : desc(properties.createdAt));\n    } else if (filters.sortBy === 'views') {\n      query = query.orderBy(filters.sortOrder === 'asc' ? asc(properties.views) : desc(properties.views));\n    } else {\n      query = query.orderBy(desc(properties.createdAt));\n    }\n\n    // Apply pagination\n    if (filters.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    const results = await query;\n\n    if (results.length === 0) {\n      return [];\n    }\n\n    // Extract property IDs for batch queries\n    const propertyIds = results\n      .filter((result: any) => result.properties)\n      .map((result: any) => result.properties.id);\n\n    if (propertyIds.length === 0) {\n      return [];\n    }\n\n    // Batch fetch all related data at once to avoid N+1 query problem\n    const [allImages, allAmenities, allFeatures, allInquiries, allFavorites] = await Promise.all([\n      // Get all images for all properties in one query\n      this.dbConn\n        .select()\n        .from(propertyImages)\n        .where(inArray(propertyImages.propertyId, propertyIds))\n        .orderBy(asc(propertyImages.sortOrder)),\n      // Get all amenities for all properties in one query\n      this.dbConn\n        .select()\n        .from(propertyAmenities)\n        .where(inArray(propertyAmenities.propertyId, propertyIds)),\n      // Get all features for all properties in one query\n      this.dbConn\n        .select()\n        .from(propertyFeatures)\n        .where(inArray(propertyFeatures.propertyId, propertyIds)),\n      // Get all inquiries for all properties in one query\n      this.dbConn\n        .select()\n        .from(inquiries)\n        .where(inArray(inquiries.propertyId, propertyIds)),\n      // Get all favorites for all properties in one query\n      this.dbConn\n        .select()\n        .from(favorites)\n        .where(inArray(favorites.propertyId, propertyIds))\n    ]);\n\n    // Group related data by property ID for efficient lookup\n    const imagesByProperty = new Map<string, PropertyImage[]>();\n    const amenitiesByProperty = new Map<string, PropertyAmenity[]>();\n    const featuresByProperty = new Map<string, PropertyFeature[]>();\n    const inquiriesByProperty = new Map<string, Inquiry[]>();\n    const favoritesByProperty = new Map<string, Favorite[]>();\n\n    // Group images by property ID\n    allImages.forEach(image => {\n      if (!imagesByProperty.has(image.propertyId)) {\n        imagesByProperty.set(image.propertyId, []);\n      }\n      imagesByProperty.get(image.propertyId)!.push(image);\n    });\n\n    // Group amenities by property ID\n    allAmenities.forEach(amenity => {\n      if (!amenitiesByProperty.has(amenity.propertyId)) {\n        amenitiesByProperty.set(amenity.propertyId, []);\n      }\n      amenitiesByProperty.get(amenity.propertyId)!.push(amenity);\n    });\n\n    // Group features by property ID\n    allFeatures.forEach(feature => {\n      if (!featuresByProperty.has(feature.propertyId)) {\n        featuresByProperty.set(feature.propertyId, []);\n      }\n      featuresByProperty.get(feature.propertyId)!.push(feature);\n    });\n\n    // Group inquiries by property ID\n    allInquiries.forEach(inquiry => {\n      if (inquiry.propertyId) {\n        if (!inquiriesByProperty.has(inquiry.propertyId)) {\n          inquiriesByProperty.set(inquiry.propertyId, []);\n        }\n        inquiriesByProperty.get(inquiry.propertyId)!.push(inquiry);\n      }\n    });\n\n    // Group favorites by property ID\n    allFavorites.forEach(favorite => {\n      if (favorite.propertyId) {\n        if (!favoritesByProperty.has(favorite.propertyId)) {\n          favoritesByProperty.set(favorite.propertyId, []);\n        }\n        favoritesByProperty.get(favorite.propertyId)!.push(favorite);\n      }\n    });\n\n    // Build the final result with efficient lookup\n    const propertiesWithDetails = results\n      .filter((result: any) => result.properties)\n      .map((result: any) => {\n        const propertyId = result.properties.id;\n        \n        return {\n          ...result.properties,\n          agent: result.users,\n          wave: result.waves,\n          images: imagesByProperty.get(propertyId) || [],\n          amenities: amenitiesByProperty.get(propertyId) || [],\n          features: featuresByProperty.get(propertyId) || [],\n          inquiries: inquiriesByProperty.get(propertyId) || [],\n          favorites: favoritesByProperty.get(propertyId) || []\n        };\n      });\n\n    return propertiesWithDetails as PropertyWithDetails[];\n  }\n\n  async getFeaturedProperties(): Promise<PropertyWithDetails[]> {\n    return await this.getProperties({ limit: 10 });\n  }\n\n  async createProperty(\n    property: InsertProperty, \n    images: string[] = [], \n    amenities: string[] = [], \n    features: string[] = [],\n    userId?: string\n  ): Promise<Property> {\n    const id = crypto.randomUUID();\n    \n    // Generate proper multilingual slug that handles Arabic/Kurdish text\n    const baseSlug = generatePropertySlug(property);\n    \n    // Generate unique slug by checking database\n    let slug = baseSlug;\n    let counter = 1;\n    while (true) {\n      const existingProperty = await this.dbConn.select().from(properties).where(eq(properties.slug, slug));\n      if (existingProperty.length === 0) break;\n      slug = `${baseSlug}-${counter}`;\n      counter++;\n      if (counter > 1000) {\n        slug = `${baseSlug}-${Date.now()}`;\n        break;\n      }\n    }\n\n    // Validate and fix waveId if invalid\n    let validatedWaveId = property.waveId;\n    if (validatedWaveId && validatedWaveId !== 'no-wave') {\n      const validWaves = await this.dbConn.select({ id: waves.id }).from(waves);\n      const validWaveIds = validWaves.map(w => w.id);\n      \n      if (validatedWaveId === 'premium-wave') {\n        // Map premium-wave to the first available wave or default wave\n        validatedWaveId = validWaveIds.find(id => id.includes('default')) || validWaveIds[0] || null;\n      } else if (!validWaveIds.includes(validatedWaveId)) {\n        // If invalid wave ID, set to null\n        validatedWaveId = null;\n      }\n    } else if (validatedWaveId === 'no-wave') {\n      validatedWaveId = null;\n    }\n\n    // Determine which user to check wave permissions for (agent or session user)\n    const waveCheckUserId = property.agentId || userId;\n    \n    // Check wave permissions if property has a wave and we have a user to check\n    if (waveCheckUserId && validatedWaveId) {\n      const permissionCheck = await this.checkWavePermission(waveCheckUserId, validatedWaveId);\n      if (!permissionCheck.allowed) {\n        // Instead of throwing an error, fallback to no-wave for customers without permissions\n        console.log(`User ${waveCheckUserId} lacks permission for wave ${validatedWaveId}, falling back to no-wave`);\n        validatedWaveId = null;\n      }\n    }\n\n    await this.dbConn.insert(properties).values({ ...property, id, slug, waveId: validatedWaveId });\n\n    // Increment wave usage if property was successfully created with a wave\n    if (waveCheckUserId && validatedWaveId) {\n      await this.incrementWaveUsage(waveCheckUserId, validatedWaveId);\n    }\n\n    // Add images, amenities, and features\n    if (images.length > 0) {\n      await Promise.all(\n        images.map((imageUrl, index) =>\n          this.addPropertyImage({ propertyId: id, imageUrl, sortOrder: index })\n        )\n      );\n    }\n\n    if (amenities.length > 0) {\n      await this.replacePropertyAmenities(id, amenities);\n    }\n\n    if (features.length > 0) {\n      await this.replacePropertyFeatures(id, features);\n    }\n\n    return await this.dbConn.select().from(properties).where(eq(properties.id, id)).then(rows => rows[0]);\n  }\n\n  async updateProperty(\n    id: string, \n    property: Partial<InsertProperty>, \n    images?: string[], \n    amenities?: string[], \n    features?: string[],\n    userId?: string\n  ): Promise<Property | undefined> {\n    // Get existing property to check for wave changes\n    const existingProperty = await this.getProperty(id);\n    if (!existingProperty) {\n      throw new Error('Property not found');\n    }\n\n    // Handle wave permission checking if waveId is being updated\n    let validatedWaveId = property.waveId;\n    if (property.waveId !== undefined) {\n      // Validate and fix waveId if invalid (same logic as createProperty)\n      if (validatedWaveId && validatedWaveId !== 'no-wave') {\n        const validWaves = await this.dbConn.select({ id: waves.id }).from(waves);\n        const validWaveIds = validWaves.map(w => w.id);\n        \n        if (validatedWaveId === 'premium-wave') {\n          // Map premium-wave to the first available wave or default wave\n          validatedWaveId = validWaveIds.find(id => id.includes('default')) || validWaveIds[0] || null;\n        } else if (!validWaveIds.includes(validatedWaveId)) {\n          // If invalid wave ID, set to null\n          validatedWaveId = null;\n        }\n      } else if (validatedWaveId === 'no-wave') {\n        validatedWaveId = null;\n      }\n\n      // Determine which user to check wave permissions for (agent or session user)\n      const waveCheckUserId = existingProperty.agentId || userId;\n      \n      // Check wave permissions if property has a wave and we have a user to check\n      if (waveCheckUserId && validatedWaveId) {\n        const permissionCheck = await this.checkWavePermission(waveCheckUserId, validatedWaveId);\n        if (!permissionCheck.allowed) {\n          // Instead of throwing an error, fallback to no-wave for customers without permissions\n          console.log(`User ${waveCheckUserId} lacks permission for wave ${validatedWaveId}, falling back to no-wave`);\n          validatedWaveId = null;\n        }\n      }\n\n      // Handle wave usage tracking if wave is changing\n      const oldWaveId = existingProperty.waveId;\n      if (oldWaveId !== validatedWaveId) {\n        // Decrement usage from old wave if it exists\n        if (waveCheckUserId && oldWaveId) {\n          await this.decrementWaveUsage(waveCheckUserId, oldWaveId);\n        }\n        \n        // Increment usage for new wave if it exists\n        if (waveCheckUserId && validatedWaveId) {\n          await this.incrementWaveUsage(waveCheckUserId, validatedWaveId);\n        }\n      }\n\n      // Update the property object with validated waveId\n      property = { ...property, waveId: validatedWaveId };\n    }\n\n    await this.dbConn.update(properties).set(property).where(eq(properties.id, id));\n\n    // Update images if provided\n    if (images !== undefined) {\n      // Remove all existing images\n      await this.dbConn.delete(propertyImages).where(eq(propertyImages.propertyId, id));\n      // Add new images\n      if (images.length > 0) {\n        await Promise.all(\n          images.map((imageUrl, index) =>\n            this.addPropertyImage({ propertyId: id, imageUrl, sortOrder: index })\n          )\n        );\n      }\n    }\n\n    // Update amenities if provided\n    if (amenities !== undefined) {\n      await this.replacePropertyAmenities(id, amenities);\n    }\n\n    // Update features if provided\n    if (features !== undefined) {\n      await this.replacePropertyFeatures(id, features);\n    }\n\n    const [updatedProperty] = await this.dbConn.select().from(properties).where(eq(properties.id, id));\n    return updatedProperty;\n  }\n\n  async deleteProperty(id: string): Promise<boolean> {\n    try {\n      // Get property details before deletion for wave usage tracking\n      const property = await this.getProperty(id);\n      \n      // Get all property images before deletion for file cleanup\n      const propertyImageList = await this.getPropertyImages(id);\n      \n      // Explicitly delete all related data before deleting the property\n      // This ensures proper cleanup even if cascade deletes don't work correctly\n      await Promise.all([\n        // Delete property images\n        this.dbConn.delete(propertyImages).where(eq(propertyImages.propertyId, id)),\n        // Delete property amenities\n        this.dbConn.delete(propertyAmenities).where(eq(propertyAmenities.propertyId, id)),\n        // Delete property features\n        this.dbConn.delete(propertyFeatures).where(eq(propertyFeatures.propertyId, id)),\n        // Delete favorites for this property\n        this.dbConn.delete(favorites).where(eq(favorites.propertyId, id)),\n        // Delete inquiries for this property\n        this.dbConn.delete(inquiries).where(eq(inquiries.propertyId, id))\n      ]);\n\n      // Finally delete the property itself\n      await this.dbConn.delete(properties).where(eq(properties.id, id));\n      \n      // Decrement wave usage if the property had a wave and an agent\n      if (property && property.waveId && property.agentId) {\n        await this.decrementWaveUsage(property.agentId, property.waveId);\n      }\n      \n      // Clean up image files after successful database deletion\n      await Promise.all(\n        propertyImageList.map(image => this.cleanupImageFile(image.imageUrl))\n      );\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to delete property ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async incrementPropertyViews(id: string): Promise<void> {\n    await this.dbConn\n      .update(properties)\n      .set({ views: sql`${properties.views} + 1` })\n      .where(eq(properties.id, id));\n  }\n\n  async isSlugTaken(slug: string, excludePropertyId?: string): Promise<boolean> {\n    let query: any = this.dbConn.select().from(properties).where(eq(properties.slug, slug));\n    \n    if (excludePropertyId) {\n      query = query.where(and(eq(properties.slug, slug), sql`${properties.id} != ${excludePropertyId}`));\n    }\n    \n    const [existing] = await query;\n    return !!existing;\n  }\n\n  async clearAllProperties(): Promise<void> {\n    await this.dbConn.delete(properties);\n  }\n\n  // Property Images\n  async getPropertyImages(propertyId: string): Promise<PropertyImage[]> {\n    return await this.dbConn\n      .select()\n      .from(propertyImages)\n      .where(eq(propertyImages.propertyId, propertyId))\n      .orderBy(asc(propertyImages.sortOrder));\n  }\n\n  async getAllPropertyImages(): Promise<Array<PropertyImage & { propertyTitle?: string | null }>> {\n    const results = await this.dbConn\n      .select({\n        id: propertyImages.id,\n        propertyId: propertyImages.propertyId,\n        imageUrl: propertyImages.imageUrl,\n        sortOrder: propertyImages.sortOrder,\n        altText: propertyImages.altText,\n        createdAt: propertyImages.createdAt,\n        propertyTitle: properties.title,\n      })\n      .from(propertyImages)\n      .leftJoin(properties, eq(propertyImages.propertyId, properties.id))\n      .orderBy(propertyImages.propertyId, propertyImages.sortOrder);\n    \n    return results;\n  }\n\n  async addPropertyImage(image: InsertPropertyImage): Promise<PropertyImage> {\n    await this.dbConn.insert(propertyImages).values(image);\n    const [createdImage] = await this.dbConn\n      .select()\n      .from(propertyImages)\n      .where(and(eq(propertyImages.propertyId, image.propertyId), eq(propertyImages.imageUrl, image.imageUrl)));\n    return createdImage;\n  }\n\n  async removePropertyImage(propertyId: string, imageUrl: string): Promise<boolean> {\n    await this.dbConn\n      .delete(propertyImages)\n      .where(and(eq(propertyImages.propertyId, propertyId), eq(propertyImages.imageUrl, imageUrl)));\n    return true;\n  }\n\n  async removePropertyImageWithResequencing(propertyId: string, imageUrl: string): Promise<{ success: boolean; remainingCount: number }> {\n    try {\n      // Begin transaction to ensure atomicity\n      const result = await this.dbConn.transaction(async (tx) => {\n        // First, check if the image exists\n        const [existingImage] = await tx\n          .select()\n          .from(propertyImages)\n          .where(and(eq(propertyImages.propertyId, propertyId), eq(propertyImages.imageUrl, imageUrl)));\n\n        if (!existingImage) {\n          return { success: false, remainingCount: 0 };\n        }\n\n        // Delete the specific image\n        await tx\n          .delete(propertyImages)\n          .where(and(eq(propertyImages.propertyId, propertyId), eq(propertyImages.imageUrl, imageUrl)));\n\n        // Get remaining images ordered by current sort order\n        const remainingImages = await tx\n          .select()\n          .from(propertyImages)\n          .where(eq(propertyImages.propertyId, propertyId))\n          .orderBy(asc(propertyImages.sortOrder));\n\n        // Resequence remaining images to be sequential (0, 1, 2, ...)\n        if (remainingImages.length > 0) {\n          await Promise.all(\n            remainingImages.map((img, index) =>\n              tx\n                .update(propertyImages)\n                .set({ sortOrder: index })\n                .where(eq(propertyImages.id, img.id))\n            )\n          );\n        }\n\n        return { success: true, remainingCount: remainingImages.length };\n      });\n\n      // If database operation succeeded, attempt file cleanup\n      if (result.success) {\n        await this.cleanupImageFile(imageUrl);\n      }\n\n      return result;\n    } catch (error) {\n      console.error(`Failed to remove property image ${imageUrl} for property ${propertyId}:`, error);\n      throw error;\n    }\n  }\n\n  private async cleanupImageFile(imageUrl: string): Promise<void> {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      const { fileURLToPath } = await import('url');\n      \n      // Only clean up files that are in our uploads directory\n      if (imageUrl.startsWith('/uploads/properties/') || imageUrl.startsWith('/uploads/avatar/') || imageUrl.startsWith('/uploads/customer/')) {\n        // Extract filename and upload type from URL\n        const filename = path.basename(imageUrl);\n        const uploadType = imageUrl.split('/')[2]; // 'properties', 'avatar', or 'customer'\n        \n        // Use UPLOADS_PATH environment variable or fall back to relative path\n        const baseUploadsPath = process.env.UPLOADS_PATH || path.join(path.dirname(fileURLToPath(import.meta.url)), 'uploads');\n        const uploadsDir = path.join(baseUploadsPath, uploadType);\n        const filePath = path.join(uploadsDir, filename);\n        \n        // Ensure the file path is within our uploads directory (prevent path traversal)\n        const normalizedPath = path.normalize(filePath);\n        const normalizedUploadsDir = path.normalize(uploadsDir);\n        \n        if (normalizedPath.startsWith(normalizedUploadsDir)) {\n          // Check if file exists before attempting deletion\n          try {\n            await fs.access(filePath);\n            await fs.unlink(filePath);\n            console.log(`✅ Cleaned up image file: ${filePath}`);\n          } catch (fileError: any) {\n            // File doesn't exist or can't be deleted - log but don't throw\n            if (fileError.code !== 'ENOENT') {\n              console.warn(`⚠️ Could not delete image file ${filePath}:`, fileError.message);\n            }\n          }\n        } else {\n          console.warn(`⚠️ Attempted to delete file outside uploads directory: ${imageUrl}`);\n        }\n      } else {\n        // External URL (like Unsplash) - no cleanup needed\n        console.log(`ℹ️ External image URL, no file cleanup needed: ${imageUrl}`);\n      }\n    } catch (error) {\n      console.warn(`⚠️ File cleanup failed for ${imageUrl}:`, error);\n      // Don't throw error - file cleanup failure shouldn't break the API response\n    }\n  }\n\n  async updatePropertyImageOrder(propertyId: string, imageUpdates: { imageUrl: string; sortOrder: number }[]): Promise<void> {\n    await Promise.all(\n      imageUpdates.map(({ imageUrl, sortOrder }) =>\n        this.dbConn\n          .update(propertyImages)\n          .set({ sortOrder })\n          .where(and(eq(propertyImages.propertyId, propertyId), eq(propertyImages.imageUrl, imageUrl)))\n      )\n    );\n  }\n\n  // Property Amenities\n  async getPropertyAmenities(propertyId: string): Promise<PropertyAmenity[]> {\n    return await this.dbConn\n      .select()\n      .from(propertyAmenities)\n      .where(eq(propertyAmenities.propertyId, propertyId));\n  }\n\n  async addPropertyAmenity(amenity: InsertPropertyAmenity): Promise<PropertyAmenity> {\n    await this.dbConn.insert(propertyAmenities).values(amenity);\n    const [createdAmenity] = await this.dbConn\n      .select()\n      .from(propertyAmenities)\n      .where(and(eq(propertyAmenities.propertyId, amenity.propertyId), eq(propertyAmenities.amenity, amenity.amenity)));\n    return createdAmenity;\n  }\n\n  async removePropertyAmenity(propertyId: string, amenity: string): Promise<boolean> {\n    await this.dbConn\n      .delete(propertyAmenities)\n      .where(and(eq(propertyAmenities.propertyId, propertyId), eq(propertyAmenities.amenity, amenity)));\n    return true;\n  }\n\n  async replacePropertyAmenities(propertyId: string, amenities: string[]): Promise<void> {\n    // Remove all existing amenities\n    await this.dbConn.delete(propertyAmenities).where(eq(propertyAmenities.propertyId, propertyId));\n    \n    // Add new amenities\n    if (amenities.length > 0) {\n      await this.dbConn.insert(propertyAmenities).values(\n        amenities.map(amenity => ({ propertyId, amenity }))\n      );\n    }\n  }\n\n  // Property Features\n  async getPropertyFeatures(propertyId: string): Promise<PropertyFeature[]> {\n    return await this.dbConn\n      .select()\n      .from(propertyFeatures)\n      .where(eq(propertyFeatures.propertyId, propertyId));\n  }\n\n  async addPropertyFeature(feature: InsertPropertyFeature): Promise<PropertyFeature> {\n    await this.dbConn.insert(propertyFeatures).values(feature);\n    const [createdFeature] = await this.dbConn\n      .select()\n      .from(propertyFeatures)\n      .where(and(eq(propertyFeatures.propertyId, feature.propertyId), eq(propertyFeatures.feature, feature.feature)));\n    return createdFeature;\n  }\n\n  async removePropertyFeature(propertyId: string, feature: string): Promise<boolean> {\n    await this.dbConn\n      .delete(propertyFeatures)\n      .where(and(eq(propertyFeatures.propertyId, propertyId), eq(propertyFeatures.feature, feature)));\n    return true;\n  }\n\n  async replacePropertyFeatures(propertyId: string, features: string[]): Promise<void> {\n    // Remove all existing features\n    await this.dbConn.delete(propertyFeatures).where(eq(propertyFeatures.propertyId, propertyId));\n    \n    // Add new features\n    if (features.length > 0) {\n      await this.dbConn.insert(propertyFeatures).values(\n        features.map(feature => ({ propertyId, feature }))\n      );\n    }\n  }\n\n  // Inquiries\n  async getInquiry(id: string): Promise<Inquiry | undefined> {\n    const [inquiry] = await this.dbConn.select().from(inquiries).where(eq(inquiries.id, id));\n    return inquiry;\n  }\n\n  async getInquiriesForProperty(propertyId: string): Promise<Inquiry[]> {\n    return await this.dbConn\n      .select()\n      .from(inquiries)\n      .where(eq(inquiries.propertyId, propertyId))\n      .orderBy(desc(inquiries.createdAt));\n  }\n\n  async createInquiry(inquiry: InsertInquiry): Promise<Inquiry> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(inquiries).values({ ...inquiry, id });\n    return await this.getInquiry(id) as Inquiry;\n  }\n\n  async updateInquiryStatus(id: string, status: string): Promise<Inquiry | undefined> {\n    await this.dbConn.update(inquiries).set({ status }).where(eq(inquiries.id, id));\n    return await this.getInquiry(id);\n  }\n\n  // Favorites\n  async getFavoritesByUser(userId: string): Promise<PropertyWithDetails[]> {\n    const userFavorites = await this.dbConn\n      .select({ propertyId: favorites.propertyId })\n      .from(favorites)\n      .where(eq(favorites.userId, userId));\n\n    const propertyIds = userFavorites.map(f => f.propertyId).filter(id => id != null);\n    if (propertyIds.length === 0) return [];\n\n    const propertiesWithDetails = await Promise.all(\n      propertyIds.map(id => this.getPropertyWithDetails(id))\n    );\n\n    return propertiesWithDetails.filter(p => p !== undefined) as PropertyWithDetails[];\n  }\n\n  async addToFavorites(favorite: InsertFavorite): Promise<Favorite> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(favorites).values({ ...favorite, id });\n    const [createdFavorite] = await this.dbConn.select().from(favorites).where(eq(favorites.id, id));\n    return createdFavorite;\n  }\n\n  async removeFromFavorites(userId: string, propertyId: string): Promise<boolean> {\n    await this.dbConn\n      .delete(favorites)\n      .where(and(eq(favorites.userId, userId), eq(favorites.propertyId, propertyId)));\n    return true;\n  }\n\n  async isFavorite(userId: string, propertyId: string): Promise<boolean> {\n    const [favorite] = await this.dbConn\n      .select()\n      .from(favorites)\n      .where(and(eq(favorites.userId, userId), eq(favorites.propertyId, propertyId)));\n    return !!favorite;\n  }\n\n  // Search History\n  async addSearchHistory(search: InsertSearchHistory): Promise<SearchHistory> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(searchHistory).values({ ...search, id });\n    return await this.dbConn.select().from(searchHistory).where(eq(searchHistory.id, id)).then(rows => rows[0]);\n  }\n\n  async getSearchHistoryByUser(userId: string): Promise<SearchHistory[]> {\n    return await this.dbConn\n      .select()\n      .from(searchHistory)\n      .where(eq(searchHistory.userId, userId))\n      .orderBy(desc(searchHistory.createdAt));\n  }\n\n  async addSearchFilter(filter: InsertSearchFilter): Promise<SearchFilter> {\n    await this.dbConn.insert(searchFilters).values(filter);\n    const [createdFilter] = await this.dbConn\n      .select()\n      .from(searchFilters)\n      .where(and(eq(searchFilters.searchId, filter.searchId), eq(searchFilters.filterKey, filter.filterKey)));\n    return createdFilter;\n  }\n\n  // Customer Analytics\n  async addCustomerActivity(activity: InsertCustomerActivity): Promise<CustomerActivity> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(customerActivity).values({ ...activity, id });\n    return await this.dbConn.select().from(customerActivity).where(eq(customerActivity.id, id)).then(rows => rows[0]);\n  }\n\n  async getCustomerActivities(userId: string, limit: number = 50): Promise<CustomerActivity[]> {\n    return await this.dbConn\n      .select()\n      .from(customerActivity)\n      .where(eq(customerActivity.userId, userId))\n      .orderBy(desc(customerActivity.createdAt))\n      .limit(limit);\n  }\n\n  async getCustomerPoints(userId: string): Promise<CustomerPoints | undefined> {\n    const [points] = await this.dbConn.select().from(customerPoints).where(eq(customerPoints.userId, userId));\n    return points;\n  }\n\n  async updateCustomerPoints(userId: string, points: Partial<InsertCustomerPoints>): Promise<CustomerPoints> {\n    const existing = await this.getCustomerPoints(userId);\n    \n    if (existing) {\n      await this.dbConn.update(customerPoints).set(points).where(eq(customerPoints.userId, userId));\n      return await this.getCustomerPoints(userId) as CustomerPoints;\n    } else {\n      const id = crypto.randomUUID();\n      await this.dbConn.insert(customerPoints).values({ ...points, id, userId });\n      return await this.getCustomerPoints(userId) as CustomerPoints;\n    }\n  }\n\n  async getCustomerAnalytics(userId: string): Promise<{\n    totalActivities: number;\n    activitiesByType: { activityType: string; count: number; points: number }[];\n    pointsHistory: { date: string; points: number }[];\n    monthlyActivity: { month: string; activities: number }[];\n  }> {\n    return {\n      totalActivities: 0,\n      activitiesByType: [],\n      pointsHistory: [],\n      monthlyActivity: []\n    };\n  }\n\n  // Wave management\n  async getWaves(): Promise<Wave[]> {\n    return await this.dbConn.select().from(waves).orderBy(desc(waves.createdAt));\n  }\n\n  async getWave(id: string): Promise<Wave | undefined> {\n    const [wave] = await this.dbConn.select().from(waves).where(eq(waves.id, id));\n    return wave;\n  }\n\n  async createWave(wave: InsertWave): Promise<Wave> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(waves).values({ ...wave, id });\n    return await this.getWave(id) as Wave;\n  }\n\n  async updateWave(id: string, wave: Partial<InsertWave>): Promise<Wave | undefined> {\n    await this.dbConn.update(waves).set(wave).where(eq(waves.id, id));\n    return await this.getWave(id);\n  }\n\n  async deleteWave(id: string): Promise<boolean> {\n    await this.dbConn.delete(waves).where(eq(waves.id, id));\n    return true;\n  }\n\n  async getPropertiesByWave(waveId: string): Promise<Property[]> {\n    return await this.dbConn.select().from(properties).where(eq(properties.waveId, waveId));\n  }\n\n  // Customer Wave Permissions\n  async getCustomerWavePermissions(userId: string): Promise<CustomerWavePermission[]> {\n    return await this.dbConn\n      .select()\n      .from(customerWavePermissions)\n      .where(eq(customerWavePermissions.userId, userId));\n  }\n\n  async grantWavePermission(permission: InsertCustomerWavePermission): Promise<CustomerWavePermission> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(customerWavePermissions).values({ ...permission, id });\n    const [createdPermission] = await this.dbConn\n      .select()\n      .from(customerWavePermissions)\n      .where(eq(customerWavePermissions.id, id));\n    return createdPermission;\n  }\n\n  async revokeWavePermission(userId: string, waveId: string): Promise<boolean> {\n    await this.dbConn\n      .delete(customerWavePermissions)\n      .where(and(eq(customerWavePermissions.userId, userId), eq(customerWavePermissions.waveId, waveId)));\n    return true;\n  }\n\n  async getWavePermission(userId: string, waveId: string): Promise<CustomerWavePermission | undefined> {\n    const [permission] = await this.dbConn\n      .select()\n      .from(customerWavePermissions)\n      .where(and(eq(customerWavePermissions.userId, userId), eq(customerWavePermissions.waveId, waveId)));\n    return permission;\n  }\n\n  async updateWavePermission(id: string, permission: Partial<InsertCustomerWavePermission>): Promise<CustomerWavePermission | undefined> {\n    await this.dbConn.update(customerWavePermissions).set(permission).where(eq(customerWavePermissions.id, id));\n    const [updated] = await this.dbConn.select().from(customerWavePermissions).where(eq(customerWavePermissions.id, id));\n    return updated;\n  }\n\n  async getUserWaveUsage(userId: string): Promise<{ waveId: string; used: number; max: number }[]> {\n    const permissions = await this.getCustomerWavePermissions(userId);\n    return permissions.map(p => ({\n      waveId: p.waveId,\n      used: p.usedProperties || 0,\n      max: p.maxProperties\n    }));\n  }\n\n  async getUserRemainingWaves(userId: string): Promise<number> {\n    const user = await this.getUser(userId);\n    return user?.waveBalance || 0;\n  }\n\n  async checkWavePermission(userId: string, waveId: string | null | undefined): Promise<{ allowed: boolean; reason?: string }> {\n    // Allow admin and super admin users unlimited access\n    const user = await this.getUser(userId);\n    if (user?.role === 'admin' || user?.role === 'super_admin') {\n      return { allowed: true };\n    }\n\n    // If no wave specified (waveId is null or 'no-wave'), allow\n    if (!waveId || waveId === 'no-wave') {\n      return { allowed: true };\n    }\n\n    // Check if user has permission for this wave\n    const permission = await this.getWavePermission(userId, waveId);\n    if (!permission) {\n      // If no permission, check if user has balance to use the wave\n      const userBalance = user?.waveBalance || 0;\n      if (userBalance > 0) {\n        // Allow usage but mark that balance will be deducted\n        return { allowed: true, reason: 'Will use balance for wave property' };\n      }\n      return { allowed: false, reason: 'User does not have permission to use this wave and insufficient balance' };\n    }\n\n    // Check if user has exceeded their property limit for this wave\n    if ((permission.usedProperties || 0) >= permission.maxProperties) {\n      // If limit reached, check if user has balance to extend usage\n      const userBalance = user?.waveBalance || 0;\n      if (userBalance > 0) {\n        // Allow usage but mark that balance will be deducted\n        return { allowed: true, reason: 'Will use balance for additional wave property' };\n      }\n      return { allowed: false, reason: `Maximum properties limit reached for this wave (${permission.maxProperties} properties allowed) and insufficient balance` };\n    }\n\n    return { allowed: true };\n  }\n\n  async incrementWaveUsage(userId: string, waveId: string | null | undefined): Promise<void> {\n    if (!waveId || waveId === 'no-wave') {\n      return; // No tracking needed for non-wave properties\n    }\n\n    const user = await this.getUser(userId);\n    // Allow admin and super admin users unlimited access without balance deduction\n    if (user?.role === 'admin' || user?.role === 'super_admin') {\n      const permission = await this.getWavePermission(userId, waveId);\n      if (permission) {\n        await this.updateWavePermission(permission.id, {\n          usedProperties: ((permission.usedProperties || 0) + 1)\n        });\n      }\n      return;\n    }\n\n    const permission = await this.getWavePermission(userId, waveId);\n    if (permission) {\n      // Normal permission usage - just increment\n      if ((permission.usedProperties || 0) < permission.maxProperties) {\n        await this.updateWavePermission(permission.id, {\n          usedProperties: ((permission.usedProperties || 0) + 1)\n        });\n      } else {\n        // Over limit - deduct from balance and increment\n        const balanceDeducted = await this.deductWaveBalance(userId, 1);\n        if (balanceDeducted) {\n          await this.updateWavePermission(permission.id, {\n            usedProperties: ((permission.usedProperties || 0) + 1)\n          });\n        } else {\n          throw new Error('Insufficient wave balance to set wave property');\n        }\n      }\n    } else {\n      // No permission - deduct from balance and create basic permission\n      const balanceDeducted = await this.deductWaveBalance(userId, 1);\n      if (balanceDeducted) {\n        // Grant basic permission (1 property) and use it\n        const newPermission = await this.grantWavePermission({\n          userId,\n          waveId,\n          maxProperties: 1,\n          usedProperties: 1,\n          grantedBy: userId // Self-granted via balance\n        });\n      } else {\n        throw new Error('Insufficient wave balance to set wave property');\n      }\n    }\n  }\n\n  async decrementWaveUsage(userId: string, waveId: string | null | undefined): Promise<void> {\n    if (!waveId || waveId === 'no-wave') {\n      return; // No tracking needed for non-wave properties\n    }\n\n    const permission = await this.getWavePermission(userId, waveId);\n    if (permission && (permission.usedProperties || 0) > 0) {\n      await this.updateWavePermission(permission.id, {\n        usedProperties: (permission.usedProperties || 0) - 1\n      });\n    }\n  }\n\n  async updateUsersWithZeroWaveBalance(): Promise<void> {\n    await this.dbConn.update(users).set({ waveBalance: 0 }).where(lte(users.waveBalance, 0));\n  }\n\n  async deductWaveBalance(userId: string, amount: number): Promise<boolean> {\n    const user = await this.getUser(userId);\n    if (!user || (user.waveBalance || 0) < amount) {\n      return false; // Insufficient balance\n    }\n    \n    const newBalance = (user.waveBalance || 0) - amount;\n    await this.dbConn.update(users).set({ waveBalance: newBalance }).where(eq(users.id, userId));\n    return true;\n  }\n\n  async addWaveBalance(userId: string, amount: number): Promise<boolean> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return false; // User not found\n    }\n    \n    const newBalance = (user.waveBalance || 0) + amount;\n    await this.dbConn.update(users).set({ waveBalance: newBalance }).where(eq(users.id, userId));\n    return true;\n  }\n\n  // Currency Rates\n  async getCurrencyRates(): Promise<CurrencyRate[]> {\n    return await this.dbConn\n      .select()\n      .from(currencyRates)\n      .where(eq(currencyRates.isActive, true))\n      .orderBy(currencyRates.fromCurrency, currencyRates.toCurrency);\n  }\n\n  async getActiveCurrencyRates(): Promise<CurrencyRate[]> {\n    return await this.getCurrencyRates();\n  }\n\n  async getCurrencyRate(fromCurrency: string, toCurrency: string): Promise<CurrencyRate | undefined> {\n    const [rate] = await this.dbConn\n      .select()\n      .from(currencyRates)\n      .where(and(\n        eq(currencyRates.fromCurrency, fromCurrency),\n        eq(currencyRates.toCurrency, toCurrency),\n        eq(currencyRates.isActive, true)\n      ));\n    return rate;\n  }\n\n  async createCurrencyRate(rate: InsertCurrencyRate): Promise<CurrencyRate> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(currencyRates).values({ ...rate, id });\n    const [createdRate] = await this.dbConn.select().from(currencyRates).where(eq(currencyRates.id, id));\n    return createdRate;\n  }\n\n  async updateCurrencyRate(id: string, rate: UpdateCurrencyRate): Promise<CurrencyRate | undefined> {\n    await this.dbConn.update(currencyRates).set(rate).where(eq(currencyRates.id, id));\n    const [updatedRate] = await this.dbConn.select().from(currencyRates).where(eq(currencyRates.id, id));\n    return updatedRate;\n  }\n\n  async deactivateCurrencyRate(id: string): Promise<boolean> {\n    await this.dbConn.update(currencyRates).set({ isActive: false }).where(eq(currencyRates.id, id));\n    return true;\n  }\n\n  async convertPrice(amount: number, fromCurrency: string, toCurrency: string): Promise<number> {\n    if (fromCurrency === toCurrency) return amount;\n    \n    const rate = await this.getCurrencyRate(fromCurrency, toCurrency);\n    if (!rate) return amount;\n    \n    return amount * parseFloat(rate.rate.toString());\n  }\n\n  // Client Locations\n  async createClientLocation(location: InsertClientLocation): Promise<ClientLocation> {\n    return await this.addClientLocation(location);\n  }\n\n  async addClientLocation(location: InsertClientLocation): Promise<ClientLocation> {\n    const id = crypto.randomUUID();\n    await this.dbConn.insert(clientLocations).values({ ...location, id });\n    const [createdLocation] = await this.dbConn.select().from(clientLocations).where(eq(clientLocations.id, id));\n    return createdLocation;\n  }\n\n  async getClientLocations(filters: any = {}, limit: number = 100): Promise<ClientLocation[]> {\n    return await this.dbConn\n      .select()\n      .from(clientLocations)\n      .orderBy(desc(clientLocations.createdAt))\n      .limit(limit);\n  }\n\n  async countClientLocations(filters: any = {}): Promise<number> {\n    const [result] = await this.dbConn\n      .select({ count: sql<number>`count(*)` })\n      .from(clientLocations);\n    return result?.count || 0;\n  }\n\n  async getClientLocationStats(): Promise<any> {\n    try {\n      // Get all locations for analysis\n      const allLocations = await this.dbConn\n        .select()\n        .from(clientLocations)\n        .orderBy(desc(clientLocations.createdAt));\n\n      const totalLocations = allLocations.length;\n\n      // Calculate accuracy stats\n      const accuracyValues = allLocations\n        .map(loc => loc.accuracy)\n        .filter(acc => acc !== null && acc !== undefined) as number[];\n      \n      const accuracyStats = {\n        average: accuracyValues.length > 0 \n          ? accuracyValues.reduce((sum, val) => sum + val, 0) / accuracyValues.length \n          : 0,\n        min: accuracyValues.length > 0 ? Math.min(...accuracyValues) : 0,\n        max: accuracyValues.length > 0 ? Math.max(...accuracyValues) : 0\n      };\n\n      // Calculate daily stats (last 7 days)\n      const dailyStatsMap = new Map<string, number>();\n      allLocations.forEach(loc => {\n        if (loc.createdAt) {\n          const date = new Date(loc.createdAt).toISOString().split('T')[0];\n          dailyStatsMap.set(date, (dailyStatsMap.get(date) || 0) + 1);\n        }\n      });\n      const dailyStats = Array.from(dailyStatsMap.entries())\n        .map(([date, count]) => ({ date, count }))\n        .sort((a, b) => a.date.localeCompare(b.date))\n        .slice(-7); // Last 7 days\n\n      // Calculate top cities\n      const cityStatsMap = new Map<string, number>();\n      allLocations.forEach(loc => {\n        if (loc.city) {\n          cityStatsMap.set(loc.city, (cityStatsMap.get(loc.city) || 0) + 1);\n        }\n      });\n      const topCities = Array.from(cityStatsMap.entries())\n        .map(([city, count]) => ({ city, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 10);\n\n      // Calculate device stats (from userAgent)\n      const deviceStatsMap = new Map<string, number>();\n      allLocations.forEach(loc => {\n        if (loc.userAgent) {\n          // Extract simplified device info from user agent\n          let device = 'Unknown';\n          const ua = loc.userAgent.toLowerCase();\n          \n          if (ua.includes('mobile') || ua.includes('android') || ua.includes('iphone')) {\n            device = 'Mobile';\n          } else if (ua.includes('tablet') || ua.includes('ipad')) {\n            device = 'Tablet';\n          } else if (ua.includes('windows') || ua.includes('macintosh') || ua.includes('linux')) {\n            device = 'Desktop';\n          }\n          \n          deviceStatsMap.set(device, (deviceStatsMap.get(device) || 0) + 1);\n        }\n      });\n      const deviceStats = Array.from(deviceStatsMap.entries())\n        .map(([device, count]) => ({ device, count }))\n        .sort((a, b) => b.count - a.count);\n\n      // Calculate top countries\n      const countryStatsMap = new Map<string, number>();\n      allLocations.forEach(loc => {\n        if (loc.country) {\n          countryStatsMap.set(loc.country, (countryStatsMap.get(loc.country) || 0) + 1);\n        }\n      });\n      const topCountries = Array.from(countryStatsMap.entries())\n        .map(([country, count]) => ({ country, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 10);\n\n      return {\n        totalLocations,\n        accuracyStats,\n        dailyStats,\n        topCities,\n        topCountries,\n        deviceStats\n      };\n    } catch (error) {\n      console.error('Error getting client location stats:', error);\n      // Return safe default values if there's an error\n      return {\n        totalLocations: 0,\n        accuracyStats: { average: 0, min: 0, max: 0 },\n        dailyStats: [],\n        topCities: [],\n        topCountries: [],\n        deviceStats: []\n      };\n    }\n  }\n}\n\n// Export the storage instance (will be initialized by StorageFactory)\nexport let storage: IStorage;","size_bytes":60535},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/lib/sitemap.ts":{"content":"import { LANGUAGE_MAPPING, SUPPORTED_LANGUAGES, getLanguageInfo, type Language } from './i18n';\n\ninterface SitemapEntry {\n  url: string;\n  lastmod?: string;\n  changefreq?: 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';\n  priority?: number;\n  alternates?: Array<{ href: string; hreflang: string }>;\n}\n\ninterface RouteConfig {\n  path: string;\n  changefreq?: SitemapEntry['changefreq'];\n  priority?: number;\n  dynamic?: boolean;\n}\n\n// Define all static routes and their SEO configurations\nconst STATIC_ROUTES: RouteConfig[] = [\n  { path: '/', changefreq: 'daily', priority: 1.0 },\n  { path: '/properties', changefreq: 'hourly', priority: 0.9 },\n  { path: '/about', changefreq: 'monthly', priority: 0.5 },\n  { path: '/agents', changefreq: 'weekly', priority: 0.7 },\n  { path: '/favorites', changefreq: 'daily', priority: 0.6 },\n  { path: '/settings', changefreq: 'monthly', priority: 0.3 }\n];\n\n// Generate language alternates for a given path\nfunction generateLanguageAlternates(path: string, baseUrl: string): Array<{ href: string; hreflang: string }> {\n  const alternates: Array<{ href: string; hreflang: string }> = [];\n  \n  SUPPORTED_LANGUAGES.forEach(lang => {\n    const langInfo = getLanguageInfo(lang);\n    const localizedPath = getLocalizedPath(path, lang);\n    alternates.push({\n      href: `${baseUrl}${localizedPath}`,\n      hreflang: langInfo.hreflang\n    });\n  });\n  \n  // Add x-default (defaulting to English)\n  alternates.push({\n    href: `${baseUrl}${getLocalizedPath(path, 'en')}`,\n    hreflang: 'x-default'\n  });\n  \n  return alternates;\n}\n\n// Helper function to get localized path (duplicate from i18n.ts to avoid circular dependency)\nfunction getLocalizedPath(path: string, language: Language): string {\n  let cleanPath = path.startsWith('/') ? path : `/${path}`;\n  cleanPath = cleanPath.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n  return `/${language}${cleanPath}`;\n}\n\n// Generate sitemap entries for all languages\nexport function generateSitemapEntries(baseUrl: string, dynamicRoutes: Array<{ id: string; path: string; lastmod?: string }> = []): SitemapEntry[] {\n  const entries: SitemapEntry[] = [];\n  const now = new Date().toISOString();\n  \n  // Generate entries for static routes\n  STATIC_ROUTES.forEach(route => {\n    SUPPORTED_LANGUAGES.forEach(lang => {\n      const localizedPath = getLocalizedPath(route.path, lang);\n      const entry: SitemapEntry = {\n        url: `${baseUrl}${localizedPath}`,\n        lastmod: now,\n        changefreq: route.changefreq || 'weekly',\n        priority: route.priority || 0.5,\n        alternates: generateLanguageAlternates(route.path, baseUrl)\n      };\n      entries.push(entry);\n    });\n  });\n  \n  // Generate entries for dynamic routes (e.g., property pages)\n  dynamicRoutes.forEach(route => {\n    SUPPORTED_LANGUAGES.forEach(lang => {\n      const localizedPath = getLocalizedPath(route.path, lang);\n      const entry: SitemapEntry = {\n        url: `${baseUrl}${localizedPath}`,\n        lastmod: route.lastmod || now,\n        changefreq: 'weekly',\n        priority: 0.8,\n        alternates: generateLanguageAlternates(route.path, baseUrl)\n      };\n      entries.push(entry);\n    });\n  });\n  \n  return entries;\n}\n\n// Generate XML sitemap content\nexport function generateXMLSitemap(entries: SitemapEntry[]): string {\n  const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" \n        xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n${entries.map(entry => {\n  const alternateLinks = entry.alternates?.map(alt => \n    `    <xhtml:link rel=\"alternate\" hreflang=\"${alt.hreflang}\" href=\"${alt.href}\"/>`\n  ).join('\\n') || '';\n  \n  return `  <url>\n    <loc>${entry.url}</loc>\n    <lastmod>${entry.lastmod}</lastmod>\n    <changefreq>${entry.changefreq}</changefreq>\n    <priority>${entry.priority}</priority>\n${alternateLinks}\n  </url>`;\n}).join('\\n')}\n</urlset>`;\n  \n  return xml;\n}\n\n// Generate robots.txt content with sitemap reference\nexport function generateRobotsTxt(baseUrl: string): string {\n  return `User-agent: *\nAllow: /\n\n# Language-specific content\nAllow: /en/\nAllow: /ar/\nAllow: /kur/\n\n# Sitemap\nSitemap: ${baseUrl}/sitemap.xml\n\n# Block admin areas\nDisallow: /admin/\nDisallow: /api/\n\n# Block temporary files\nDisallow: /*.tmp$\nDisallow: /*.temp$\n\n# Allow search engines to index language-specific pages\nCrawl-delay: 1`;\n}\n\n// Generate hreflang implementation code for meta tags\nexport function generateHreflangMeta(currentPath: string, baseUrl: string): Array<{ rel: string; hreflang: string; href: string }> {\n  const hreflangTags: Array<{ rel: string; hreflang: string; href: string }> = [];\n  \n  SUPPORTED_LANGUAGES.forEach(lang => {\n    const langInfo = getLanguageInfo(lang);\n    const localizedPath = getLocalizedPath(currentPath, lang);\n    hreflangTags.push({\n      rel: 'alternate',\n      hreflang: langInfo.hreflang,\n      href: `${baseUrl}${localizedPath}`\n    });\n  });\n  \n  // Add x-default\n  hreflangTags.push({\n    rel: 'alternate',\n    hreflang: 'x-default',\n    href: `${baseUrl}${getLocalizedPath(currentPath, 'en')}`\n  });\n  \n  return hreflangTags;\n}\n\n// Language detection and mapping utilities for search engines\nexport function getLanguageFromPath(path: string): Language | null {\n  const segments = path.split('/').filter(Boolean);\n  if (segments.length === 0) return null;\n  \n  const firstSegment = segments[0];\n  if (SUPPORTED_LANGUAGES.includes(firstSegment as Language)) {\n    return firstSegment as Language;\n  }\n  \n  return null;\n}\n\n// Get canonical URL for current page with proper language handling\nexport function getCanonicalUrl(path: string, language: Language, baseUrl: string): string {\n  const cleanPath = path.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n  const localizedPath = getLocalizedPath(cleanPath, language);\n  return `${baseUrl}${localizedPath}`;\n}","size_bytes":5844},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/lib/serviceWorker.ts":{"content":"// Service Worker Registration and Management\n// Handles registration, updates, and communication with the service worker\n\ninterface ServiceWorkerConfig {\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onError?: (error: Error) => void;\n}\n\n// Check if service workers are supported\nexport function isServiceWorkerSupported(): boolean {\n  return 'serviceWorker' in navigator;\n}\n\n// Register the service worker\nexport async function registerServiceWorker(config: ServiceWorkerConfig = {}): Promise<ServiceWorkerRegistration | null> {\n  if (!isServiceWorkerSupported()) {\n    console.warn('[SW] Service workers are not supported in this browser');\n    return null;\n  }\n\n  // Only register in production or when explicitly enabled\n  if (import.meta.env.DEV && !import.meta.env.VITE_SW_DEV) {\n    console.log('[SW] Service worker registration skipped in development');\n    return null;\n  }\n\n  try {\n    console.log('[SW] Registering service worker...');\n    \n    const registration = await navigator.serviceWorker.register('/sw.js', {\n      scope: '/',\n      updateViaCache: 'none' // Always check for updates\n    });\n\n    console.log('[SW] Service worker registered successfully:', registration);\n\n    // Handle service worker updates\n    registration.addEventListener('updatefound', () => {\n      const newWorker = registration.installing;\n      if (!newWorker) return;\n\n      console.log('[SW] New service worker found, installing...');\n\n      newWorker.addEventListener('statechange', () => {\n        if (newWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // New content is available\n            console.log('[SW] New content available, please refresh');\n            config.onUpdate?.(registration);\n          } else {\n            // Content is cached for offline use\n            console.log('[SW] Content cached for offline use');\n            config.onSuccess?.(registration);\n          }\n        }\n      });\n    });\n\n    // Handle service worker ready\n    if (registration.active) {\n      config.onSuccess?.(registration);\n    }\n\n    return registration;\n  } catch (error) {\n    console.error('[SW] Service worker registration failed:', error);\n    config.onError?.(error as Error);\n    return null;\n  }\n}\n\n// Unregister the service worker\nexport async function unregisterServiceWorker(): Promise<boolean> {\n  if (!isServiceWorkerSupported()) {\n    return false;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.getRegistration('/');\n    if (registration) {\n      console.log('[SW] Unregistering service worker...');\n      return await registration.unregister();\n    }\n    return false;\n  } catch (error) {\n    console.error('[SW] Service worker unregistration failed:', error);\n    return false;\n  }\n}\n\n// Check for service worker updates\nexport async function checkForUpdates(): Promise<void> {\n  if (!isServiceWorkerSupported()) {\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.getRegistration('/');\n    if (registration) {\n      console.log('[SW] Checking for updates...');\n      await registration.update();\n    }\n  } catch (error) {\n    console.error('[SW] Update check failed:', error);\n  }\n}\n\n// Skip waiting and activate new service worker\nexport function skipWaiting(): void {\n  if (!isServiceWorkerSupported()) {\n    return;\n  }\n\n  navigator.serviceWorker.controller?.postMessage({ type: 'SKIP_WAITING' });\n}\n\n// Get the current service worker status\nexport async function getServiceWorkerStatus(): Promise<{\n  supported: boolean;\n  registered: boolean;\n  active: boolean;\n  controller: boolean;\n}> {\n  const supported = isServiceWorkerSupported();\n  \n  if (!supported) {\n    return { supported: false, registered: false, active: false, controller: false };\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.getRegistration('/');\n    return {\n      supported: true,\n      registered: !!registration,\n      active: !!registration?.active,\n      controller: !!navigator.serviceWorker.controller\n    };\n  } catch (error) {\n    console.error('[SW] Error getting service worker status:', error);\n    return { supported: true, registered: false, active: false, controller: false };\n  }\n}\n\n// Listen for service worker messages\nexport function listenForServiceWorkerMessages(\n  onMessage: (data: any) => void\n): () => void {\n  if (!isServiceWorkerSupported()) {\n    return () => {};\n  }\n\n  const messageHandler = (event: MessageEvent) => {\n    console.log('[SW] Message received from service worker:', event.data);\n    onMessage(event.data);\n  };\n\n  navigator.serviceWorker.addEventListener('message', messageHandler);\n\n  return () => {\n    navigator.serviceWorker.removeEventListener('message', messageHandler);\n  };\n}\n\n// Send message to service worker\nexport function sendMessageToServiceWorker(message: any): void {\n  if (!isServiceWorkerSupported() || !navigator.serviceWorker.controller) {\n    console.warn('[SW] Cannot send message: service worker not available');\n    return;\n  }\n\n  navigator.serviceWorker.controller.postMessage(message);\n}\n\n// Network status helpers\nexport function isOnline(): boolean {\n  return navigator.onLine;\n}\n\nexport function addNetworkListeners(\n  onOnline: () => void,\n  onOffline: () => void\n): () => void {\n  window.addEventListener('online', onOnline);\n  window.addEventListener('offline', onOffline);\n\n  return () => {\n    window.removeEventListener('online', onOnline);\n    window.removeEventListener('offline', onOffline);\n  };\n}\n\n// Cache management helpers\nexport async function clearServiceWorkerCaches(): Promise<void> {\n  if (!('caches' in window)) {\n    return;\n  }\n\n  try {\n    const cacheNames = await caches.keys();\n    await Promise.all(\n      cacheNames.map(cacheName => {\n        console.log('[SW] Deleting cache:', cacheName);\n        return caches.delete(cacheName);\n      })\n    );\n    console.log('[SW] All caches cleared');\n  } catch (error) {\n    console.error('[SW] Error clearing caches:', error);\n  }\n}","size_bytes":6072},"client/src/pages/home.tsx":{"content":"import { useState, useRef, useEffect, useMemo, Suspense, lazy } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport SearchBar from \"@/components/search-bar\";\nimport PropertyCard from \"@/components/property-card\";\n\n// Lazy load PropertyMap component for better performance (reduces initial bundle size)\nconst PropertyMap = lazy(() => import(\"@/components/property-map\"));\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Input } from \"@/components/ui/input\";\nimport { SEOHead } from \"@/components/SEOHead\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { generateHomeMeta, generateFAQStructuredData } from \"@/lib/meta-enhancement\";\nimport { useImagePreloader } from \"@/lib/image-preloader\";\nimport { useFeaturedProperties, useProperties } from \"@/hooks/use-properties\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePropertyEvents } from \"@/hooks/usePropertyEvents\";\nimport { useCurrency } from \"@/lib/currency-context\";\nimport { SUPPORTED_CURRENCIES } from \"@/lib/currency\";\nimport type { Property, AISearchResponse, PropertyFilters } from \"@/types\";\nimport {\n  Tag,\n  Key,\n  Home,\n  Building2,\n  MapPin,\n  Filter,\n  DollarSign,\n  Bed,\n  Bath,\n  Menu,\n  Search,\n  X,\n  User,\n  Heart,\n  Settings,\n  University,\n  Sun,\n  Moon,\n  Building,\n  Mountain,\n  Info,\n} from \"lucide-react\";\nimport logoImage from \"@assets/logo_1757848527935.png\";\n\nexport default function HomePage() {\n  const { t, language } = useTranslation();\n  const { user } = useAuth();\n  const { preferredCurrency } = useCurrency();\n  const currencySymbol = SUPPORTED_CURRENCIES[preferredCurrency]?.symbol || preferredCurrency;\n  const [, setLocation] = useLocation();\n  const { data: featuredProperties, isLoading: featuredLoading } =\n    useFeaturedProperties();\n  const [searchResults, setSearchResults] = useState<AISearchResponse | null>(\n    null,\n  );\n  const [activeFilter, setActiveFilter] = useState<string>(\"sale\");\n  const [mapFilters, setMapFilters] = useState<PropertyFilters>({\n    limit: 100, // Get more properties for the map\n    language: language, // Initialize with current language\n  });\n  const [priceRange, setPriceRange] = useState([1, 10000000]);\n  const [cityInput, setCityInput] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedProperty, setSelectedProperty] = useState<Property | null>(\n    null,\n  );\n  const [cardPosition, setCardPosition] = useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n  const [highlightedPropertyId, setHighlightedPropertyId] = useState<\n    string | null\n  >(null);\n  const [visiblePropertiesCount, setVisiblePropertiesCount] = useState<number>(0);\n  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(() => {\n    if (typeof window !== \"undefined\") {\n      return document.documentElement.classList.contains(\"dark\")\n        ? \"dark\"\n        : \"light\";\n    }\n    return \"light\";\n  });\n\n  // Load properties for the map with current filters\n  const { data: mapProperties } = useProperties(mapFilters);\n\n  // Listen for real-time property updates\n  const { isConnected, isConnecting } = usePropertyEvents({\n    currentFilters: mapFilters,\n    onPropertyCreated: (property) => {\n      console.log(\"New property created and detected:\", property.title);\n    },\n  });\n\n  // Check for property to highlight from URL parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const showPropertyId = urlParams.get(\"showProperty\");\n    if (showPropertyId) {\n      setHighlightedPropertyId(showPropertyId);\n      // Clear the URL parameter to keep the URL clean\n      const newUrl = new URL(window.location.href);\n      newUrl.searchParams.delete(\"showProperty\");\n      window.history.replaceState({}, \"\", newUrl.toString());\n    }\n  }, []);\n\n  // When we have properties and a highlighted property ID, trigger the map to focus on it\n  useEffect(() => {\n    if (highlightedPropertyId && mapProperties && mapProperties.length > 0) {\n      const propertyToHighlight = mapProperties.find(\n        (p) => p.id === highlightedPropertyId,\n      );\n      if (propertyToHighlight) {\n        // Trigger the property selection to focus on it on the map\n        setSelectedProperty(propertyToHighlight);\n        // Clear the highlighted property ID after using it\n        setHighlightedPropertyId(null);\n      }\n    }\n  }, [highlightedPropertyId, mapProperties]);\n\n  // Load theme from localStorage on component mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      if (savedTheme === \"dark\") {\n        document.documentElement.classList.add(\"dark\");\n      } else {\n        document.documentElement.classList.remove(\"dark\");\n      }\n    }\n  }, []);\n\n  // Filter properties by language when language changes\n  useEffect(() => {\n    setMapFilters((prevFilters) => ({\n      ...prevFilters,\n      language: language, // Filter properties to show only those matching the selected language\n      limit: 100, // Always maintain the limit for map\n    }));\n  }, [language]);\n\n  const handleSearchResults = (results: AISearchResponse) => {\n    setSearchResults(results);\n  };\n\n  const handleFilterClick = (filter: string) => {\n    setActiveFilter(filter);\n  };\n\n  const handleMapFilterChange = (filters: PropertyFilters) => {\n    setMapFilters({\n      ...filters,\n      limit: 100, // Always maintain the limit for map\n    });\n  };\n\n  const handleFilterChange = (key: keyof PropertyFilters, value: any) => {\n    const newFilters = { ...mapFilters };\n\n    // Handle \"all\", \"any\", and empty values by removing the filter\n    if (\n      value === \"all\" ||\n      value === \"any\" ||\n      value === \"\" ||\n      value === null ||\n      value === undefined\n    ) {\n      delete newFilters[key];\n    } else {\n      // Special handling for numbers\n      if (key === \"bedrooms\" || key === \"bathrooms\") {\n        newFilters[key] = parseInt(value);\n      } else {\n        newFilters[key] = value as any;\n      }\n    }\n\n    // Always maintain the limit for map properties\n    newFilters.limit = 100;\n\n    setMapFilters(newFilters);\n  };\n\n  const handlePriceRangeChange = (range: number[]) => {\n    setPriceRange(range);\n    const newFilters = {\n      ...mapFilters,\n      minPrice: range[0] > 0 ? range[0] : undefined,\n      maxPrice: range[1] < 1000000 ? range[1] : undefined,\n      limit: 100,\n    };\n    setMapFilters(newFilters);\n  };\n\n  const handleCityChange = (city: string) => {\n    setCityInput(city);\n    // Debounce the filter change\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n    debounceRef.current = setTimeout(() => {\n      const newFilters = {\n        ...mapFilters,\n        city: city.trim() || undefined,\n        limit: 100,\n      };\n      setMapFilters(newFilters);\n    }, 500);\n  };\n\n  const clearFilters = () => {\n    setMapFilters({ limit: 100, language: language }); // Retain current language when clearing filters\n    setPriceRange([0, 1000000]);\n    setCityInput(\"\");\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    if (newTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", newTheme);\n  };\n\n  // Generate homepage structured data\n  const getHomepageStructuredData = () => {\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"WebSite\",\n      name: \"MapEstate\",\n      description:\n        \"Find your perfect home with AI-powered recommendations. Discover properties for rent and sale in Kurdistan, Iraq with intelligent search and expert agents.\",\n      url: window.location.origin,\n      potentialAction: {\n        \"@type\": \"SearchAction\",\n        target: `${window.location.origin}/properties?search={search_term_string}`,\n        \"query-input\": \"required name=search_term_string\",\n      },\n      publisher: {\n        \"@type\": \"Organization\",\n        name: \"MapEstate\",\n        url: window.location.origin,\n        logo: {\n          \"@type\": \"ImageObject\",\n          url: `${window.location.origin}/logo_1757848527935.png`,\n        },\n      },\n      mainEntity: {\n        \"@type\": \"RealEstateAgent\",\n        name: \"MapEstate\",\n        description:\n          \"AI-powered real estate platform helping you find the perfect property\",\n        areaServed: {\n          \"@type\": \"Place\",\n          name: \"Kurdistan, Iraq\",\n        },\n      },\n    };\n  };\n\n  // Generate enhanced homepage meta data\n  const homeMeta = useMemo(() => {\n    const featuredCount = featuredProperties?.length || 0;\n    return generateHomeMeta(featuredCount, language);\n  }, [featuredProperties?.length, language]);\n\n  return (\n    <div className=\"map-page h-screen w-full bg-background relative\">\n      <SEOHead\n        pageType=\"home\"\n        ogImage={\n          featuredProperties && featuredProperties.length > 0\n            ? featuredProperties[0].images?.[0]\n            : `/uploads/properties/1759082074149-xrejrtvx6.jpg`\n        }\n        canonicalUrl={undefined}\n        structuredData={[getHomepageStructuredData(), generateFAQStructuredData(language)]}\n        breadcrumbs={[\n          { name: t('nav.home'), url: '/' }\n        ]}\n      />\n      {/* Full Screen Map Section */}\n      <section className=\"h-full w-full relative\">\n        <Suspense\n          fallback={\n            <div className=\"h-full w-full flex items-center justify-center bg-muted rounded-lg\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                <p className=\"text-muted-foreground\">{t(\"home.loadingMap\")}</p>\n              </div>\n            </div>\n          }\n        >\n          <PropertyMap\n            properties={(mapProperties || []) as any}\n            filters={mapFilters}\n            onFilterChange={handleMapFilterChange}\n            onPropertyClick={(property) => {\n              const identifier = property.slug || property.id;\n              window.location.href = `/property/${identifier}`;\n            }}\n            onPropertySelect={(property) => {\n              // Handle property selection for highlighting\n              setHighlightedPropertyId(property.id);\n            }}\n            onVisiblePropertiesChange={(count) => {\n              console.log(`🏠 HOME: Setting visible properties count to: ${count} at ${new Date().toISOString()}`);\n              setVisiblePropertiesCount(count);\n            }}\n            userId={user?.id}\n            className=\"h-full w-full\"\n          />\n        </Suspense>\n\n        {/* Absolute Blurred Filter Section inside Map */}\n        <div\n          className=\"absolute top-2 left-2 right-2 sm:top-4 sm:left-4 sm:right-4 z-[9999] max-h-[calc(100vh-120px)] max-h-[calc(100dvh-120px)] overflow-hidden\"\n          style={{ position: \"absolute\" }}\n        >\n          <div\n            className={`bg-white/90 dark:bg-black/90 backdrop-blur-xl rounded-xl sm:rounded-2xl border border-white/30 dark:border-white/10 shadow-lg hover:shadow-xl transition-all duration-300 max-h-full overflow-y-auto ${showFilters ? \"p-3 sm:p-4 md:p-6\" : \"p-2 sm:p-3\"}`}\n          >\n            <div\n              className={`flex items-center justify-between ${showFilters ? \"mb-3 sm:mb-4\" : \"mb-1 sm:mb-2\"}`}\n            >\n              <div className=\"flex items-center gap-1 sm:gap-2\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-black hover:text-black dark:text-gray-300 dark:hover:text-white text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2\"\n                      data-testid=\"menu-button\"\n                    >\n                      <Menu className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent\n                    align=\"start\"\n                    className=\"w-48 bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-600 z-[10001]\"\n                  >\n                    <DropdownMenuItem\n                      className=\"flex items-center gap-2 cursor-pointer\"\n                      onClick={() => setLocation(\"/favorites\")}\n                      data-testid=\"my-favorites-menu\"\n                    >\n                      <Heart className=\"h-4 w-4\" style={{ color: \"#FF7800\" }} />\n                      <span>{t(\"menu.myFavorites\")}</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      className=\"flex items-center gap-2 cursor-pointer\"\n                      onClick={() => setLocation(\"/settings\")}\n                      data-testid=\"settings-menu\"\n                    >\n                      <Settings className=\"h-4 w-4\" style={{ color: \"#FF7800\" }} />\n                      <span>{t(\"menu.settings\")}</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      className=\"flex items-center gap-2 cursor-pointer\"\n                      onClick={() => setLocation(\"/about\")}\n                      data-testid=\"about-menu\"\n                    >\n                      <Info className=\"h-4 w-4\" style={{ color: \"#FF7800\" }} />\n                      <span>{t(\"nav.about\")}</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      className=\"flex items-center gap-2 cursor-pointer\"\n                      onClick={toggleTheme}\n                    >\n                      {theme === \"light\" ? (\n                        <Moon className=\"h-4 w-4\" style={{ color: \"#FF7800\" }} />\n                      ) : (\n                        <Sun className=\"h-4 w-4\" style={{ color: \"#FF7800\" }} />\n                      )}\n                      <span>\n                        {theme === \"light\"\n                          ? t(\"menu.darkMode\")\n                          : t(\"menu.lightMode\")}\n                      </span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                <img\n                  src={logoImage}\n                  alt=\"MapEstate Logo\"\n                  title=\"MapEstate - AI-Powered Real Estate Platform\"\n                  width=\"32\"\n                  height=\"32\"\n                  loading=\"eager\"\n                  className=\"h-6 w-6 sm:h-8 sm:w-8\"\n                />\n                <h1 className=\"text-sm sm:text-base md:text-lg font-semibold text-black dark:text-white company-name\">\n                  MapEstate\n                </h1>\n                <Badge\n                  variant=\"secondary\"\n                  className=\"ml-1 sm:ml-2 text-[10px] sm:text-xs inline-flex light-sweep\"\n                  style={{ backgroundColor: \"#FF7800\", color: \"#fff\" }}\n                >\n                  {mapProperties?.length || 0} {t(\"home.properties\")}\n                </Badge>\n              </div>\n              <div className=\"flex items-center gap-1 sm:gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"text-black hover:text-black dark:text-gray-300 dark:hover:text-white text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2\"\n                  data-testid=\"toggle-filters\"\n                >\n                  {showFilters ? (\n                    <X className=\"h-4 w-4\" />\n                  ) : (\n                    <Search className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {/* AI Search Bar */}\n            {showFilters && (\n              <div className=\"mb-3 sm:mb-4\">\n                <SearchBar\n                  onResults={handleSearchResults}\n                  placeholder={t(\"search.aiPlaceholder\")}\n                  className=\"w-full\"\n                />\n              </div>\n            )}\n\n            {/* Filter Controls */}\n            {showFilters && (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-2 sm:gap-3 md:gap-4 pt-3 sm:pt-4 border-t border-white/20 dark:border-white/10\">\n                {/* Listing Type */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300 flex items-center gap-1\">\n                    <Tag className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">\n                      {t(\"filter.listingType\")}\n                    </span>\n                    <span className=\"sm:hidden\">{t(\"filter.listingType\")}</span>\n                  </label>\n                  <Select\n                    value={mapFilters.listingType || \"\"}\n                    onValueChange={(value) =>\n                      handleFilterChange(\"listingType\", value)\n                    }\n                  >\n                    <SelectTrigger\n                      className=\"bg-orange-100/80 dark:bg-orange-900/80 backdrop-blur-sm border-orange-300 dark:border-orange-600 focus:border-orange-500 dark:focus:border-orange-400\"\n                      data-testid=\"listing-type-select\"\n                      style={{ borderColor: \"#FF7800\" }}\n                    >\n                      <SelectValue placeholder={t(\"filter.allTypes\")} />\n                    </SelectTrigger>\n                    <SelectContent className=\"z-[10000]\">\n                      <SelectItem value=\"all\">\n                        <span className=\"flex items-center gap-2\">\n                          <Filter\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.allTypes\")}\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"sale\">\n                        <span className=\"flex items-center gap-2\">\n                          <Tag\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.forSale\")}\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"rent\">\n                        <span className=\"flex items-center gap-2\">\n                          <Key\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.forRent\")}\n                        </span>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Property Type */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300 flex items-center gap-1\">\n                    <Home className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">\n                      {t(\"filter.propertyType\")}\n                    </span>\n                    <span className=\"sm:hidden\">\n                      {t(\"filter.propertyType\")}\n                    </span>\n                  </label>\n                  <Select\n                    value={mapFilters.type || \"\"}\n                    onValueChange={(value) => handleFilterChange(\"type\", value)}\n                  >\n                    <SelectTrigger\n                      className=\"bg-orange-100/80 dark:bg-orange-900/80 backdrop-blur-sm border-orange-300 dark:border-orange-600 focus:border-orange-500 dark:focus:border-orange-400\"\n                      data-testid=\"property-type-select\"\n                      style={{ borderColor: \"#FF7800\" }}\n                    >\n                      <SelectValue placeholder={t(\"filter.allProperties\")} />\n                    </SelectTrigger>\n                    <SelectContent className=\"z-[10000]\">\n                      <SelectItem value=\"all\">\n                        <span className=\"flex items-center gap-2\">\n                          <Home\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.allProperties\")}\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"house\">\n                        <span className=\"flex items-center gap-2\">\n                          <Home\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.house\")}\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"apartment\">\n                        <span className=\"flex items-center gap-2\">\n                          <Building\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.apartment\")}\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"villa\">\n                        <span className=\"flex items-center gap-2\">\n                          <University\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.villa\")}\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"land\">\n                        <span className=\"flex items-center gap-2\">\n                          <Mountain\n                            className=\"h-4 w-4\"\n                            style={{ color: \"#FF7800\" }}\n                          />\n                          {t(\"filter.land\")}\n                        </span>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Bedrooms */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300 flex items-center gap-1\">\n                    <Bed className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">\n                      {t(\"filter.bedrooms\")}\n                    </span>\n                    <span className=\"sm:hidden\">{t(\"filter.beds\")}</span>\n                  </label>\n                  <Select\n                    value={mapFilters.bedrooms?.toString() || \"\"}\n                    onValueChange={(value) =>\n                      handleFilterChange(\n                        \"bedrooms\",\n                        value === \"any\" || !value ? undefined : parseInt(value),\n                      )\n                    }\n                  >\n                    <SelectTrigger\n                      className=\"bg-orange-100/80 dark:bg-orange-900/80 backdrop-blur-sm border-orange-300 dark:border-orange-600 focus:border-orange-500 dark:focus:border-orange-400\"\n                      data-testid=\"bedrooms-select\"\n                      style={{ borderColor: \"#FF7800\" }}\n                    >\n                      <SelectValue placeholder={t(\"filter.any\")} />\n                    </SelectTrigger>\n                    <SelectContent className=\"z-[10000]\">\n                      <SelectItem value=\"any\">{t(\"filter.any\")}</SelectItem>\n                      <SelectItem value=\"1\">1+</SelectItem>\n                      <SelectItem value=\"2\">2+</SelectItem>\n                      <SelectItem value=\"3\">3+</SelectItem>\n                      <SelectItem value=\"4\">4+</SelectItem>\n                      <SelectItem value=\"5\">5+</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Bathrooms */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300 flex items-center gap-1\">\n                    <Bath className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">\n                      {t(\"filter.bathrooms\")}\n                    </span>\n                    <span className=\"sm:hidden\">{t(\"filter.baths\")}</span>\n                  </label>\n                  <Select\n                    value={mapFilters.bathrooms?.toString() || \"\"}\n                    onValueChange={(value) =>\n                      handleFilterChange(\n                        \"bathrooms\",\n                        value === \"any\" || !value ? undefined : parseInt(value),\n                      )\n                    }\n                  >\n                    <SelectTrigger\n                      className=\"bg-orange-100/80 dark:bg-orange-900/80 backdrop-blur-sm border-orange-300 dark:border-orange-600 focus:border-orange-500 dark:focus:border-orange-400\"\n                      data-testid=\"bathrooms-select\"\n                      style={{ borderColor: \"#FF7800\" }}\n                    >\n                      <SelectValue placeholder={t(\"filter.any\")} />\n                    </SelectTrigger>\n                    <SelectContent className=\"z-[10000]\">\n                      <SelectItem value=\"any\">{t(\"filter.any\")}</SelectItem>\n                      <SelectItem value=\"1\">1+</SelectItem>\n                      <SelectItem value=\"2\">2+</SelectItem>\n                      <SelectItem value=\"3\">3+</SelectItem>\n                      <SelectItem value=\"4\">4+</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* City */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300 flex items-center gap-1\">\n                    <MapPin className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    {t(\"filter.city\")}\n                  </label>\n                  <Input\n                    type=\"text\"\n                    placeholder={t(\"filter.cityPlaceholder\")}\n                    value={cityInput}\n                    onChange={(e) => handleCityChange(e.target.value)}\n                    className=\"bg-orange-100/80 dark:bg-orange-900/80 backdrop-blur-sm border-orange-300 dark:border-orange-600 focus:border-orange-500 dark:focus:border-orange-400\"\n                    style={{ borderColor: \"#FF7800\" }}\n                    data-testid=\"city-input\"\n                  />\n                </div>\n\n                {/* Clear Filters */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-xs sm:text-sm font-medium text-transparent\">\n                    Clear\n                  </label>\n                  <Button\n                    variant=\"outline\"\n                    onClick={clearFilters}\n                    className=\"w-full bg-orange-100/80 dark:bg-orange-900/80 backdrop-blur-sm border-orange-300 dark:border-orange-600 hover:bg-orange-200/80 dark:hover:bg-orange-800/80 focus:border-orange-500 dark:focus:border-orange-400\"\n                    style={{ borderColor: \"#FF7800\" }}\n                    data-testid=\"clear-filters\"\n                  >\n                    {t(\"filter.clearAll\")}\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Price Range Slider */}\n            {showFilters && (\n              <div className=\"mt-3 sm:mt-4 pt-3 sm:pt-4 border-t border-white/20 dark:border-white/10\">\n                <div className=\"space-y-2 sm:space-y-3\">\n                  <label className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300 flex items-center gap-1 flex-wrap\">\n                    <DollarSign className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">\n                      {t('filter.priceRangeLabel')} {currencySymbol}{priceRange[0].toLocaleString()} - {currencySymbol}\n                      {priceRange[1].toLocaleString()}\n                    </span>\n                    <span className=\"sm:hidden\">\n                      {t('filter.priceRange')}: {currencySymbol}\n                      {priceRange[0] < 1000\n                        ? priceRange[0]\n                        : priceRange[0] < 1000000\n                          ? Math.round(priceRange[0] / 1000) + \"K\"\n                          : Math.round(priceRange[0] / 1000000) + \"M\"}{\" \"}\n                      - {currencySymbol}\n                      {priceRange[1] < 1000\n                        ? priceRange[1]\n                        : priceRange[1] < 1000000\n                          ? Math.round(priceRange[1] / 1000) + \"K\"\n                          : Math.round(priceRange[1] / 1000000) + \"M\"}\n                    </span>\n                  </label>\n                  <Slider\n                    value={priceRange}\n                    onValueChange={handlePriceRangeChange}\n                    max={10000000}\n                    min={1}\n                    step={50000}\n                    className=\"w-full\"\n                    data-testid=\"price-range-slider\"\n                  />\n                  <div className=\"flex justify-between text-xs text-black dark:text-gray-400\">\n                    <span>{currencySymbol}1</span>\n                    <span>{currencySymbol}10M+</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Active Filters */}\n            {(mapFilters.listingType ||\n              mapFilters.type ||\n              mapFilters.bedrooms ||\n              mapFilters.bathrooms ||\n              mapFilters.city ||\n              mapFilters.minPrice ||\n              mapFilters.maxPrice) && (\n              <div className=\"mt-3 sm:mt-4 pt-1 sm:pt-2 border-t border-white/20 dark:border-white/10\">\n                <div className=\"flex flex-wrap items-center justify-between gap-1 sm:gap-2\">\n                  <div className=\"flex flex-wrap items-center gap-1 sm:gap-2\">\n                    <span className=\"text-xs sm:text-sm font-medium text-black dark:text-gray-300\">\n                      {t('filter.activeFilters')}\n                    </span>\n                    {mapFilters.listingType && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"text-xs\"\n                        style={{\n                          backgroundColor:\n                            mapFilters.listingType === \"sale\"\n                              ? \"#ef4444\"\n                              : \"#22c55e\",\n                          color: \"#ffffff\",\n                        }}\n                      >\n                        {mapFilters.listingType === \"sale\"\n                          ? t('filter.forSale')\n                          : t('filter.forRent')}\n                      </Badge>\n                    )}\n                    {mapFilters.type && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-xs\"\n                      >\n                        {t(`filter.${mapFilters.type}` as any) || mapFilters.type.charAt(0).toUpperCase() + mapFilters.type.slice(1)}\n                      </Badge>\n                    )}\n                    {mapFilters.bedrooms && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-xs\"\n                      >\n                        {mapFilters.bedrooms}+ {t('filter.beds')}\n                      </Badge>\n                    )}\n                    {mapFilters.bathrooms && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 text-xs\"\n                      >\n                        {mapFilters.bathrooms}+ {t('filter.baths')}\n                      </Badge>\n                    )}\n                    {mapFilters.city && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"bg-pink-100 dark:bg-pink-900 text-pink-800 dark:text-pink-200 text-xs\"\n                      >\n                        {mapFilters.city}\n                      </Badge>\n                    )}\n                    {(mapFilters.minPrice || mapFilters.maxPrice) && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200 text-xs\"\n                      >\n                        {currencySymbol}\n                        {mapFilters.minPrice\n                          ? mapFilters.minPrice.toLocaleString()\n                          : \"1\"}{\" \"}\n                        - {currencySymbol}\n                        {mapFilters.maxPrice\n                          ? mapFilters.maxPrice.toLocaleString()\n                          : \"10M+\"}\n                      </Badge>\n                    )}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() =>\n                      setMapFilters((prevFilters) => ({\n                        limit: 100,\n                        language: prevFilters.language,\n                      }))\n                    }\n                    className=\"h-6 px-2 text-xs border-red-300 dark:border-red-600 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                    data-testid=\"clear-filters-button\"\n                  >\n                    <X className=\"h-3 w-3 mr-1\" />\n                    {t('filter.clear')}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Search Results inside Map */}\n        {searchResults && (\n          <div className=\"absolute top-4 left-4 right-4 z-40 mt-64 max-h-[calc(100vh-300px)] max-h-[calc(100dvh-300px)] overflow-hidden\">\n            <Card className=\"bg-white/95 dark:bg-black/95 backdrop-blur-xl border-white/30 dark:border-white/10 shadow-2xl h-full\">\n              <CardContent className=\"p-6 h-full flex flex-col\">\n                <h2 className=\"text-xl font-bold mb-4 text-black dark:text-white\">\n                  Search Results - Find Your Perfect Property\n                </h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 overflow-y-auto flex-1\">\n                  {searchResults.results.map((property) => (\n                    <PropertyCard key={property.id} property={property} />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n","size_bytes":35563},"client/src/pages/typography-showcase.tsx":{"content":"import { TypographyShowcase } from \"@/components/typography-showcase\";\nimport { SEOHead } from \"@/components/SEOHead\";\n\nexport default function TypographyShowcasePage() {\n  return (\n    <>\n      <SEOHead \n        title=\"Typography Showcase - Responsive Design System\"\n        description=\"Comprehensive demonstration of the responsive typography system featuring fluid scaling, optimal readability, and seamless adaptation across all device sizes.\"\n      />\n      <div className=\"min-h-screen bg-background\" data-testid=\"page-typography-showcase\">\n        <TypographyShowcase />\n      </div>\n    </>\n  );\n}","size_bytes":606},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"server/routes/sitemap.ts":{"content":"import { Router } from 'express';\nimport { storage } from '../storage';\n\nconst router = Router();\n\n// Supported languages for multilingual SEO\nconst SUPPORTED_LANGUAGES = ['en', 'ar', 'kur'] as const;\ntype Language = typeof SUPPORTED_LANGUAGES[number];\n\n// Language mapping for hreflang\nconst LANGUAGE_MAPPING = {\n  en: { hreflang: 'en-US', name: 'English' },\n  ar: { hreflang: 'ar-IQ', name: 'Arabic' },\n  kur: { hreflang: 'ku-IQ', name: 'Kurdish' }\n} as const;\n\n// Static routes configuration\nconst STATIC_ROUTES = [\n  { path: '/', changefreq: 'daily', priority: 1.0 },\n  { path: '/properties', changefreq: 'hourly', priority: 0.9 },\n  { path: '/about', changefreq: 'monthly', priority: 0.5 },\n  { path: '/agents', changefreq: 'weekly', priority: 0.7 },\n  { path: '/favorites', changefreq: 'daily', priority: 0.6 },\n  { path: '/settings', changefreq: 'monthly', priority: 0.3 }\n] as const;\n\n// Helper function to normalize base URL\nfunction normalizeBaseUrl(baseUrl: string): string {\n  return baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;\n}\n\n// Helper function to get localized path\nfunction getLocalizedPath(path: string, language: Language): string {\n  let cleanPath = path.startsWith('/') ? path : `/${path}`;\n  cleanPath = cleanPath.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n  return `/${language}${cleanPath}`;\n}\n\n// Helper function to ensure absolute image URLs\nfunction ensureAbsoluteImageUrl(imageUrl: string, baseUrl: string): string {\n  if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {\n    return imageUrl;\n  }\n  if (imageUrl.startsWith('/')) {\n    return `${normalizeBaseUrl(baseUrl)}${imageUrl}`;\n  }\n  return `${normalizeBaseUrl(baseUrl)}/${imageUrl}`;\n}\n\n// Helper function to escape XML special characters\nfunction escapeXML(str: string): string {\n  if (!str) return '';\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;');\n}\n\n// Generate hreflang alternates for a given path\nfunction generateAlternates(path: string, baseUrl: string): string {\n  const alternates: string[] = [];\n  \n  SUPPORTED_LANGUAGES.forEach(lang => {\n    const localizedPath = getLocalizedPath(path, lang);\n    const hreflang = LANGUAGE_MAPPING[lang].hreflang;\n    const absoluteUrl = `${baseUrl}${localizedPath}`;\n    alternates.push(`    <xhtml:link rel=\"alternate\" hreflang=\"${hreflang}\" href=\"${escapeXML(absoluteUrl)}\"/>`);\n  });\n  \n  // Add x-default (defaulting to English)\n  const xDefaultUrl = `${baseUrl}${getLocalizedPath(path, 'en')}`;\n  alternates.push(`    <xhtml:link rel=\"alternate\" hreflang=\"x-default\" href=\"${escapeXML(xDefaultUrl)}\"/>`);\n  \n  return alternates.join('\\n');\n}\n\n// Generate robots.txt content with sitemap reference\nfunction generateRobotsTxt(baseUrl: string): string {\n  return `User-agent: *\nAllow: /\n\n# Language-specific content\nAllow: /en/\nAllow: /ar/\nAllow: /kur/\n\n# Sitemap\nSitemap: ${baseUrl}/sitemap.xml\n\n# Block admin areas\nDisallow: /admin/\nDisallow: /api/\n\n# Block temporary files\nDisallow: /*.tmp$\nDisallow: /*.temp$\n\n# Allow search engines to index language-specific pages\nCrawl-delay: 1`;\n}\n\nrouter.get('/sitemap.xml', async (req, res) => {\n  try {\n    const rawBaseUrl = process.env.BASE_URL || `${req.protocol}://${req.get('host')}`;\n    const baseUrl = normalizeBaseUrl(rawBaseUrl);\n    const currentDate = new Date().toISOString().split('T')[0];\n    \n    // Get all properties for sitemap\n    const properties = await storage.getProperties({ limit: 1000 });\n    \n    const urlEntries: string[] = [];\n    \n    // Generate entries for static routes in all languages\n    STATIC_ROUTES.forEach(route => {\n      SUPPORTED_LANGUAGES.forEach(lang => {\n        const localizedPath = getLocalizedPath(route.path, lang);\n        const alternates = generateAlternates(route.path, baseUrl);\n        const absoluteUrl = `${baseUrl}${localizedPath}`;\n        \n        urlEntries.push(`  <url>\n    <loc>${escapeXML(absoluteUrl)}</loc>\n    <lastmod>${currentDate}</lastmod>\n    <changefreq>${route.changefreq}</changefreq>\n    <priority>${route.priority}</priority>\n${alternates}\n  </url>`);\n      });\n    });\n    \n    // Generate entries for property pages in all languages\n    properties.forEach(property => {\n      const identifier = property.slug || property.id;\n      const encodedIdentifier = encodeURIComponent(identifier);\n      const propertyPath = `/property/${encodedIdentifier}`;\n      const lastmod = property.updatedAt ? new Date(property.updatedAt).toISOString().split('T')[0] : currentDate;\n      \n      SUPPORTED_LANGUAGES.forEach(lang => {\n        const localizedPath = getLocalizedPath(propertyPath, lang);\n        const alternates = generateAlternates(propertyPath, baseUrl);\n        const absoluteUrl = `${baseUrl}${localizedPath}`;\n        \n        // Add image sitemap data if property has images\n        const imageData = property.images && property.images.length > 0 ? `\n    <image:image>\n      <image:loc>${escapeXML(ensureAbsoluteImageUrl(property.images[0].imageUrl, baseUrl))}</image:loc>\n      <image:title>${escapeXML(property.title)}</image:title>\n      <image:caption>${escapeXML(property.description || property.title)}</image:caption>\n    </image:image>` : '';\n        \n        urlEntries.push(`  <url>\n    <loc>${escapeXML(absoluteUrl)}</loc>\n    <lastmod>${lastmod}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.8</priority>\n${alternates}${imageData}\n  </url>`);\n      });\n    });\n    \n    const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n        xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\n        xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\">\n${urlEntries.join('\\n')}\n</urlset>`;\n\n    res.set('Content-Type', 'application/xml');\n    res.send(sitemap);\n  } catch (error) {\n    console.error('Error generating sitemap:', error);\n    res.status(500).send('Error generating sitemap');\n  }\n});\n\n// Robots.txt endpoint\nrouter.get('/robots.txt', async (req, res) => {\n  try {\n    const rawBaseUrl = process.env.BASE_URL || `${req.protocol}://${req.get('host')}`;\n    const baseUrl = normalizeBaseUrl(rawBaseUrl);\n    const robotsContent = generateRobotsTxt(baseUrl);\n    \n    res.set('Content-Type', 'text/plain');\n    res.send(robotsContent);\n  } catch (error) {\n    console.error('Error generating robots.txt:', error);\n    res.status(500).send('Error generating robots.txt');\n  }\n});\n\nexport default router;","size_bytes":6506},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/hooks/useNetworkError.ts":{"content":"import { useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useNetworkStatus } from './useNetworkStatus';\n\nexport function useNetworkError() {\n  const { toast } = useToast();\n  const { isOnline, isSlowConnection } = useNetworkStatus();\n\n  useEffect(() => {\n    const handleFetchError = (event: Event) => {\n      const error = (event as any).reason || (event as any).error;\n      \n      if (!isOnline) {\n        toast({\n          title: 'Connection Lost',\n          description: 'Please check your internet connection and try again.',\n          variant: 'destructive',\n        });\n      } else if (isSlowConnection && error?.name === 'TimeoutError') {\n        toast({\n          title: 'Slow Connection',\n          description: 'Request timed out. Your connection appears to be slow.',\n          variant: 'destructive',\n        });\n      } else if (error?.message?.includes('fetch')) {\n        toast({\n          title: 'Network Error',\n          description: 'Failed to connect to server. Please try again.',\n          variant: 'destructive',\n        });\n      }\n    };\n\n    // Listen for unhandled promise rejections (common with fetch failures)\n    window.addEventListener('unhandledrejection', handleFetchError);\n\n    return () => {\n      window.removeEventListener('unhandledrejection', handleFetchError);\n    };\n  }, [isOnline, isSlowConnection, toast]);\n}","size_bytes":1389},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/components/AuthProvider\";\nimport { NetworkStatus } from \"@/components/NetworkStatus\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport { CurrencyProvider } from \"@/lib/currency-context\";\nimport { useNetworkError } from \"@/hooks/useNetworkError\";\nimport { Suspense, lazy, useState, useEffect } from \"react\";\nimport { LoadingSpinner } from \"@/components/LoadingSpinner\";\nimport { useLanguage, detectLanguageFromUrl, detectLanguageFromUrlEnhanced, redirectToLanguage, redirectToLanguageEnhanced, detectBrowserLanguage, globalChangeLanguage, type Language } from \"@/lib/i18n\";\nimport { Redirect } from \"@/components/Redirect\";\n\n// Lazy load page components for better performance\nconst Home = lazy(() => import(\"@/pages/home.tsx\"));\nconst Properties = lazy(() => import(\"@/pages/properties.tsx\"));\nconst PropertyDetail = lazy(() => import(\"@/pages/property-detail.tsx\"));\nconst Favorites = lazy(() => import(\"@/pages/favorites.tsx\"));\nconst Settings = lazy(() => import(\"@/pages/settings.tsx\"));\nconst CustomerDashboard = lazy(() => import(\"@/pages/customer-dashboard\"));\nconst AdminLogin = lazy(() => import(\"@/pages/admin-login.tsx\"));\nconst AdminDashboard = lazy(() => import(\"@/pages/admin-dashboard\"));\nconst ClientLocationTracking = lazy(() => import(\"@/pages/client-location-tracking\"));\nconst DashboardRedirect = lazy(() => import(\"@/pages/dashboard-redirect.tsx\"));\nconst AboutPage = lazy(() => import(\"@/pages/about.tsx\"));\nconst TypographyShowcasePage = lazy(() => import(\"@/pages/typography-showcase.tsx\"));\nconst NotFound = lazy(() => import(\"@/pages/not-found.tsx\"));\n\nfunction Router() {\n  useNetworkError(); // Hook to handle network errors globally\n  const [location, setLocation] = useLocation();\n  const { language } = useLanguage();\n\n  // Enhanced language detection and redirect effect\n  useEffect(() => {\n    // Get full URL including query parameters\n    const fullUrl = window.location.href;\n    const { language: detectedLang, source } = detectLanguageFromUrlEnhanced(fullUrl);\n    \n    // If language found in URL\n    if (detectedLang) {\n      // If it's from query parameter, convert to path-based URL for SEO\n      if (source === 'query') {\n        redirectToLanguageEnhanced(fullUrl, setLocation, true);\n        return;\n      }\n      \n      // If URL language differs from current language, update language\n      if (detectedLang !== language) {\n        globalChangeLanguage(detectedLang);\n      }\n    } else {\n      // No language detected, use browser language and redirect\n      const browserLang = detectBrowserLanguage();\n      redirectToLanguage(browserLang, location, setLocation);\n    }\n  }, [location, language, setLocation]);\n\n  return (\n    <Suspense fallback={<LoadingSpinner />}>\n      <Switch>\n        {/* Language-prefixed routes */}\n        <Route path=\"/:lang/\" component={Home} />\n        <Route path=\"/:lang\" component={() => <Redirect to=\"/\" />} />\n        <Route path=\"/:lang/properties\" component={Properties} />\n        <Route path=\"/:lang/property/:id\" component={PropertyDetail} />\n        <Route path=\"/:lang/favorites\" component={Favorites} />\n        <Route path=\"/:lang/settings\" component={Settings} />\n        <Route path=\"/:lang/dashboard\" component={DashboardRedirect} />\n        <Route path=\"/:lang/customer/dashboard\" component={CustomerDashboard} />\n        <Route path=\"/:lang/admin/login\" component={AdminLogin} />\n        <Route path=\"/:lang/admin/dashboard\" component={AdminDashboard} />\n        <Route path=\"/:lang/admin/client-locations\" component={ClientLocationTracking} />\n        <Route path=\"/:lang/about\" component={AboutPage} />\n        <Route path=\"/:lang/typography\" component={TypographyShowcasePage} />\n        \n        {/* Legacy routes without language prefix - redirect */}\n        <Route path=\"/\" component={() => <Redirect to=\"/\" />} />\n        <Route path=\"/properties\" component={() => <Redirect to=\"/properties\" />} />\n        <Route path=\"/property/:id\" component={({ params }) => <Redirect to={`/property/${params?.id}`} />} />\n        <Route path=\"/favorites\" component={() => <Redirect to=\"/favorites\" />} />\n        <Route path=\"/settings\" component={() => <Redirect to=\"/settings\" />} />\n        <Route path=\"/dashboard\" component={() => <Redirect to=\"/dashboard\" />} />\n        <Route path=\"/customer/dashboard\" component={() => <Redirect to=\"/customer/dashboard\" />} />\n        <Route path=\"/admin/login\" component={() => <Redirect to=\"/admin/login\" />} />\n        <Route path=\"/admin/dashboard\" component={() => <Redirect to=\"/admin/dashboard\" />} />\n        <Route path=\"/about\" component={() => <Redirect to=\"/about\" />} />\n        <Route path=\"/typography\" component={() => <Redirect to=\"/en/typography\" />} />\n        \n        {/* Fallback to 404 */}\n        <Route component={NotFound} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <CurrencyProvider>\n          <AuthProvider>\n            <TooltipProvider>\n              <NetworkStatus />\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </AuthProvider>\n        </CurrencyProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":5577},"client/src/hooks/useNetworkStatus.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport interface NetworkStatus {\n  isOnline: boolean;\n  isSlowConnection: boolean;\n  connectionType: string;\n  downlink?: number;\n  rtt?: number;\n}\n\nexport function useNetworkStatus(): NetworkStatus {\n  const [networkStatus, setNetworkStatus] = useState<NetworkStatus>({\n    isOnline: navigator.onLine,\n    isSlowConnection: false,\n    connectionType: 'unknown',\n    downlink: undefined,\n    rtt: undefined,\n  });\n\n  useEffect(() => {\n    const updateNetworkStatus = () => {\n      const isOnline = navigator.onLine;\n      let isSlowConnection = false;\n      let connectionType = 'unknown';\n      let downlink: number | undefined;\n      let rtt: number | undefined;\n\n      // Check network connection details if available\n      if ('connection' in navigator) {\n        const connection = (navigator as any).connection;\n        connectionType = connection.effectiveType || connection.type || 'unknown';\n        downlink = connection.downlink;\n        rtt = connection.rtt;\n\n        // Consider connection slow if:\n        // - effective type is 'slow-2g' or '2g'\n        // - downlink is less than 1.5 Mbps\n        // - round trip time is greater than 400ms\n        isSlowConnection = \n          connectionType === 'slow-2g' || \n          connectionType === '2g' ||\n          (downlink && downlink < 1.5) ||\n          (rtt && rtt > 400);\n      }\n\n      setNetworkStatus({\n        isOnline,\n        isSlowConnection,\n        connectionType,\n        downlink,\n        rtt,\n      });\n    };\n\n    // Initial check\n    updateNetworkStatus();\n\n    // Add event listeners\n    window.addEventListener('online', updateNetworkStatus);\n    window.addEventListener('offline', updateNetworkStatus);\n\n    // Listen for connection changes (if supported)\n    if ('connection' in navigator) {\n      (navigator as any).connection.addEventListener('change', updateNetworkStatus);\n    }\n\n    return () => {\n      window.removeEventListener('online', updateNetworkStatus);\n      window.removeEventListener('offline', updateNetworkStatus);\n      if ('connection' in navigator) {\n        (navigator as any).connection.removeEventListener('change', updateNetworkStatus);\n      }\n    };\n  }, []);\n\n  return networkStatus;\n}","size_bytes":2242},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: string | string[];\n  fallbackPath?: string;\n}\n\nexport function ProtectedRoute({ \n  children, \n  requiredRole, \n  fallbackPath = '/admin/login' \n}: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!user) {\n        navigate(fallbackPath);\n        return;\n      }\n\n      if (requiredRole) {\n        const roles = Array.isArray(requiredRole) ? requiredRole : [requiredRole];\n        if (!roles.includes(user.role)) {\n          toast({\n            title: 'Access Denied',\n            description: 'You do not have permission to access this page.',\n            variant: 'destructive',\n          });\n          \n          // Redirect based on user role\n          if (user.role === 'admin' || user.role === 'super_admin') {\n            navigate('/admin/dashboard');\n          } else if (user.role === 'agent') {\n            navigate('/agent/dashboard');\n          } else {\n            navigate('/customer/dashboard');\n          }\n          return;\n        }\n      }\n    }\n  }, [user, isLoading, requiredRole, navigate, toast, fallbackPath]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (requiredRole) {\n    const roles = Array.isArray(requiredRole) ? requiredRole : [requiredRole];\n    if (!roles.includes(user.role)) {\n      return null;\n    }\n  }\n\n  return <>{children}</>;\n}","size_bytes":1885},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/NetworkStatus.tsx":{"content":"import { useNetworkStatus } from '@/hooks/useNetworkStatus';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { WifiOff } from 'lucide-react';\n\nexport function NetworkStatus() {\n  const { isOnline } = useNetworkStatus();\n\n  if (isOnline) {\n    return null; // Don't show anything when connection is good\n  }\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 z-50\">\n      {!isOnline && (\n        <Alert className=\"rounded-none border-0 bg-red-600 text-white border-b border-red-700\">\n          <WifiOff className=\"h-4 w-4\" />\n          <AlertDescription className=\"font-medium\">\n            You're offline. Some features may not work until you reconnect.\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}","size_bytes":759},"client/src/components/currency-selector.tsx":{"content":"import { useCurrency } from \"@/lib/currency-context\";\nimport { Check, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { SUPPORTED_CURRENCIES, SupportedCurrency } from \"@/lib/currency\";\n\ninterface CurrencySelectorProps {\n  onCurrencyChange?: (currency: SupportedCurrency) => void;\n  className?: string;\n}\n\nexport function CurrencySelector({ onCurrencyChange, className }: CurrencySelectorProps) {\n  const { preferredCurrency, setPreferredCurrency } = useCurrency();\n\n  const handleCurrencyChange = (currency: SupportedCurrency) => {\n    setPreferredCurrency(currency);\n    onCurrencyChange?.(currency);\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={`justify-between min-w-[120px] ${className}`}\n          data-testid=\"currency-selector\"\n        >\n          <span className=\"flex items-center gap-2\">\n            <span className=\"font-medium\">\n              {SUPPORTED_CURRENCIES[preferredCurrency].symbol}\n            </span>\n            <span className=\"text-sm text-muted-foreground\">\n              {preferredCurrency}\n            </span>\n          </span>\n          <ChevronDown className=\"h-4 w-4 opacity-50\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[200px]\">\n        {Object.entries(SUPPORTED_CURRENCIES).map(([code, info]) => (\n          <DropdownMenuItem\n            key={code}\n            onClick={() => handleCurrencyChange(code as SupportedCurrency)}\n            className=\"flex items-center justify-between cursor-pointer\"\n            data-testid={`currency-option-${code.toLowerCase()}`}\n          >\n            <div className=\"flex items-center gap-3\">\n              <span className=\"font-medium w-8\">{info.symbol}</span>\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-medium\">{code}</span>\n                <span className=\"text-xs text-muted-foreground\">{info.name}</span>\n              </div>\n            </div>\n            {preferredCurrency === code && (\n              <Check className=\"h-4 w-4 text-primary\" />\n            )}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2411},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport compression from \"compression\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite.local\";\nimport { performanceLogger, requestSizeMonitor } from \"./middleware/performance\";\nimport { StorageFactory } from \"./storageFactory\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst app = express();\n\n// Trust proxy for correct protocol detection behind reverse proxies\n// Only trust first proxy for security (Replit's proxy)\napp.set('trust proxy', 1);\n\n// Enable gzip compression for all responses\napp.use(compression({\n  // Compress responses larger than 1kb\n  threshold: 1024,\n  // Set compression level (6 is good balance of speed/compression)\n  level: 6,\n  // Compress these MIME types\n  filter: (req, res) => {\n    // Don't compress responses if the client doesn't support it\n    if (req.headers['x-no-compression']) {\n      return false;\n    }\n    // Use compression filter\n    return compression.filter(req, res);\n  }\n}));\n\napp.use(express.json({ limit: '10mb' })); // Increased limit for image uploads\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// Add request size monitoring\napp.use(requestSizeMonitor(10)); // 10MB limit with warnings\n\n// Use enhanced performance logging\napp.use(performanceLogger);\n\n// Social media and search engine bot detection middleware for property pages\nfunction isCrawlerBot(userAgent: string): boolean {\n  const botPatterns = [\n    // Social media bots\n    'facebookexternalhit',\n    'twitterbot',\n    'linkedinbot',\n    'whatsapp',\n    'skypeuripreview',\n    'discordbot',\n    'slackbot',\n    'telegrambot',\n    // Search engine bots\n    'googlebot',\n    'bingbot',\n    'yandexbot',\n    'baiduspider',\n    'duckduckbot'\n  ];\n  \n  const lowerUserAgent = userAgent.toLowerCase();\n  return botPatterns.some(pattern => lowerUserAgent.includes(pattern));\n}\n\n// Cache HTML template in memory for performance\nlet htmlTemplate: string | null = null;\nlet storage: any = null; // Storage instance for middleware\n\nfunction escapeHtml(text: string): string {\n  const map: { [key: string]: string } = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n  return text.replace(/[&<>\"']/g, (m) => map[m]);\n}\n\nasync function injectPropertyMetaTags(req: Request, res: Response, next: NextFunction) {\n  // Skip if storage is not initialized yet\n  if (!storage) {\n    return next();\n  }\n  // Match both legacy and language-prefixed property URLs\n  const propertyMatch = req.path.match(/^(?:\\/(en|ar|kur))?\\/property\\/(.+)$/);\n  \n  if (!propertyMatch) {\n    return next();\n  }\n  \n  const userAgent = req.get('User-Agent') || '';\n  \n  // Only inject for crawler bots (social media and search engines) to avoid affecting normal users\n  if (!isCrawlerBot(userAgent)) {\n    return next();\n  }\n  \n  const propertyId = propertyMatch[2]; // Extract property ID from second capture group\n  \n  try {\n    // Try to get property by slug first, then by ID (similar to API route logic)\n    let property = await storage.getPropertyBySlug(propertyId);\n    \n    if (!property) {\n      console.log(`🔄 Slug lookup failed for social crawler, trying ID lookup for: ${propertyId}`);\n      property = await storage.getProperty(propertyId);\n    }\n    \n    if (!property) {\n      console.log(`❌ Property not found for social crawler with slug or ID: ${propertyId}`);\n      return next();\n    }\n    \n    // Load HTML template if not cached\n    if (!htmlTemplate) {\n      const htmlPath = path.join(process.cwd(), 'client', 'index.html');\n      htmlTemplate = fs.readFileSync(htmlPath, 'utf-8');\n    }\n    \n    let html = htmlTemplate;\n    \n    // Generate property-specific meta tags with HTML escaping\n    const formatPrice = (price: string, currency: string, listingType: string) => {\n      const amount = parseFloat(price);\n      const formattedAmount = new Intl.NumberFormat().format(amount);\n      const suffix = listingType === 'rent' ? '/mo' : '';\n      return `${currency === 'USD' ? '$' : currency}${formattedAmount}${suffix}`;\n    };\n    \n    // Use HTTPS for production URLs\n    const protocol = req.get('X-Forwarded-Proto') || req.protocol || 'https';\n    \n    const propertyTitle = escapeHtml(`${property.title} - ${formatPrice(property.price, property.currency || 'USD', property.listingType)} | MapEstate`);\n    const propertyDescription = escapeHtml(`${property.description || `${property.bedrooms} bedroom ${property.type} for ${property.listingType} in ${property.city}, ${property.country}.`} View details, photos, and contact information.`);\n    \n    // Handle property images - can be array of strings or array of objects with imageUrl\n    const firstImage = property.images && property.images.length > 0 ? property.images[0] : null;\n    let propertyImage = `${protocol}://${req.get('host')}/logo_1757848527935.png`;\n    \n    if (firstImage) {\n      // Check if it's an object with imageUrl property or just a string\n      const imageUrl = typeof firstImage === 'object' && firstImage.imageUrl ? firstImage.imageUrl : firstImage;\n      propertyImage = imageUrl.startsWith('http') ? imageUrl : `${protocol}://${req.get('host')}${imageUrl}`;\n    }\n    // Generate property URL with language prefix if present\n    const language = propertyMatch[1] || 'en';\n    const languagePrefix = language !== 'en' ? `/${language}` : '';\n    const propertyUrl = `${protocol}://${req.get('host')}${languagePrefix}/property/${property.slug || property.id}`;\n    const secureImageUrl = propertyImage.replace('http://', 'https://');\n    \n    // Map language to OG locale\n    const localeMap: { [key: string]: string } = {\n      'en': 'en_US',\n      'ar': 'ar_IQ',\n      'kur': 'ckb_IQ'  // Kurdish Sorani\n    };\n    const ogLocale = localeMap[language] || 'en_US';\n    \n    // Get alternate locales and generate hreflang links\n    const allLanguages = ['en', 'ar', 'kur'];\n    const hreflangMap: { [key: string]: string } = {\n      'en': 'en',\n      'ar': 'ar-IQ',\n      'kur': 'ku-IQ'  // Kurdish Sorani - ISO 639-1 compliant\n    };\n    const alternateLocales = allLanguages\n      .filter(lang => lang !== language)\n      .map(lang => localeMap[lang]);\n    \n    const hreflangLinks = allLanguages\n      .map(lang => {\n        const prefix = lang !== 'en' ? `/${lang}` : '';\n        const url = `${protocol}://${req.get('host')}${prefix}/property/${property.slug || property.id}`;\n        return `<link rel=\"alternate\" hreflang=\"${hreflangMap[lang]}\" href=\"${url}\" />`;\n      })\n      .join('\\n    ') + '\\n    ' + `<link rel=\"alternate\" hreflang=\"x-default\" href=\"${protocol}://${req.get('host')}/property/${property.slug || property.id}\" />`;\n    \n    // Build comprehensive meta tags for social media\n    const socialMetaTags = `\n    <!-- Property-specific meta tags for social media crawlers -->\n    <title>${propertyTitle}</title>\n    <meta name=\"title\" content=\"${propertyTitle}\" />\n    <meta name=\"description\" content=\"${propertyDescription}\" />\n    <link rel=\"canonical\" href=\"${propertyUrl}\" />\n    ${hreflangLinks}\n    \n    <!-- Open Graph / Facebook / LinkedIn -->\n    <meta property=\"og:type\" content=\"product\" />\n    <meta property=\"og:title\" content=\"${propertyTitle}\" />\n    <meta property=\"og:description\" content=\"${propertyDescription}\" />\n    <meta property=\"og:image\" content=\"${propertyImage}\" />\n    <meta property=\"og:image:secure_url\" content=\"${secureImageUrl}\" />\n    <meta property=\"og:image:width\" content=\"1200\" />\n    <meta property=\"og:image:height\" content=\"630\" />\n    <meta property=\"og:image:alt\" content=\"${escapeHtml(property.title)}\" />\n    <meta property=\"og:url\" content=\"${propertyUrl}\" />\n    <meta property=\"og:site_name\" content=\"MapEstate\" />\n    <meta property=\"og:locale\" content=\"${ogLocale}\" />\n    ${alternateLocales.map(locale => `<meta property=\"og:locale:alternate\" content=\"${locale}\" />`).join('\\n    ')}\n    \n    <!-- Twitter Card -->\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta name=\"twitter:title\" content=\"${propertyTitle}\" />\n    <meta name=\"twitter:description\" content=\"${propertyDescription}\" />\n    <meta name=\"twitter:image\" content=\"${propertyImage}\" />\n    <meta name=\"twitter:image:alt\" content=\"${escapeHtml(property.title)}\" />\n    <meta name=\"twitter:site\" content=\"@MapEstate\" />\n    <meta name=\"twitter:creator\" content=\"@MapEstate\" />\n    \n    <!-- Additional meta tags -->\n    <meta name=\"robots\" content=\"index, follow\" />\n    <meta name=\"author\" content=\"MapEstate\" />\n    `;\n    \n    // Property-specific structured data\n    const structuredData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Product\",\n      \"name\": property.title,\n      \"description\": property.description || `${property.bedrooms} bedroom ${property.type} in ${property.city}`,\n      \"image\": propertyImage,\n      \"url\": propertyUrl,\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": property.price,\n        \"priceCurrency\": property.currency || \"USD\",\n        \"availability\": \"https://schema.org/InStock\",\n        \"seller\": {\n          \"@type\": \"Organization\",\n          \"name\": \"MapEstate\"\n        }\n      },\n      \"category\": property.type,\n      \"location\": {\n        \"@type\": \"Place\",\n        \"address\": {\n          \"@type\": \"PostalAddress\",\n          \"streetAddress\": property.address,\n          \"addressLocality\": property.city,\n          \"addressCountry\": property.country\n        },\n        \"geo\": {\n          \"@type\": \"GeoCoordinates\",\n          \"latitude\": property.latitude,\n          \"longitude\": property.longitude\n        }\n      }\n    };\n    \n    // Safely embed JSON-LD to prevent script tag termination\n    const jsonLd = JSON.stringify(structuredData, null, 6).replace(/<\\/script>/gi, '<\\\\/script>');\n    const structuredDataScript = `\\n    <script type=\"application/ld+json\">\\n${jsonLd}\\n    </script>\\n`;\n    \n    // Remove default Open Graph and Twitter meta tags from index.html to avoid duplicates\n    // Social media crawlers use the FIRST occurrence of meta tags\n    html = html.replace(/<meta property=\"og:type\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:url\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:title\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:description\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:image\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:image:width\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:image:height\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:site_name\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"og:locale\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"twitter:card\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"twitter:url\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"twitter:title\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"twitter:description\"[^>]*>/g, '');\n    html = html.replace(/<meta property=\"twitter:image\"[^>]*>/g, '');\n    html = html.replace(/<meta name=\"title\"[^>]*>/g, '');\n    html = html.replace(/<meta name=\"description\"[^>]*>/g, '');\n    html = html.replace(/<link rel=\"canonical\"[^>]*>/g, '');\n    html = html.replace(/<title>.*?<\\/title>/g, '');\n    \n    // Remove default structured data script\n    html = html.replace(/<script type=\"application\\/ld\\+json\">[\\s\\S]*?<\\/script>/g, '');\n    \n    // Inject property-specific tags before </head> tag\n    html = html.replace('</head>', `${socialMetaTags}${structuredDataScript}  </head>`);\n    \n    res.setHeader('Content-Type', 'text/html');\n    res.send(html);\n    \n  } catch (error) {\n    console.error('Error injecting property meta tags:', error);\n    next();\n  }\n}\n\napp.use(injectPropertyMetaTags);\n\n(async () => {\n  // Initialize storage (with automatic MySQL/MemStorage detection)\n  storage = await StorageFactory.getStorage();\n\n  // Fix existing users' language permissions on startup\n  try {\n    console.log('🔧 Running startup fix for user language permissions...');\n    if (typeof storage.fixExistingUsersLanguagePermissions === 'function') {\n      await storage.fixExistingUsersLanguagePermissions();\n    }\n  } catch (error) {\n    console.warn('⚠️ Failed to run startup language permissions fix:', error);\n  }\n\n  const server = await registerRoutes(app, storage);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Default to 5000 for Replit compatibility\n  // this serves both the API and the client.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  // Use the specified port (5000 for Replit)\n  const actualPort = port;\n  \n  // Use 0.0.0.0 on Replit, localhost on local Mac/Windows\n  // macOS doesn't support 0.0.0.0 binding in some Node versions\n  const host = process.env.REPL_ID ? \"0.0.0.0\" : \"localhost\";\n  \n  server.listen({\n    port: actualPort,\n    host: host,\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${actualPort}`);\n  });\n})();\n","size_bytes":13527},"client/src/components/AuthProvider.tsx":{"content":"import { ReactNode } from 'react';\nimport { useAuthProvider, AuthContext_Export } from '@/hooks/useAuth';\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const auth = useAuthProvider();\n  \n  return (\n    <AuthContext_Export.Provider value={auth}>\n      {children}\n    </AuthContext_Export.Provider>\n  );\n}","size_bytes":380},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/image-upload.tsx":{"content":"import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Upload, X, Image as ImageIcon, AlertCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ImageUploadProps {\n  value: string[];\n  onChange: (images: string[]) => void;\n  maxFiles?: number;\n  maxSize?: number; // in MB\n  className?: string;\n}\n\nexport default function ImageUpload({ \n  value = [], \n  onChange, \n  maxFiles = 10, \n  maxSize = 5,\n  className = '' \n}: ImageUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const { toast } = useToast();\n\n  const uploadToServer = async (file: File): Promise<string> => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await fetch('/api/upload/properties', {\n      method: 'POST',\n      body: formData,\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || 'Upload failed');\n    }\n\n    const result = await response.json();\n    return result.url; // Returns the server path like /uploads/properties/filename.jpg\n  };\n\n  const validateFile = (file: File): boolean => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please upload only image files (JPG, PNG, GIF, etc.)',\n        variant: 'destructive',\n      });\n      return false;\n    }\n\n    if (file.size > maxSize * 1024 * 1024) {\n      toast({\n        title: 'File too large',\n        description: `Please upload images smaller than ${maxSize}MB`,\n        variant: 'destructive',\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleFileUpload = useCallback(async (files: FileList) => {\n    if (value.length + files.length > maxFiles) {\n      toast({\n        title: 'Too many files',\n        description: `You can upload maximum ${maxFiles} images`,\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setUploading(true);\n    const newImages: string[] = [];\n\n    try {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (validateFile(file)) {\n          try {\n            const serverUrl = await uploadToServer(file);\n            newImages.push(serverUrl);\n          } catch (uploadError) {\n            console.error('Failed to upload file:', file.name, uploadError);\n            toast({\n              title: 'Upload failed',\n              description: `Failed to upload ${file.name}. Please try again.`,\n              variant: 'destructive',\n            });\n          }\n        }\n      }\n\n      if (newImages.length > 0) {\n        onChange([...value, ...newImages]);\n        toast({\n          title: 'Images uploaded',\n          description: `Successfully uploaded ${newImages.length} image(s) to server`,\n        });\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: 'Upload failed',\n        description: 'Failed to process some images. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setUploading(false);\n    }\n  }, [value, onChange, maxFiles, maxSize, toast]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileUpload(files);\n    }\n  }, [handleFileUpload]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileUpload(files);\n    }\n    e.target.value = ''; // Reset input\n  }, [handleFileUpload]);\n\n  const removeImage = useCallback((index: number) => {\n    const newImages = [...value];\n    newImages.splice(index, 1);\n    onChange(newImages);\n    toast({\n      title: 'Image removed',\n      description: 'Image has been removed from the list',\n    });\n  }, [value, onChange, toast]);\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Upload Area */}\n      <Card \n        className={`relative border-2 border-dashed transition-colors ${\n          isDragging \n            ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n            : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'\n        }`}\n      >\n        <CardContent \n          className=\"p-8 text-center cursor-pointer\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={() => document.getElementById('file-input')?.click()}\n        >\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            multiple\n            accept=\"image/*\"\n            className=\"hidden\"\n            onChange={handleFileInput}\n            disabled={uploading || value.length >= maxFiles}\n          />\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-center\">\n              {uploading ? (\n                <div className=\"animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full\" />\n              ) : (\n                <Upload className={`h-8 w-8 ${isDragging ? 'text-blue-500' : 'text-gray-400'}`} />\n              )}\n            </div>\n            \n            <div>\n              <p className=\"text-lg font-medium\">\n                {uploading ? 'Uploading images...' : 'Upload Property Images'}\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Drag & drop images here, or click to select files\n              </p>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Supports JPG, PNG, WebP up to {maxSize}MB each. Maximum {maxFiles} images.\n              </p>\n            </div>\n            \n            {value.length > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {value.length}/{maxFiles} images uploaded\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Image Previews */}\n      {value.length > 0 && (\n        <div>\n          <h4 className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n            <ImageIcon className=\"h-4 w-4\" />\n            Uploaded Images ({value.length})\n          </h4>\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n            {value.map((image, index) => (\n              <Card key={index} className=\"relative group overflow-hidden\">\n                <CardContent className=\"p-2\">\n                  <div className=\"relative aspect-square\">\n                    <img\n                      src={image}\n                      alt={`Property image ${index + 1}`}\n                      className=\"w-full h-full object-cover rounded-md\"\n                      loading=\"lazy\"\n                      decoding=\"async\"\n                    />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"icon\"\n                      className=\"absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeImage(index);\n                      }}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                    <Badge \n                      variant=\"secondary\" \n                      className=\"absolute bottom-1 left-1 text-xs px-1 py-0\"\n                    >\n                      #{index + 1}\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Upload Limits Info */}\n      {value.length === 0 && (\n        <div className=\"flex items-center gap-2 text-xs text-muted-foreground bg-muted/50 p-3 rounded-lg\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <span>\n            Add multiple high-quality images to showcase your property. The first image will be used as the main photo.\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8585},"client/src/pages/favorites.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEOHead } from \"@/components/SEOHead\";\nimport { useFavorites, useProperties } from \"@/hooks/use-properties\";\nimport { useLocalFavorites } from \"@/hooks/use-local-favorites\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { ArrowLeft, Heart, Home as HomeIcon } from \"lucide-react\";\nimport type { Property } from \"@/types\";\n\nexport default function FavoritesPage() {\n  const { user } = useAuth();\n  const userId = user?.id;\n  const { data: serverFavorites, isLoading: serverLoading, error: serverError } = useFavorites(userId);\n  const { data: allProperties, isLoading: propertiesLoading } = useProperties();\n  const localFavorites = useLocalFavorites();\n  const [, setLocation] = useLocation();\n  const { t } = useTranslation();\n\n  // Determine which favorites to show\n  const favorites = userId \n    ? serverFavorites \n    : allProperties?.filter(property => localFavorites.isFavorite(property.id)) || [];\n  \n  const isLoading = userId ? serverLoading : propertiesLoading;\n  const error = userId ? serverError : null;\n\n  const handleMapClick = (property: Property) => {\n    // Navigate to home page with property ID to show on map\n    setLocation(`/?showProperty=${property.id}`);\n  };\n\n  // Generate favorites page structured data\n  const getFavoritesStructuredData = () => {\n    const totalFavorites = favorites?.length || 0;\n    \n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"CollectionPage\",\n      \"name\": t('favorites.structuredDataName'),\n      \"description\": `View your ${totalFavorites} ${t('favorites.structuredDataDescription')}`,\n      \"numberOfItems\": totalFavorites,\n      \"isPartOf\": {\n        \"@type\": \"WebSite\",\n        \"name\": \"MapEstate\",\n        \"url\": window.location.origin\n      }\n    };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-orange-100 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex justify-center items-center min-h-[400px]\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p className=\"text-muted-foreground\">{t('favorites.loadingFavorites')}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-orange-100 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-red-600 dark:text-red-400\">{t('favorites.errorLoading')}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-900\">\n      <SEOHead\n        pageType=\"favorites\"\n        ogImage={`/uploads/properties/1759082074149-xrejrtvx6.jpg`}\n        structuredData={getFavoritesStructuredData()}\n        breadcrumbs={[\n          { name: 'Home', url: '/' },\n          { name: 'Favorites', url: '/favorites' }\n        ]}\n      />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-2\" data-testid=\"back-to-home\">\n                <ArrowLeft className=\"h-4 w-4\" />\n                {t('property.backToHome')}\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Favorites List */}\n        {!favorites || favorites.length === 0 ? (\n          <Card className=\"bg-white/20 dark:bg-black/20 backdrop-blur-xl border-white/30 dark:border-white/10\">\n            <CardContent className=\"py-16 text-center\">\n              <div className=\"text-center\" style={{ textAlign: 'center' }}>\n                <Heart className=\"h-16 w-16 text-gray-300 dark:text-gray-600 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\" style={{ textAlign: 'center' }}>{t('favorites.noFavoritesYet')}</h3>\n                <p className=\"text-muted-foreground mb-6\" style={{ textAlign: 'center' }}>\n                  {t('favorites.noFavoritesDescription')}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 2xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8\">\n              {favorites.map((property) => (\n                <PropertyCard \n                  key={property.id} \n                  property={property} \n                  userId={userId} \n                  showMapButton={true}\n                  onMapClick={handleMapClick}\n                />\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5273},"client/src/components/SEOHead.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useLanguage, useTranslation, getLocalizedPath, detectLanguageFromUrl, detectLanguageFromUrlEnhanced, getLanguageInfo, LANGUAGE_MAPPING, type Language } from '@/lib/i18n';\n\n// Import translations object for SEO language override\n// Note: This assumes translations are exported from i18n.ts\nconst translations: { [key: string]: { en: string; ar: string; kur: string } } = {\n  \"seo.homeTitle\": {\n    en: \"MapEstate - AI-Powered Real Estate Finder | Properties in Kurdistan, Iraq\",\n    ar: \"MapEstate - محرك البحث العقاري المدعوم بالذكاء الاصطناعي | عقارات في كردستان، العراق\",\n    kur: \"MapEstate - دۆزەرەوەی خانووبەرەی پاڵپشتیکراو بە AI | خانووبەرە لە کوردستان، عێراق\",\n  },\n  \"seo.homeDescription\": {\n    en: \"Find your perfect home with AI-powered recommendations. Discover properties for rent and sale in Kurdistan, Iraq with intelligent search and expert agents.\",\n    ar: \"اعثر على منزلك المثالي مع التوصيات المدعومة بالذكاء الاصطناعي. اكتشف العقارات للإيجار والبيع في كردستان، العراق مع البحث الذكي والوكلاء الخبراء.\",\n    kur: \"ماڵی تەواوی خۆت بدۆزەرەوە لەگەڵ پێشنیارەکانی پاڵپشتیکراو بە AI. خانووبەرەکان بۆ کرێ و فرۆشتن لە کوردستان، عێراق بدۆزەرەوە لەگەڵ گەڕانی زیرەک و بریکارە شارەزاکان.\",\n  },\n  \"seo.propertiesTitle\": {\n    en: \"Properties for Sale and Rent in Kurdistan, Iraq | MapEstate\",\n    ar: \"عقارات للبيع والإيجار في كردستان، العراق | MapEstate\",\n    kur: \"خانووبەرە بۆ فرۆشتن و کرێ لە کوردستان، عێراق | MapEstate\",\n  },\n  \"seo.propertiesDescription\": {\n    en: \"Browse thousands of properties for sale and rent. Find apartments, houses, villas, and land in Kurdistan, Iraq with advanced search and AI recommendations.\",\n    ar: \"تصفح آلاف العقارات للبيع والإيجار. ابحث عن شقق ومنازل وفيلات وأراضي في كردستان، العراق مع البحث المتقدم والتوصيات الذكية.\",\n    kur: \"هەزاران خانووبەرە بۆ فرۆشتن و کرێ بگەڕێ. شوقە، ماڵ، ڤیلا و زەوی لە کوردستان، عێراق بدۆزەرەوە لەگەڵ گەڕانی پێشکەوتوو و پێشنیاری AI.\",\n  },\n  \"seo.propertyDetailTitle\": {\n    en: \"{propertyType} for {listingType} - {price} | {city}, Iraq | MapEstate\",\n    ar: \"{propertyType} لل{listingType} - {price} | {city}، العراق | MapEstate\",\n    kur: \"{propertyType} بۆ {listingType} - {price} | {city}، عێراق | MapEstate\",\n  },\n  \"seo.propertyDetailDescription\": {\n    en: \"{bedrooms} bedroom {propertyType} for {listingType} in {city}. {description} Contact our expert agents for viewing and details.\",\n    ar: \"{propertyType} بـ {bedrooms} غرفة نوم لل{listingType} في {city}. {description} اتصل بوكلائنا الخبراء للمعاينة والتفاصيل.\",\n    kur: \"{propertyType}ی {bedrooms} ژووری نوستن بۆ {listingType} لە {city}. {description} پەیوەندی بە بریکارە شارەزاکانمانەوە بکە بۆ بینین و وردەکاری.\",\n  },\n  \"seo.keywords\": {\n    en: \"real estate, Kurdistan, Iraq, properties for sale, properties for rent, apartments, houses, villas, land, AI search, Erbil, Sulaymaniyah, Dohuk\",\n    ar: \"عقارات، كردستان، العراق، عقارات للبيع، عقارات للإيجار، شقق، منازل، فيلات، أراضي، بحث ذكي، أربيل، السليمانية، دهوك\",\n    kur: \"خانووبەرە، کوردستان، عێراق، خانووبەرە بۆ فرۆشتن، خانووبەرە بۆ کرێ، شوقە، ماڵ، ڤیلا، زەوی، گەڕانی AI، هەولێر، سلێمانی، دهۆک\",\n  },\n  \"seo.propertyType.apartment\": {\n    en: \"Apartment\",\n    ar: \"شقة\",\n    kur: \"شوقە\",\n  },\n  \"seo.propertyType.house\": {\n    en: \"House\",\n    ar: \"منزل\", \n    kur: \"ماڵ\",\n  },\n  \"seo.propertyType.villa\": {\n    en: \"Villa\",\n    ar: \"فيلا\",\n    kur: \"ڤیلا\",\n  },\n  \"seo.propertyType.land\": {\n    en: \"Land\",\n    ar: \"أرض\",\n    kur: \"زەوی\",\n  },\n  \"seo.listingType.sale\": {\n    en: \"Sale\",\n    ar: \"البيع\",\n    kur: \"فرۆشتن\",\n  },\n  \"seo.listingType.rent\": {\n    en: \"Rent\", \n    ar: \"الإيجار\",\n    kur: \"کرێ\",\n  },\n  \"seo.favoritesTitle\": {\n    en: \"My Favorite Properties | MapEstate - Save Your Dream Home\",\n    ar: \"عقاراتي المفضلة | MapEstate - احفظ منزل أحلامك\",\n    kur: \"خانووبەرە دڵخوازەکانم | MapEstate - ماڵی خەونەکانت پاشەکەوت بکە\",\n  },\n  \"seo.favoritesDescription\": {\n    en: \"View and manage your saved properties. Access your favorite real estate listings in Kurdistan, Iraq with MapEstate's AI-powered platform.\",\n    ar: \"عرض وإدارة العقارات المحفوظة الخاصة بك. الوصول إلى قوائم العقارات المفضلة لديك في كردستان، العراق مع منصة MapEstate المدعومة بالذكاء الاصطناعي.\",\n    kur: \"خانووبەرە پاشەکەوتکراوەکانت ببینە و بەڕێوەبەرە. دەستگەیشتن بە لیستی خانووبەرە دڵخوازەکانت لە کوردستان، عێراق لەگەڵ پلاتفۆرمی MapEstate پاڵپشتیکراو بە AI.\",\n  },\n  \"seo.aboutTitle\": {\n    en: \"About MapEstate | AI-Powered Real Estate Platform in Kurdistan\",\n    ar: \"عن MapEstate | منصة عقارية مدعومة بالذكاء الاصطناعي في كردستان\",\n    kur: \"دەربارەی MapEstate | پلاتفۆرمی خانووبەرەی پاڵپشتیکراو بە AI لە کوردستان\",\n  },\n  \"seo.aboutDescription\": {\n    en: \"Learn about MapEstate - your trusted AI-powered real estate platform. Discover our mission to transform property search in Kurdistan, Iraq with innovative technology and expert service.\",\n    ar: \"تعرف على MapEstate - منصتك العقارية الموثوقة المدعومة بالذكاء الاصطناعي. اكتشف مهمتنا لتحويل البحث عن العقارات في كردستان، العراق بالتكنولوجيا المبتكرة والخدمة الخبيرة.\",\n    kur: \"زانیاری دەربارەی MapEstate - پلاتفۆرمی خانووبەرەی متمانەپێکراوی پاڵپشتیکراو بە AI. ئامانجمان بدۆزەرەوە بۆ گۆڕینی گەڕانی خانووبەرە لە کوردستان، عێراق لەگەڵ تەکنەلۆژیای نوێ و خزمەتگوزاری شارەزا.\",\n  },\n  \"seo.settingsTitle\": {\n    en: \"Account Settings | Customize Your MapEstate Experience\",\n    ar: \"إعدادات الحساب | تخصيص تجربة MapEstate الخاصة بك\",\n    kur: \"ڕێکخستنەکانی ئەکاونت | ئەزموونی MapEstate خۆت کەسیکەرەوە\",\n  },\n  \"seo.settingsDescription\": {\n    en: \"Manage your MapEstate account settings. Customize language, currency, notifications, and display preferences for the best property search experience in Kurdistan, Iraq.\",\n    ar: \"إدارة إعدادات حساب MapEstate الخاص بك. تخصيص اللغة والعملة والإشعارات وتفضيلات العرض للحصول على أفضل تجربة بحث عن العقارات في كردستان، العراق.\",\n    kur: \"ڕێکخستنەکانی ئەکاونتی MapEstate خۆت بەڕێوەبەرە. زمان، دراو، ئاگادارکردنەوەکان، و هەڵبژاردنەکانی پیشاندان کەسیکەرەوە بۆ باشترین ئەزموونی گەڕانی خانووبەرە لە کوردستان، عێراق.\",\n  }\n};\n\n// SEO language helper - now supports all three languages equally\nfunction resolveSeoLanguage(language: Language): Language {\n  // All languages (en, ar, kur) now show their own SEO content\n  return language;\n}\n\n// Custom translation function for SEO that can handle language override\nfunction seoTranslate(key: string, language: Language): string {\n  return translations[key]?.[language] || key;\n}\n\n// Helper functions for dynamic SEO content generation\nfunction generateDynamicTitle(\n  pageType: string,\n  propertyData: SEOProps['propertyData'],\n  language: Language,\n  customTitle?: string\n): string {\n  if (customTitle) return customTitle;\n  \n  switch (pageType) {\n    case 'home':\n      return seoTranslate('seo.homeTitle', language);\n    case 'properties':\n      return seoTranslate('seo.propertiesTitle', language);\n    case 'property-detail':\n      if (propertyData) {\n        const propertyType = seoTranslate(`seo.propertyType.${propertyData.propertyType?.toLowerCase()}`, language) || propertyData.propertyType || 'Property';\n        const listingType = seoTranslate(`seo.listingType.${propertyData.listingType?.toLowerCase()}`, language) || propertyData.listingType || 'Sale';\n        const price = propertyData.price || '';\n        const city = propertyData.city || '';\n        \n        return seoTranslate('seo.propertyDetailTitle', language)\n          .replace('{propertyType}', propertyType)\n          .replace('{listingType}', listingType)\n          .replace('{price}', price)\n          .replace('{city}', city);\n      }\n      return seoTranslate('seo.homeTitle', language);\n    case 'favorites':\n      return seoTranslate('seo.favoritesTitle', language);\n    case 'about':\n      return seoTranslate('seo.aboutTitle', language);\n    case 'settings':\n      return seoTranslate('seo.settingsTitle', language);\n    default:\n      return seoTranslate('seo.homeTitle', language);\n  }\n}\n\nfunction generateDynamicDescription(\n  pageType: string,\n  propertyData: SEOProps['propertyData'],\n  language: Language,\n  customDescription?: string\n): string {\n  if (customDescription) return customDescription;\n  \n  switch (pageType) {\n    case 'home':\n      return seoTranslate('seo.homeDescription', language);\n    case 'properties':\n      return seoTranslate('seo.propertiesDescription', language);\n    case 'property-detail':\n      if (propertyData) {\n        const propertyType = seoTranslate(`seo.propertyType.${propertyData.propertyType?.toLowerCase()}`, language) || propertyData.propertyType || 'property';\n        const listingType = seoTranslate(`seo.listingType.${propertyData.listingType?.toLowerCase()}`, language) || propertyData.listingType || 'sale';\n        const bedrooms = propertyData.bedrooms || 0;\n        const city = propertyData.city || '';\n        // Use property description if available, truncated for SEO best practices\n        const description = (propertyData as any).description ? \n          ((propertyData as any).description.length > 120 ? \n            (propertyData as any).description.substring(0, 120) + '...' : \n            (propertyData as any).description) : '';\n        \n        return seoTranslate('seo.propertyDetailDescription', language)\n          .replace('{propertyType}', propertyType)\n          .replace('{listingType}', listingType)\n          .replace('{bedrooms}', bedrooms.toString())\n          .replace('{city}', city)\n          .replace('{description}', description);\n      }\n      return seoTranslate('seo.homeDescription', language);\n    case 'favorites':\n      return seoTranslate('seo.favoritesDescription', language);\n    case 'about':\n      return seoTranslate('seo.aboutDescription', language);\n    case 'settings':\n      return seoTranslate('seo.settingsDescription', language);\n    default:\n      return seoTranslate('seo.homeDescription', language);\n  }\n}\n\nfunction generateDynamicKeywords(\n  language: Language,\n  customKeywords?: string,\n  pageType?: string,\n  propertyData?: any\n): string {\n  if (customKeywords) return customKeywords;\n  \n  let baseKeywords = seoTranslate('seo.keywords', language);\n  \n  // Add property-specific keywords for property detail pages\n  if (pageType === 'property-detail' && propertyData) {\n    const propertySpecificKeywords = [\n      propertyData.propertyType,\n      propertyData.city,\n      propertyData.country,\n      propertyData.listingType,\n      // Only include bedroom/bathroom counts if they are valid numbers\n      Number.isFinite(propertyData.bedrooms) && propertyData.bedrooms > 0 ? \n        `${propertyData.bedrooms} bedroom${propertyData.bedrooms > 1 ? 's' : ''}` : null,\n      Number.isFinite(propertyData.bathrooms) && propertyData.bathrooms > 0 ? \n        `${propertyData.bathrooms} bathroom${propertyData.bathrooms > 1 ? 's' : ''}` : null\n    ].filter(Boolean).join(', ');\n    \n    baseKeywords += `, ${propertySpecificKeywords}`;\n  }\n  \n  return baseKeywords;\n}\n\n// Generate appropriate robots directive based on page type and context\nfunction generateRobotsDirective(\n  pageType?: string,\n  customRobots?: string,\n  propertyData?: any\n): string {\n  if (customRobots) return customRobots;\n  \n  switch (pageType) {\n    case 'settings':\n    case 'favorites':\n      // Private user pages should not be indexed\n      return 'noindex,nofollow';\n    \n    case 'home':\n    case 'properties':\n    case 'property-detail':\n    case 'about':\n      // Public content pages should be indexed\n      return 'index,follow,max-image-preview:large,max-snippet:-1,max-video-preview:-1';\n    \n    default:\n      // Default to indexable but conservative\n      return 'index,follow';\n  }\n}\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  keywords?: string;\n  ogImage?: string;\n  canonicalUrl?: string;\n  structuredData?: object;\n  breadcrumbs?: Array<{ name: string; url: string }>;\n  propertyData?: {\n    address?: string;\n    city?: string;\n    country?: string;\n    price?: string;\n    currency?: string;\n    propertyType?: string;\n    listingType?: 'sale' | 'rent';\n    bedrooms?: number;\n    bathrooms?: number;\n    area?: number;\n  };\n  pageType?: 'home' | 'properties' | 'property-detail' | 'favorites' | 'about' | 'settings';\n  robots?: 'index,follow' | 'noindex,follow' | 'index,nofollow' | 'noindex,nofollow' | string;\n}\n\nfunction generateCanonicalUrl(location: string, language: Language): string {\n  const baseUrl = window.location.origin;\n  \n  // Check if current URL has query parameters for language\n  const fullUrl = window.location.href;\n  const { language: detectedLang, source } = detectLanguageFromUrlEnhanced(fullUrl);\n  \n  // Always use path-based URLs for canonical (better for SEO)\n  // Parse URL to get clean pathname without query/hash\n  const pathname = location.split('?')[0].split('#')[0];\n  // Remove existing language prefix if present\n  let cleanPath = pathname.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n  \n  // If language was detected from query params, we need to preserve the clean path\n  // but use the detected language for canonical URL\n  const canonicalLanguage = detectedLang || language;\n  \n  // Normalize trailing slashes: no trailing slash except for home\n  if (cleanPath !== '/' && cleanPath.endsWith('/')) {\n    cleanPath = cleanPath.slice(0, -1);\n  }\n  \n  const localizedPath = getLocalizedPath(cleanPath, canonicalLanguage);\n  return `${baseUrl}${localizedPath}`;\n}\n\nfunction getOGLocale(language: Language): string {\n  return getLanguageInfo(language).locale;\n}\n\nfunction getAlternateOGLocales(currentLanguage: Language): string[] {\n  const allLocales = Object.values(LANGUAGE_MAPPING).map(info => info.locale);\n  const currentLocale = getOGLocale(currentLanguage);\n  return allLocales.filter(locale => locale !== currentLocale);\n}\n\nfunction addPreconnectHints() {\n  // Common external domains used for images to improve loading performance\n  const domains = [\n    'https://images.unsplash.com',\n    'https://cdn.pixabay.com',\n    'https://via.placeholder.com'\n  ];\n  \n  domains.forEach(domain => {\n    // Check if preconnect link already exists\n    if (!document.querySelector(`link[rel=\"preconnect\"][href=\"${domain}\"]`)) {\n      const link = document.createElement('link');\n      link.rel = 'preconnect';\n      link.href = domain;\n      link.crossOrigin = 'anonymous';\n      document.head.appendChild(link);\n    }\n  });\n}\n\nfunction updateMetaTag(attr: string, name: string, content: string) {\n  let element = document.querySelector(`meta[${attr}=\"${name}\"]`);\n  if (!element) {\n    element = document.createElement('meta');\n    element.setAttribute(attr, name);\n    document.head.appendChild(element);\n  }\n  element.setAttribute('content', content);\n}\n\nfunction ensureMultiMeta(attr: string, name: string, values: string[]) {\n  // Remove existing meta tags with this property\n  const existing = document.querySelectorAll(`meta[${attr}=\"${name}\"]`);\n  existing.forEach(element => element.remove());\n  \n  // Add one meta tag for each value\n  values.forEach(value => {\n    const element = document.createElement('meta');\n    element.setAttribute(attr, name);\n    element.setAttribute('content', value);\n    document.head.appendChild(element);\n  });\n}\n\nfunction generateCombinedStructuredData(\n  customStructuredData?: object,\n  breadcrumbs?: Array<{ name: string; url: string }>,\n  propertyData?: SEOProps['propertyData'],\n  language?: Language,\n  canonicalUrl?: string,\n  pageType?: string\n) {\n  const baseUrl = window.location.origin;\n  const schemas: any[] = [];\n  const currentDate = new Date().toISOString();\n\n  // Enhanced Organization schema with correct structure\n  const organizationSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"RealEstateAgent\",\n    \"name\": \"MapEstate\",\n    \"url\": baseUrl,\n    \"logo\": {\n      \"@type\": \"ImageObject\",\n      \"url\": `${baseUrl}/logo_1757848527935.png`,\n      \"width\": 250,\n      \"height\": 250\n    },\n    \"image\": `${baseUrl}/uploads/properties/1759082074149-xrejrtvx6.jpg`,\n    \"description\": \"AI-Powered Real Estate Platform for Kurdistan and Iraq\",\n    \"slogan\": \"Find Your Perfect Home with AI\",\n    \"foundingDate\": \"2024\",\n    \"numberOfEmployees\": {\n      \"@type\": \"QuantitativeValue\",\n      \"minValue\": 10,\n      \"maxValue\": 50\n    },\n    \"address\": {\n      \"@type\": \"PostalAddress\",\n      \"addressCountry\": \"Iraq\",\n      \"addressRegion\": \"Kurdistan\",\n      \"addressLocality\": \"Erbil\"\n    },\n    \"location\": {\n      \"@type\": \"Place\",\n      \"geo\": {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": 36.1911,\n        \"longitude\": 44.0093\n      }\n    },\n    \"contactPoint\": [\n      {\n        \"@type\": \"ContactPoint\",\n        \"contactType\": \"customer service\",\n        \"availableLanguage\": [\"English\", \"Arabic\", \"Kurdish\"],\n        \"serviceArea\": {\n          \"@type\": \"AdministrativeArea\",\n          \"name\": \"Kurdistan Region\"\n        }\n      },\n      {\n        \"@type\": \"ContactPoint\",\n        \"contactType\": \"sales\",\n        \"availableLanguage\": [\"English\", \"Arabic\", \"Kurdish\"]\n      }\n    ],\n    \"areaServed\": [\n      {\n        \"@type\": \"City\",\n        \"name\": \"Erbil\",\n        \"containedInPlace\": {\n          \"@type\": \"AdministrativeArea\",\n          \"name\": \"Kurdistan Region\"\n        }\n      },\n      {\n        \"@type\": \"City\",\n        \"name\": \"Sulaymaniyah\",\n        \"containedInPlace\": {\n          \"@type\": \"AdministrativeArea\",\n          \"name\": \"Kurdistan Region\"\n        }\n      },\n      {\n        \"@type\": \"City\",\n        \"name\": \"Dohuk\",\n        \"containedInPlace\": {\n          \"@type\": \"AdministrativeArea\",\n          \"name\": \"Kurdistan Region\"\n        }\n      }\n    ],\n    \"hasOfferCatalog\": {\n      \"@type\": \"OfferCatalog\",\n      \"name\": \"Real Estate Listings\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"Offer\",\n          \"itemOffered\": {\n            \"@type\": \"Service\",\n            \"name\": \"Property Search\",\n            \"description\": \"AI-powered property search and recommendations\"\n          }\n        },\n        {\n          \"@type\": \"Offer\",\n          \"itemOffered\": {\n            \"@type\": \"Service\",\n            \"name\": \"Real Estate Agent Services\",\n            \"description\": \"Professional real estate agent support and consultation\"\n          }\n        }\n      ]\n    },\n    \"sameAs\": [\n      \"https://facebook.com/mapestate\",\n      \"https://twitter.com/mapestate\",\n      \"https://linkedin.com/company/mapestate\",\n      \"https://instagram.com/mapestate\"\n    ]\n  };\n\n  // Website schema\n  const websiteSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebSite\",\n    \"name\": \"MapEstate\",\n    \"url\": baseUrl,\n    \"potentialAction\": {\n      \"@type\": \"SearchAction\",\n      \"target\": `${baseUrl}/properties?search={search_term_string}`,\n      \"query-input\": \"required name=search_term_string\"\n    },\n    \"inLanguage\": [\n      { \"@type\": \"Language\", \"name\": \"English\", \"alternateName\": \"en\" },\n      { \"@type\": \"Language\", \"name\": \"Arabic\", \"alternateName\": \"ar\" },\n      { \"@type\": \"Language\", \"name\": \"Kurdish\", \"alternateName\": \"ku\" }\n    ]\n  };\n\n  schemas.push(organizationSchema, websiteSchema);\n\n  // Breadcrumb schema\n  if (breadcrumbs && breadcrumbs.length > 0) {\n    const breadcrumbSchema = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"BreadcrumbList\",\n      \"itemListElement\": breadcrumbs.map((crumb, index) => ({\n        \"@type\": \"ListItem\",\n        \"position\": index + 1,\n        \"name\": crumb.name,\n        \"item\": `${baseUrl}${crumb.url}`\n      }))\n    };\n    schemas.push(breadcrumbSchema);\n  }\n\n  // Property schema using proper Residence/Apartment/House types\n  if (propertyData) {\n    const propertyType = propertyData.propertyType?.toLowerCase();\n    const schemaPropertyType = propertyType === 'apartment' ? 'Apartment' : \n                               propertyType === 'house' ? 'House' :\n                               propertyType === 'villa' ? 'House' :\n                               propertyType === 'land' ? 'LandParcel' : 'Residence';\n    \n    const propertySchema = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": schemaPropertyType,\n      \"@id\": canonicalUrl,\n      \"url\": canonicalUrl,\n      \"name\": `${propertyData.propertyType || 'Property'} in ${propertyData.city || ''}`,\n      \"description\": `${propertyData.bedrooms ? `${propertyData.bedrooms} bedroom ` : ''}${propertyData.propertyType || 'property'} ${propertyData.address ? `located at ${propertyData.address}` : ''} in ${propertyData.city || ''}, ${propertyData.country || ''}`,\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": propertyData.address || \"\",\n        \"addressLocality\": propertyData.city || \"\",\n        \"addressRegion\": \"Kurdistan Region\",\n        \"addressCountry\": propertyData.country || \"Iraq\"\n      },\n      \"geo\": propertyData.city ? {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": propertyData.city === 'Erbil' ? 36.1911 : propertyData.city === 'Sulaymaniyah' ? 35.5558 : 36.8619,\n        \"longitude\": propertyData.city === 'Erbil' ? 44.0093 : propertyData.city === 'Sulaymaniyah' ? 45.4347 : 42.9922\n      } : undefined,\n      \"numberOfRooms\": propertyData.bedrooms,\n      \"numberOfBathroomsTotal\": propertyData.bathrooms,\n      \"floorSize\": propertyData.area ? {\n        \"@type\": \"QuantitativeValue\",\n        \"value\": propertyData.area,\n        \"unitText\": \"square meters\",\n        \"unitCode\": \"MTK\"\n      } : undefined,\n      \"additionalProperty\": [\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"Listing Type\",\n          \"value\": propertyData.listingType\n        },\n        {\n          \"@type\": \"PropertyValue\",\n          \"name\": \"Property Status\",\n          \"value\": \"Available\"\n        }\n      ],\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": propertyData.price?.replace(/[^0-9.]/g, '') || '0',\n        \"priceCurrency\": propertyData.currency || \"USD\",\n        \"availability\": \"https://schema.org/InStock\",\n        \"validFrom\": currentDate,\n        \"validThrough\": new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),\n        \"seller\": {\n          \"@type\": \"RealEstateAgent\",\n          \"name\": \"MapEstate\",\n          \"url\": baseUrl\n        }\n      }\n    };\n    schemas.push(propertySchema);\n  }\n\n  // Only add FAQ schema for pages that actually have FAQ content\n  if (pageType === 'about' || pageType === 'home') {\n    const faqSchema = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"FAQPage\",\n      \"mainEntity\": [\n        {\n          \"@type\": \"Question\",\n          \"name\": \"What areas does MapEstate cover?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"MapEstate covers properties across Kurdistan Region of Iraq, including Erbil, Sulaymaniyah, and Dohuk.\"\n          }\n        },\n        {\n          \"@type\": \"Question\", \n          \"name\": \"How does AI-powered search work?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Our AI analyzes your search criteria and preferences to recommend properties that best match your needs, considering factors like location, budget, and lifestyle requirements.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"What languages does MapEstate support?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"MapEstate supports English, Arabic, and Kurdish languages to serve the diverse community in Kurdistan and Iraq.\"\n          }\n        }\n      ]\n    };\n    schemas.push(faqSchema);\n  }\n  \n  // Add custom structured data if provided\n  if (customStructuredData) {\n    schemas.push(customStructuredData);\n  }\n\n  return schemas.length === 1 ? schemas[0] : schemas;\n}\n\nexport function SEOHead({ \n  title,\n  description,\n  keywords,\n  ogImage = `/uploads/properties/1759082074149-xrejrtvx6.jpg`,\n  canonicalUrl,\n  structuredData,\n  breadcrumbs,\n  propertyData,\n  pageType = 'home',\n  robots\n}: SEOProps) {\n  const [location] = useLocation();\n  const { language } = useLanguage();\n  const { t } = useTranslation();\n  \n  useEffect(() => {\n    // Enhanced language detection for proper canonical URL generation\n    const fullUrl = window.location.href;\n    const { language: detectedLang } = detectLanguageFromUrlEnhanced(fullUrl);\n    const currentLanguage = detectedLang || language;\n    \n    // Resolve SEO language - Kurdish routes will use English SEO content\n    const seoLanguage = resolveSeoLanguage(currentLanguage);\n    \n    // Generate dynamic SEO content based on page type and SEO language\n    const dynamicTitle = generateDynamicTitle(pageType, propertyData, seoLanguage, title);\n    const dynamicDescription = generateDynamicDescription(pageType, propertyData, seoLanguage, description);\n    const dynamicKeywords = generateDynamicKeywords(seoLanguage, keywords, pageType, propertyData);\n    const robotsDirective = generateRobotsDirective(pageType, robots, propertyData);\n    \n    // Update document title\n    document.title = dynamicTitle;\n    \n    // Update meta description\n    updateMetaTag('name', 'description', dynamicDescription);\n    updateMetaTag('name', 'keywords', dynamicKeywords);\n    \n    // Comprehensive Open Graph tags for Facebook, LinkedIn, and general sharing\n    updateMetaTag('property', 'og:title', dynamicTitle);\n    updateMetaTag('property', 'og:description', dynamicDescription);\n    updateMetaTag('property', 'og:image', ogImage);\n    updateMetaTag('property', 'og:image:secure_url', ogImage && typeof ogImage === 'string' ? ogImage.replace('http://', 'https://') : ogImage);\n    updateMetaTag('property', 'og:image:width', '1200');\n    updateMetaTag('property', 'og:image:height', '630');\n    updateMetaTag('property', 'og:image:alt', dynamicTitle);\n    // Derive image type from file extension instead of hardcoding\n    const imageType = (typeof ogImage === 'string' && ogImage.includes('.png')) ? 'image/png' : \n                      (typeof ogImage === 'string' && (ogImage.includes('.jpg') || ogImage.includes('.jpeg'))) ? 'image/jpeg' : 'image/png';\n    updateMetaTag('property', 'og:image:type', imageType);\n    \n    const properCanonicalUrl = canonicalUrl || generateCanonicalUrl(location, currentLanguage);\n    \n    updateMetaTag('property', 'og:url', properCanonicalUrl);\n    updateMetaTag('property', 'og:type', propertyData ? 'product' : 'website');\n    updateMetaTag('property', 'og:site_name', 'MapEstate');\n    \n    // Set og:locale based on SEO language (Kurdish routes will use English locale)\n    const ogLocale = getOGLocale(seoLanguage);\n    updateMetaTag('property', 'og:locale', ogLocale);\n    \n    // Handle multiple og:locale:alternate tags for other languages\n    const alternateLocales = getAlternateOGLocales(seoLanguage);\n    if (alternateLocales.length > 0) {\n      ensureMultiMeta('property', 'og:locale:alternate', alternateLocales);\n    }\n    updateMetaTag('property', 'og:country-name', 'Iraq');\n    updateMetaTag('property', 'og:region', 'Kurdistan');\n    updateMetaTag('property', 'og:updated_time', new Date().toISOString());\n    \n    // Enhanced Twitter Card tags for Twitter sharing\n    updateMetaTag('name', 'twitter:card', 'summary_large_image');\n    updateMetaTag('name', 'twitter:url', properCanonicalUrl);\n    updateMetaTag('name', 'twitter:title', dynamicTitle);\n    updateMetaTag('name', 'twitter:description', dynamicDescription);\n    updateMetaTag('name', 'twitter:image', ogImage);\n    updateMetaTag('name', 'twitter:image:alt', dynamicTitle);\n    updateMetaTag('name', 'twitter:site', '@MapEstate');\n    updateMetaTag('name', 'twitter:creator', '@MapEstate');\n    // Remove nonstandard twitter:domain tag\n    updateMetaTag('name', 'twitter:app:name:iphone', 'MapEstate');\n    updateMetaTag('name', 'twitter:app:name:ipad', 'MapEstate');\n    updateMetaTag('name', 'twitter:app:name:googleplay', 'MapEstate');\n    \n    // Remove nonstandard og:language and twitter:language tags\n    \n    // Meta robots tags for better SEO control\n    updateMetaTag('name', 'robots', robotsDirective);\n    // Use same directive for specific bots unless they need special handling\n    const botDirective = robotsDirective.includes('noindex') ? 'noindex,nofollow' : 'index,follow';\n    updateMetaTag('name', 'googlebot', botDirective);\n    updateMetaTag('name', 'bingbot', botDirective);\n    \n    // Author and publisher information\n    updateMetaTag('name', 'author', 'MapEstate');\n    updateMetaTag('name', 'publisher', 'MapEstate');\n    \n    // Conditional tags based on content type\n    if (pageType === 'property-detail' && propertyData) {\n      // Product-specific tags for property listings\n      updateMetaTag('property', 'product:price:amount', propertyData.price?.replace(/[^0-9.]/g, '') || '0');\n      updateMetaTag('property', 'product:price:currency', propertyData.currency || 'USD');\n      updateMetaTag('property', 'product:availability', 'in stock');\n      updateMetaTag('property', 'product:condition', 'new');\n      updateMetaTag('property', 'product:category', 'Real Estate');\n      updateMetaTag('property', 'product:brand', 'MapEstate');\n    } else if (pageType === 'about' || pageType === 'home') {\n      // Article tags only for article-like content\n      updateMetaTag('property', 'article:author', 'MapEstate');\n      updateMetaTag('property', 'article:publisher', 'https://www.facebook.com/mapestate');\n      updateMetaTag('property', 'article:published_time', new Date().toISOString());\n      updateMetaTag('property', 'article:modified_time', new Date().toISOString());\n      updateMetaTag('property', 'article:section', 'Real Estate');\n      updateMetaTag('property', 'article:tag', dynamicKeywords);\n    }\n    \n    // Pinterest optimization\n    updateMetaTag('name', 'pinterest-rich-pin', 'true');\n    updateMetaTag('name', 'pinterest:title', dynamicTitle);\n    updateMetaTag('name', 'pinterest:description', dynamicDescription);\n    updateMetaTag('name', 'pinterest:image', ogImage);\n    \n    // Enhanced social sharing for Arabic and Kurdish content\n    if (currentLanguage === 'ar' || currentLanguage === 'kur') {\n      // RTL-specific meta tags for social platforms (use current language for UI direction)\n      const currentLanguageInfo = getLanguageInfo(currentLanguage);\n      updateMetaTag('name', 'text-direction', currentLanguageInfo.dir);\n      updateMetaTag('property', 'og:text_direction', currentLanguageInfo.dir);\n      \n      // Arabic/Kurdish specific social media optimization\n      updateMetaTag('property', 'og:title:ar', currentLanguage === 'ar' ? dynamicTitle : '');\n      updateMetaTag('property', 'og:description:ar', currentLanguage === 'ar' ? dynamicDescription : '');\n      updateMetaTag('property', 'og:title:ku', currentLanguage === 'kur' ? dynamicTitle : '');\n      updateMetaTag('property', 'og:description:ku', currentLanguage === 'kur' ? dynamicDescription : '');\n      \n      // Remove nonstandard regional tags\n      \n      // WhatsApp and Telegram optimization (popular in Middle East)\n      updateMetaTag('property', 'whatsapp:title', dynamicTitle);\n      updateMetaTag('property', 'whatsapp:description', dynamicDescription);\n      updateMetaTag('property', 'whatsapp:image', ogImage);\n      updateMetaTag('property', 'telegram:title', dynamicTitle);\n      updateMetaTag('property', 'telegram:description', dynamicDescription);\n      updateMetaTag('property', 'telegram:image', ogImage);\n    }\n    \n    // WhatsApp uses Open Graph tags, ensure mobile compatibility\n    updateMetaTag('name', 'format-detection', 'telephone=no');\n    \n    // Enhanced WhatsApp and social media sharing optimization\n    updateMetaTag('property', 'og:rich_attachment', 'true');\n    updateMetaTag('property', 'og:see_also', properCanonicalUrl);\n    \n    // LinkedIn-specific optimizations\n    updateMetaTag('name', 'linkedin:owner', 'MapEstate');\n    updateMetaTag('name', 'linkedin:site', properCanonicalUrl);\n    \n    // Real estate specific tags (these are custom for internal use)\n    if (propertyData) {\n      updateMetaTag('name', 'property:bedrooms', propertyData.bedrooms?.toString() || '');\n      updateMetaTag('name', 'property:bathrooms', propertyData.bathrooms?.toString() || '');\n      updateMetaTag('name', 'property:area', propertyData.area?.toString() || '');\n      updateMetaTag('name', 'property:type', propertyData.propertyType || '');\n      updateMetaTag('name', 'property:listing_type', propertyData.listingType || '');\n      updateMetaTag('name', 'property:location', `${propertyData.city}, ${propertyData.country}`);\n    }\n    \n    // SEO performance optimization tags\n    updateMetaTag('name', 'referrer', 'strict-origin-when-cross-origin');\n    updateMetaTag('http-equiv', 'x-dns-prefetch-control', 'on');\n    \n    // Additional social platform compatibility\n    updateMetaTag('name', 'skype_toolbar', 'skype_toolbar_parser_compatible');\n    updateMetaTag('name', 'pinterest', 'nopin'); // Prevent pinning if not desired\n    updateMetaTag('name', 'pinterest-rich-pin', 'true');\n    \n    // Additional meta tags for better SEO and social sharing (robots tag already handled above)\n    updateMetaTag('name', 'author', 'MapEstate');\n    updateMetaTag('name', 'generator', 'MapEstate Real Estate Platform');\n    updateMetaTag('property', 'article:publisher', `${window.location.protocol}//${window.location.host}`);\n    \n    // Additional SEO meta tags\n    updateMetaTag('name', 'theme-color', '#ff7f00'); // Brand color\n    updateMetaTag('name', 'msapplication-TileColor', '#ff7f00');\n    updateMetaTag('name', 'apple-mobile-web-app-capable', 'yes');\n    updateMetaTag('name', 'apple-mobile-web-app-status-bar-style', 'default');\n    updateMetaTag('name', 'mobile-web-app-capable', 'yes');\n    \n    // Enhanced geo-location tags for better local SEO\n    updateMetaTag('name', 'geo.region', 'IQ-KR'); // Kurdistan, Iraq\n    updateMetaTag('name', 'geo.placename', 'Kurdistan Region, Iraq');\n    updateMetaTag('name', 'geo.position', '36.1911;44.0091'); // Erbil coordinates\n    updateMetaTag('name', 'ICBM', '36.1911, 44.0091');\n    \n    // Additional geo tags for Arabic/Kurdish regions\n    if (currentLanguage === 'ar' || currentLanguage === 'kur') {\n      updateMetaTag('name', 'geo.region_name', 'Kurdistan Region');\n      updateMetaTag('name', 'geo.country_code', 'IQ');\n      updateMetaTag('name', 'geo.subregion', 'Middle East');\n      updateMetaTag('property', 'place:location:latitude', '36.1911');\n      updateMetaTag('property', 'place:location:longitude', '44.0091');\n    }\n    \n    // Business/Organization info\n    updateMetaTag('name', 'rating', 'general');\n    updateMetaTag('name', 'distribution', 'global');\n    updateMetaTag('name', 'coverage', 'worldwide');\n    updateMetaTag('name', 'target', 'all');\n    updateMetaTag('name', 'HandheldFriendly', 'true');\n    updateMetaTag('name', 'MobileOptimized', '320');\n    \n    // Update canonical URL using proper language-prefixed URL\n    updateCanonicalUrl(properCanonicalUrl);\n    \n    // Add hreflang tags for multilingual SEO using language-prefixed URLs\n    updateHreflangTags(location, currentLanguage);\n    \n    // Add performance optimization hints\n    addPreconnectHints();\n    \n    // Update structured data with comprehensive website schema\n    const combinedStructuredData = generateCombinedStructuredData(\n      structuredData, \n      breadcrumbs, \n      propertyData,\n      currentLanguage,\n      properCanonicalUrl,\n      pageType\n    );\n    updateStructuredData(combinedStructuredData);\n  }, [title, description, keywords, ogImage, canonicalUrl, structuredData, location, language, robots, pageType, propertyData]);\n\n  return null;\n}\n\nfunction updateCanonicalUrl(url: string) {\n  let element = document.querySelector('link[rel=\"canonical\"]');\n  if (!element) {\n    element = document.createElement('link');\n    element.setAttribute('rel', 'canonical');\n    document.head.appendChild(element);\n  }\n  element.setAttribute('href', url);\n}\n\nfunction updateHreflangTags(currentLocation: string, currentLanguage: Language) {\n  // Remove existing hreflang tags\n  const existing = document.querySelectorAll('link[rel=\"alternate\"][hreflang]');\n  existing.forEach(element => element.remove());\n  \n  // Enhanced logic to handle query parameter-based URLs\n  const fullUrl = window.location.href;\n  const { source } = detectLanguageFromUrlEnhanced(fullUrl);\n  \n  // Parse URL to get clean pathname without query/hash, then strip language prefix\n  const pathname = currentLocation.split('?')[0].split('#')[0];\n  let cleanPath = pathname.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n  \n  // If language was detected from query parameters, preserve query params for hreflang\n  const urlObj = new URL(fullUrl);\n  let queryParams = urlObj.search;\n  \n  // Remove lang parameter from query string for hreflang URLs\n  if (source === 'query') {\n    const params = new URLSearchParams(queryParams);\n    params.delete('lang');\n    queryParams = params.toString() ? `?${params.toString()}` : '';\n  }\n  \n  // Normalize trailing slashes: no trailing slash except for home\n  if (cleanPath !== '/' && cleanPath.endsWith('/')) {\n    cleanPath = cleanPath.slice(0, -1);\n  }\n  const baseUrl = window.location.origin;\n  \n  // Use improved language mapping\n  const languages = Object.entries(LANGUAGE_MAPPING).map(([internal, info]) => ({\n    internal: internal as Language,\n    hreflang: info.hreflang\n  }));\n  \n  // Add hreflang tags for each supported language (always use path-based URLs for SEO)\n  languages.forEach(lang => {\n    const localizedPath = getLocalizedPath(cleanPath, lang.internal);\n    const link = document.createElement('link');\n    link.rel = 'alternate';\n    link.hreflang = lang.hreflang;\n    link.href = `${baseUrl}${localizedPath}${queryParams}`;\n    document.head.appendChild(link);\n  });\n  \n  // Add x-default hreflang (defaulting to English)\n  const defaultPath = getLocalizedPath(cleanPath, 'en');\n  const defaultLink = document.createElement('link');\n  defaultLink.rel = 'alternate';\n  defaultLink.hreflang = 'x-default';\n  defaultLink.href = `${baseUrl}${defaultPath}${queryParams}`;\n  document.head.appendChild(defaultLink);\n}\n\nfunction updateStructuredData(data: object) {\n  // Remove existing structured data\n  const existing = document.querySelector('script[type=\"application/ld+json\"][data-dynamic]');\n  if (existing) {\n    existing.remove();\n  }\n  \n  // Add new structured data\n  const script = document.createElement('script');\n  script.type = 'application/ld+json';\n  script.setAttribute('data-dynamic', 'true');\n  script.textContent = JSON.stringify(data);\n  document.head.appendChild(script);\n}\n\n","size_bytes":40545},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"replit.md":{"content":"# MapEstate - AI-Powered Real Estate Finder\n\n## Overview\n\nMapEstate is a modern, multilingual real estate web application designed for the Kurdistan/Iraq market. The platform combines intelligent property search with AI-powered recommendations to help users find their perfect home. Built with a full-stack TypeScript architecture, it features property listings with interactive maps, advanced filtering capabilities, agent management, and multilingual support (English, Arabic, Kurdish).\n\nThe application serves multiple user types: property seekers who can browse and search listings, real estate agents who can manage their property portfolios, and includes AI-driven features for personalized property recommendations and natural language search queries.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **API Design**: RESTful API architecture with centralized route handling\n- **Request Handling**: Express middleware for JSON parsing, error handling, and request logging\n- **Development**: Hot reload with tsx for TypeScript execution\n\n### Data Storage & Management\n- **Database**: MySQL VPS (Production) - FULLY OPERATIONAL ✅\n- **VPS Details** (DEFAULT CONFIGURATION - PERMANENT): \n  - Host: 72.60.134.44\n  - Port: 3306\n  - Database: mapestate\n  - User: mapestate \n  - Password: Stored in Replit Secrets (MYSQL_PASSWORD)\n  - Status: CONNECTED & TESTED ✅\n- **Auto-Connect**: All credentials permanently saved in Replit Secrets as:\n  - MYSQL_HOST=72.60.134.44\n  - MYSQL_PORT=3306\n  - MYSQL_USER=mapestate\n  - MYSQL_PASSWORD=[secure]\n  - MYSQL_DATABASE=mapestate\n- **Configuration**: Automatically detects and uses these VPS MySQL credentials every startup\n- **No Manual Setup**: Environment variables auto-loaded from Replit Secrets, no re-entry required\n- **Persistence**: These settings are permanent and will always be used as default\n- **ORM**: Drizzle ORM for type-safe database interactions\n- **Schema**: Centralized schema definitions in shared directory  \n- **Migrations**: Drizzle Kit for database schema management\n- **Connection**: Optimized connection pooling with health checks\n- **CRUD Operations**: All database operations (Create, Read, Update, Delete) verified working ✅\n- **Property Creation**: Photo uploads and property creation fully functional ✅\n\n### Key Data Models\n- **Users**: Authentication, roles (user/agent/admin), profile information\n- **Properties**: Complete property details including location, pricing, images, and amenities\n- **Inquiries**: User-to-agent communication system\n- **Favorites**: User property bookmarking functionality\n- **Search History**: AI-powered search tracking and recommendations\n\n### Authentication & Authorization\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Role-Based Access**: Multi-role system supporting users, agents, and administrators\n- **Data Security**: Prepared statements via Drizzle ORM prevent SQL injection\n\n### Map Integration\n- **Service**: Leaflet.js with OpenStreetMap tiles (free alternative to Google Maps)\n- **Features**: Interactive property markers, clustering, GPS location detection\n- **Performance**: Optimized marker rendering for large property datasets\n\n### Internationalization\n- **Languages**: English, Arabic, and Kurdish support\n- **Implementation**: Custom translation system with language switching\n- **RTL Support**: Proper text direction handling for Arabic content\n\n### External Dependencies\n\n- **Database Hosting**: Neon PostgreSQL serverless platform\n- **Map Service**: OpenStreetMap with Leaflet.js for interactive maps\n- **Font Service**: Google Fonts for typography (Inter font family)\n- **Icon Library**: Font Awesome for consistent iconography\n- **CDN Services**: Unpkg for client-side library delivery\n- **Development Tools**: Replit integration for development environment\n\nThe application uses a monorepo structure with shared TypeScript types and schemas, enabling full-stack type safety and code reuse across client and server components.","size_bytes":4668},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/Redirect.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useLanguage, redirectToLanguage } from \"@/lib/i18n\";\n\ninterface RedirectProps {\n  to: string;\n}\n\nexport function Redirect({ to }: RedirectProps) {\n  const [, setLocation] = useLocation();\n  const { language } = useLanguage();\n\n  useEffect(() => {\n    redirectToLanguage(language, to, setLocation);\n  }, [language, to, setLocation]);\n\n  return null;\n}","size_bytes":432},"client/src/lib/currency.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\n// Supported currencies with their symbols\nexport const SUPPORTED_CURRENCIES = {\n  USD: { symbol: \"$\", name: \"US Dollar\" },\n  IQD: { symbol: \"IQD\", name: \"Iraqi Dinar\" },\n  AED: { symbol: \"AED\", name: \"UAE Dirham\" },\n  EUR: { symbol: \"€\", name: \"Euro\" }\n} as const;\n\nexport type SupportedCurrency = keyof typeof SUPPORTED_CURRENCIES;\n\n// Get user's preferred currency from localStorage with fallback to USD\nexport function getUserPreferredCurrency(): SupportedCurrency {\n  if (typeof window === 'undefined') return 'USD';\n  const stored = localStorage.getItem('preferredCurrency') as SupportedCurrency;\n  return stored && stored in SUPPORTED_CURRENCIES ? stored : 'USD';\n}\n\n// Set user's preferred currency in localStorage\nexport function setUserPreferredCurrency(currency: SupportedCurrency): void {\n  if (typeof window === 'undefined') return;\n  localStorage.setItem('preferredCurrency', currency);\n}\n\n// Hook to get currency conversion rate\nexport function useCurrencyConversion(fromCurrency: string, toCurrency: string) {\n  return useQuery({\n    queryKey: ['currency-conversion', fromCurrency, toCurrency],\n    queryFn: async () => {\n      // If same currency, no conversion needed\n      if (fromCurrency === toCurrency) {\n        return { rate: 1, convertedAmount: 0 };\n      }\n\n      const response = await fetch(\n        `/api/currency/convert?amount=1&from=${fromCurrency}&to=${toCurrency}`\n      );\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch conversion rate');\n      }\n      \n      return response.json();\n    },\n    enabled: fromCurrency !== toCurrency,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n}\n\n// Convert price from one currency to another\nexport async function convertPrice(\n  amount: number, \n  fromCurrency: string, \n  toCurrency: string\n): Promise<number> {\n  if (fromCurrency === toCurrency) return amount;\n  \n  try {\n    const response = await fetch(\n      `/api/currency/convert?amount=${amount}&from=${fromCurrency}&to=${toCurrency}`\n    );\n    \n    if (!response.ok) {\n      console.warn(`Currency conversion failed for ${fromCurrency} to ${toCurrency}`);\n      return amount; // Fallback to original amount\n    }\n    \n    const data = await response.json();\n    return data.convertedAmount;\n  } catch (error) {\n    console.warn('Currency conversion error:', error);\n    return amount; // Fallback to original amount\n  }\n}\n\n// Enhanced formatPrice function with currency conversion support\nexport function formatPrice(\n  price: string,\n  originalCurrency: string,\n  listingType: string,\n  displayCurrency?: string,\n  convertedAmount?: number,\n  t?: (key: string) => string\n) {\n  const amount = convertedAmount ?? parseFloat(price);\n  const currency = displayCurrency || originalCurrency;\n  \n  // Get currency symbol\n  const currencyInfo = SUPPORTED_CURRENCIES[currency as SupportedCurrency];\n  const symbol = currencyInfo?.symbol || currency;\n  \n  // Format number with proper locale\n  const formattedAmount = new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n  \n  // Add suffix for rent\n  const suffix = listingType === \"rent\" ? (t?.('property.perMonth') || \"/month\") : \"\";\n  \n  return `${symbol}${formattedAmount}${suffix}`;\n}\n\n// Format price per square foot/meter\nexport function formatPricePerUnit(\n  price: string,\n  area: number,\n  originalCurrency: string,\n  displayCurrency?: string,\n  convertedAmount?: number,\n  t?: (key: string) => string\n) {\n  const amount = convertedAmount ?? parseFloat(price);\n  const currency = displayCurrency || originalCurrency;\n  \n  const currencyInfo = SUPPORTED_CURRENCIES[currency as SupportedCurrency];\n  const symbol = currencyInfo?.symbol || currency;\n  \n  const pricePerUnit = Math.round(amount / area);\n  const unitText = t?.('property.perSqFt') || \"/M²\";\n  \n  return `${symbol}${pricePerUnit}${unitText}`;\n}","size_bytes":3976},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/client-location-tracking.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { MapPin, Calendar, Users, Globe, Smartphone, Target, TrendingUp, Filter, BarChart3, PieChart, Activity } from 'lucide-react';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\nimport type { ClientLocation } from '@shared/schema';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\n// Hook for client location analytics\nconst useClientLocationAnalytics = (filters: { from?: string; to?: string }) => {\n  return useQuery({\n    queryKey: ['/api/admin/client-locations/stats', filters],\n    enabled: true\n  });\n};\n\n// Hook for client locations data\nconst useClientLocations = (filters: { from?: string; to?: string; userId?: string; page: number; limit: number }) => {\n  return useQuery({\n    queryKey: ['/api/admin/client-locations', {\n      from: filters.from || undefined,\n      to: filters.to || undefined,\n      userId: filters.userId === 'all' ? undefined : filters.userId,\n      limit: filters.limit,\n      offset: (filters.page - 1) * filters.limit\n    }],\n    enabled: true\n  });\n};\n\n// Hook for users list\nconst useUsers = () => {\n  return useQuery({\n    queryKey: ['/api/admin/users'],\n    enabled: true\n  });\n};\n\nexport default function ClientLocationTracking() {\n  const { user } = useAuth();\n  const [fromDate, setFromDate] = useState<string>('');\n  const [toDate, setToDate] = useState<string>('');\n  const [selectedUserId, setSelectedUserId] = useState<string>('all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [showMapModal, setShowMapModal] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState<ClientLocation | null>(null);\n  const limit = 50;\n\n  // Data queries\n  const { data: analyticsData, isLoading: analyticsLoading } = useClientLocationAnalytics({\n    from: fromDate || undefined,\n    to: toDate || undefined\n  });\n\n  const { data: locationsData, isLoading: locationsLoading } = useClientLocations({\n    from: fromDate,\n    to: toDate,\n    userId: selectedUserId,\n    page: currentPage,\n    limit\n  });\n\n  const { data: usersData } = useUsers();\n\n  // Helper functions\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const formatCoordinate = (coord: string | number) => {\n    return typeof coord === 'string' ? parseFloat(coord).toFixed(6) : coord.toFixed(6);\n  };\n\n  const getUserDisplayName = (userId: string | null) => {\n    if (!userId) return 'Anonymous';\n    const user = (usersData as any)?.items?.find((u: any) => u.id === userId);\n    if (!user) return userId;\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user.username;\n  };\n\n  const handleClearFilters = () => {\n    setFromDate('');\n    setToDate('');\n    setSelectedUserId('all');\n    setCurrentPage(1);\n  };\n\n  // Chart configurations\n  const dailyChartData = {\n    labels: analyticsData?.dailyStats?.map((stat: any) => stat.date) || [],\n    datasets: [\n      {\n        label: 'Location Requests',\n        data: analyticsData?.dailyStats?.map((stat: any) => stat.count) || [],\n        borderColor: 'rgb(249, 115, 22)',\n        backgroundColor: 'rgba(249, 115, 22, 0.1)',\n        tension: 0.4,\n        fill: true,\n      },\n    ],\n  };\n\n  const cityChartData = {\n    labels: analyticsData?.topCities?.slice(0, 5).map((city: any) => city.city) || [],\n    datasets: [\n      {\n        label: 'Requests by City',\n        data: analyticsData?.topCities?.slice(0, 5).map((city: any) => city.count) || [],\n        backgroundColor: [\n          'rgba(249, 115, 22, 0.8)',\n          'rgba(59, 130, 246, 0.8)',\n          'rgba(34, 197, 94, 0.8)',\n          'rgba(168, 85, 247, 0.8)',\n          'rgba(239, 68, 68, 0.8)',\n        ],\n        borderColor: [\n          'rgb(249, 115, 22)',\n          'rgb(59, 130, 246)',\n          'rgb(34, 197, 94)',\n          'rgb(168, 85, 247)',\n          'rgb(239, 68, 68)',\n        ],\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  const deviceChartData = {\n    labels: analyticsData?.deviceStats?.slice(0, 5).map((device: any) => device.device) || [],\n    datasets: [\n      {\n        data: analyticsData?.deviceStats?.slice(0, 5).map((device: any) => device.count) || [],\n        backgroundColor: [\n          'rgba(249, 115, 22, 0.8)',\n          'rgba(59, 130, 246, 0.8)',\n          'rgba(34, 197, 94, 0.8)',\n          'rgba(168, 85, 247, 0.8)',\n          'rgba(239, 68, 68, 0.8)',\n        ],\n        borderColor: [\n          'rgb(249, 115, 22)',\n          'rgb(59, 130, 246)',\n          'rgb(34, 197, 94)',\n          'rgb(168, 85, 247)',\n          'rgb(239, 68, 68)',\n        ],\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  const doughnutOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'right' as const,\n      },\n    },\n  };\n\n  // Data processing\n  const locations = (locationsData as any)?.items || [];\n  const total = (locationsData as any)?.total || 0;\n  const totalPages = Math.ceil(total / limit);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"p-3 bg-orange-100 dark:bg-orange-900/20 rounded-lg\">\n            <MapPin className=\"h-8 w-8 text-orange-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n              Client Location Analytics\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n              Comprehensive tracking and analytics for client location data\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"flex flex-col sm:flex-row gap-2\">\n              <Input\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n                placeholder=\"From date\"\n                className=\"border-orange-200 focus:border-orange-500\"\n                data-testid=\"input-from-date\"\n              />\n              <Input\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n                placeholder=\"To date\"\n                className=\"border-orange-200 focus:border-orange-500\"\n                data-testid=\"input-to-date\"\n              />\n            </div>\n            \n            <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n              <SelectTrigger className=\"w-full sm:w-[200px] border-orange-200 focus:border-orange-500\" data-testid=\"select-user-filter\">\n                <SelectValue placeholder=\"Filter by user\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All users</SelectItem>\n                {((usersData as any)?.items || []).map((user: any) => (\n                  <SelectItem key={user.id} value={user.id}>\n                    {user.firstName && user.lastName \n                      ? `${user.firstName} ${user.lastName}` \n                      : user.username}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Button \n              variant=\"outline\" \n              onClick={handleClearFilters}\n              className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n              data-testid=\"button-clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Analytics Overview */}\n      {analyticsData && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Locations</p>\n                  <p className=\"text-3xl font-bold text-orange-600\">{analyticsData.totalLocations}</p>\n                </div>\n                <div className=\"p-3 bg-orange-100 dark:bg-orange-900/20 rounded-lg\">\n                  <Globe className=\"h-6 w-6 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Avg Accuracy</p>\n                  <p className=\"text-3xl font-bold text-blue-600\">\n                    {Math.round(analyticsData?.accuracyStats?.average || 0)}m\n                  </p>\n                </div>\n                <div className=\"p-3 bg-blue-100 dark:bg-blue-900/20 rounded-lg\">\n                  <Target className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Top City</p>\n                  <p className=\"text-lg font-bold text-green-600\">\n                    {analyticsData.topCities?.[0]?.city || 'N/A'}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    {analyticsData.topCities?.[0]?.count || 0} requests\n                  </p>\n                </div>\n                <div className=\"p-3 bg-green-100 dark:bg-green-900/20 rounded-lg\">\n                  <Users className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Top Device</p>\n                  <p className=\"text-lg font-bold text-purple-600\">\n                    {analyticsData.deviceStats?.[0]?.device || 'N/A'}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    {analyticsData.deviceStats?.[0]?.count || 0} requests\n                  </p>\n                </div>\n                <div className=\"p-3 bg-purple-100 dark:bg-purple-900/20 rounded-lg\">\n                  <Smartphone className=\"h-6 w-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Charts and Data */}\n      <Tabs defaultValue=\"charts\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"charts\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Analytics Charts\n          </TabsTrigger>\n          <TabsTrigger value=\"data\" className=\"flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Raw Data\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"charts\" className=\"space-y-6\">\n          {/* Charts Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Daily Activity Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-orange-600\" />\n                  Daily Location Requests\n                </CardTitle>\n                <CardDescription>\n                  Timeline of location requests over time\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[300px]\">\n                  {analyticsLoading ? (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <div className=\"text-gray-500\">Loading chart...</div>\n                    </div>\n                  ) : (\n                    <Line data={dailyChartData} options={chartOptions} />\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Top Cities Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-5 w-5 text-blue-600\" />\n                  Top Cities\n                </CardTitle>\n                <CardDescription>\n                  Most active cities by location requests\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[300px]\">\n                  {analyticsLoading ? (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <div className=\"text-gray-500\">Loading chart...</div>\n                    </div>\n                  ) : (\n                    <Bar data={cityChartData} options={chartOptions} />\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Device Distribution Chart */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <PieChart className=\"h-5 w-5 text-purple-600\" />\n                  Device Distribution\n                </CardTitle>\n                <CardDescription>\n                  Breakdown of devices used for location requests\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[400px]\">\n                  {analyticsLoading ? (\n                    <div className=\"flex items-center justify-center h-full\">\n                      <div className=\"text-gray-500\">Loading chart...</div>\n                    </div>\n                  ) : (\n                    <Doughnut data={deviceChartData} options={doughnutOptions} />\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"data\">\n          {/* Location Data Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5 text-orange-600\" />\n                Location Data\n              </CardTitle>\n              <CardDescription>\n                Detailed view of all client location records\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {locationsLoading ? (\n                <div className=\"flex justify-center items-center h-32\">\n                  <div className=\"text-orange-600\">Loading locations...</div>\n                </div>\n              ) : locations.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-32 text-gray-500\">\n                  <MapPin className=\"h-12 w-12 mb-2\" />\n                  <p>No location data found</p>\n                  {(fromDate || toDate || selectedUserId !== 'all') && (\n                    <p className=\"text-sm mt-1\">Try adjusting your filters</p>\n                  )}\n                </div>\n              ) : (\n                <>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-orange-50 dark:bg-gray-700\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                            User\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                            Location\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                            Accuracy\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                            Device Info\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                            Timestamp\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                            Actions\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-orange-100 dark:divide-gray-700\">\n                        {locations.map((location: ClientLocation, index: number) => (\n                          <tr key={location.id} className=\"hover:bg-orange-50 dark:hover:bg-gray-700\" data-testid={`row-location-${index}`}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\" data-testid={`text-user-${index}`}>\n                                {getUserDisplayName(location.userId)}\n                              </div>\n                              {location.userId && (\n                                <div className=\"text-xs text-gray-500 mt-1\">\n                                  ID: {location.userId}\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900 dark:text-gray-100\" data-testid={`text-location-${index}`}>\n                                <div className=\"flex items-center\">\n                                  <MapPin className=\"h-4 w-4 mr-1 text-orange-600\" />\n                                  {formatCoordinate(location.latitude)}, {formatCoordinate(location.longitude)}\n                                </div>\n                                {location.metadata?.city && (\n                                  <div className=\"text-xs text-gray-500 mt-1\">\n                                    {location.metadata.city}{location.metadata.country && `, ${location.metadata.country}`}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900 dark:text-gray-100\" data-testid={`text-accuracy-${index}`}>\n                                {location.accuracy ? `${location.accuracy}m` : 'Unknown'}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900 dark:text-gray-100\" data-testid={`text-device-${index}`}>\n                                {location.metadata?.userAgent ? (\n                                  <div className=\"max-w-xs truncate\" title={location.metadata.userAgent}>\n                                    {location.metadata.userAgent.split(' ')[0]}\n                                  </div>\n                                ) : 'Unknown'}\n                                {location.metadata?.language && (\n                                  <div className=\"text-xs text-gray-500 mt-1\">\n                                    Language: {location.metadata.language}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900 dark:text-gray-100\" data-testid={`text-timestamp-${index}`}>\n                                {formatDate(location.createdAt || new Date().toISOString())}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedLocation(location);\n                                  setShowMapModal(true);\n                                }}\n                                className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                                data-testid={`button-show-map-${index}`}\n                              >\n                                <MapPin className=\"h-4 w-4 mr-1\" />\n                                Show Map\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n\n                  {/* Pagination */}\n                  {totalPages > 1 && (\n                    <div className=\"bg-white dark:bg-gray-800 px-4 py-3 border-t border-orange-100 dark:border-gray-700\">\n                      <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-3 sm:space-y-0\">\n                        <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                          Showing {((currentPage - 1) * limit) + 1} to {Math.min(currentPage * limit, total)} of {total} locations\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                            disabled={currentPage === 1}\n                            className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                            data-testid=\"button-prev-page\"\n                          >\n                            Previous\n                          </Button>\n                          \n                          <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                            Page {currentPage} of {totalPages}\n                          </span>\n                          \n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                            disabled={currentPage === totalPages}\n                            className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                            data-testid=\"button-next-page\"\n                          >\n                            Next\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Map Modal */}\n      <Dialog open={showMapModal} onOpenChange={setShowMapModal}>\n        <DialogContent className=\"max-w-4xl w-full h-[80vh]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5 text-orange-600\" />\n              Location Details\n            </DialogTitle>\n            <DialogDescription>\n              {selectedLocation && (\n                <div className=\"text-sm space-y-1\">\n                  <p><strong>User:</strong> {getUserDisplayName(selectedLocation.userId)}</p>\n                  <p><strong>Coordinates:</strong> {formatCoordinate(selectedLocation.latitude)}, {formatCoordinate(selectedLocation.longitude)}</p>\n                  <p><strong>Accuracy:</strong> {selectedLocation.accuracy ? `${selectedLocation.accuracy}m` : 'Unknown'}</p>\n                  <p><strong>Timestamp:</strong> {formatDate(selectedLocation.createdAt || new Date().toISOString())}</p>\n                </div>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex-1 w-full h-full min-h-[400px]\">\n            {selectedLocation && (\n              <div className=\"w-full h-full bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                <iframe\n                  src={`https://www.openstreetmap.org/export/embed.html?bbox=${parseFloat(selectedLocation.longitude)-0.01},${parseFloat(selectedLocation.latitude)-0.01},${parseFloat(selectedLocation.longitude)+0.01},${parseFloat(selectedLocation.latitude)+0.01}&layer=mapnik&marker=${selectedLocation.latitude},${selectedLocation.longitude}`}\n                  width=\"100%\"\n                  height=\"100%\"\n                  style={{ border: 0 }}\n                  allowFullScreen\n                  loading=\"lazy\"\n                  title=\"Location Map\"\n                ></iframe>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex justify-between items-center pt-4\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  if (selectedLocation) {\n                    const googleMapsUrl = `https://www.google.com/maps?q=${selectedLocation.latitude},${selectedLocation.longitude}`;\n                    window.open(googleMapsUrl, '_blank');\n                  }\n                }}\n                className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n              >\n                Open in Google Maps\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  if (selectedLocation) {\n                    const osmUrl = `https://www.openstreetmap.org/?mlat=${selectedLocation.latitude}&mlon=${selectedLocation.longitude}&zoom=15`;\n                    window.open(osmUrl, '_blank');\n                  }\n                }}\n                className=\"text-green-600 border-green-200 hover:bg-green-50\"\n              >\n                Open in OpenStreetMap\n              </Button>\n            </div>\n            <Button onClick={() => setShowMapModal(false)} className=\"bg-orange-600 hover:bg-orange-700\">\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":28363},"client/src/pages/property-detail.tsx":{"content":"import { useState, useEffect, useMemo, Suspense, lazy } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport ContactForm from \"@/components/contact-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useProperty, useAddToFavorites, useRemoveFromFavorites, useIsFavorite } from \"@/hooks/use-properties\";\nimport { useLocalFavorites } from \"@/hooks/use-local-favorites\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { SEOHead } from \"@/components/SEOHead\";\nimport type { Property } from \"@/types\";\nimport { extractPropertyIdentifier } from \"@shared/slug-utils\";\nimport { \n  Heart, Bed, Bath, Square, Car, MapPin, ArrowLeft, ArrowRight,\n  ChevronLeft, ChevronRight, Check, Calendar,\n  Eye, Phone, MessageSquare, Mail, Sun, Moon, Share2, Copy\n} from \"lucide-react\";\nimport { SiFacebook, SiX, SiWhatsapp, SiLinkedin } from \"react-icons/si\";\nimport { formatPrice, formatPricePerUnit, useCurrencyConversion } from \"@/lib/currency\";\nimport { useCurrency } from \"@/lib/currency-context\";\n\nexport default function PropertyDetailPage() {\n  const { id } = useParams();\n  const { t, changeLanguage, language: currentLanguage } = useTranslation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [isAutoSliding, setIsAutoSliding] = useState(true);\n  const userId = user?.id;\n  const [originalLanguage, setOriginalLanguage] = useState<string | null>(null);\n  const [theme, setTheme] = useState<'light' | 'dark'>(() => {\n    if (typeof window !== 'undefined') {\n      return document.documentElement.classList.contains('dark') ? 'dark' : 'light';\n    }\n    return 'light';\n  });\n  const { preferredCurrency } = useCurrency();\n\n\n  const { data: property, isLoading, error } = useProperty(id!);\n  \n  // Get currency conversion rate if needed\n  const conversionQuery = useCurrencyConversion(property?.currency || 'USD', preferredCurrency);\n  \n  // Calculate converted amount if currency conversion is available\n  const baseAmount = property ? parseFloat(property.price) : 0;\n  const convertedAmount = property && conversionQuery.data?.convertedAmount ? \n    (conversionQuery.data.convertedAmount * baseAmount) : baseAmount;\n  const displayCurrency = property && property.currency === preferredCurrency ? \n    property.currency : preferredCurrency;\n  \n  const addToFavorites = useAddToFavorites();\n  const removeFromFavorites = useRemoveFromFavorites();\n  const { data: favoriteData } = useIsFavorite(userId, property?.id || \"\");\n  const localFavorites = useLocalFavorites();\n\n  // Check both server favorites (for logged-in users) and local favorites (for guests)\n  const isFavorite = userId \n    ? (favoriteData?.isFavorite || false)\n    : localFavorites.isFavorite(property?.id || \"\");\n\n  // Property language detection and styling\n  const rawPropertyLanguage = property?.language || 'en';\n  // Handle legacy 'ku' language code and map to 'kur'\n  const propertyLanguage = rawPropertyLanguage === 'ku' ? 'kur' : rawPropertyLanguage;\n  const isPropertyRTL = propertyLanguage === 'ar' || propertyLanguage === 'kur';\n  \n  // Get language-specific class names for styling\n  const getLanguageClasses = () => {\n    const baseClasses = \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\";\n    if (isPropertyRTL) {\n      return `${baseClasses} text-right`;\n    }\n    return `${baseClasses} text-left`;\n  };\n\n  // Store original language on mount to restore later\n  useEffect(() => {\n    if (originalLanguage === null) {\n      setOriginalLanguage(currentLanguage);\n    }\n  }, [currentLanguage, originalLanguage]);\n\n  // Set property language without global persistence\n  useEffect(() => {\n    if (property && property.language) {\n      const validatedLanguage = propertyLanguage;\n      if (['en', 'ar', 'kur'].includes(validatedLanguage)) {\n        // Change translation context temporarily without persisting to localStorage\n        changeLanguage(validatedLanguage as 'en' | 'ar' | 'kur', false);\n      }\n    }\n  }, [property, propertyLanguage, changeLanguage]);\n\n  // Restore original language on unmount to prevent global leakage\n  useEffect(() => {\n    return () => {\n      if (originalLanguage && originalLanguage !== propertyLanguage) {\n        changeLanguage(originalLanguage as 'en' | 'ar' | 'kur', false);\n      }\n    };\n  }, [originalLanguage, propertyLanguage, changeLanguage]);\n\n  // Generate property structured data\n  const getPropertyStructuredData = (property: Property) => {\n    const images = Array.isArray(property.images) && property.images.length > 0 \n      ? property.images.map((img: any) => img.imageUrl || img) : [];\n    \n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"RealEstateListing\",\n      \"name\": property.title,\n      \"description\": property.description || `${property.title} in ${property.city}, ${property.country}`,\n      \"url\": `${window.location.origin}/property/${property.slug || property.id}`,\n      \"image\": images,\n      \"price\": {\n        \"@type\": \"MonetaryAmount\",\n        \"currency\": property.currency || \"USD\",\n        \"value\": property.price\n      },\n      \"address\": {\n        \"@type\": \"PostalAddress\",\n        \"streetAddress\": property.address,\n        \"addressLocality\": property.city,\n        \"addressCountry\": property.country\n      },\n      \"geo\": {\n        \"@type\": \"GeoCoordinates\",\n        \"latitude\": property.latitude,\n        \"longitude\": property.longitude\n      },\n      \"numberOfRooms\": property.bedrooms,\n      \"numberOfBathroomsTotal\": property.bathrooms,\n      \"floorSize\": {\n        \"@type\": \"QuantitativeValue\",\n        \"value\": property.area,\n        \"unitText\": \"square meters\"\n      },\n      \"availableFrom\": property.createdAt,\n      \"listingType\": property.listingType === 'rent' ? 'ForRent' : 'ForSale'\n    };\n  };\n\n  // Load theme from localStorage on component mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      if (savedTheme === 'dark') {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n    localStorage.setItem('theme', newTheme);\n  };\n\n  const handleFavoriteClick = async () => {\n    if (!property) return;\n\n    if (userId) {\n      // Logged-in user: use server-based favorites\n      try {\n        if (isFavorite) {\n          await removeFromFavorites.mutateAsync({ userId, propertyId: property.id });\n          toast({\n            title: t('property.removedFromFavorites'),\n            description: t('property.removedFromFavoritesDescription'),\n          });\n        } else {\n          await addToFavorites.mutateAsync({ userId, propertyId: property.id });\n          toast({\n            title: t('property.addedToFavorites'),\n            description: t('property.addedToFavoritesDescription'),\n          });\n        }\n      } catch (error) {\n        toast({\n          title: t('property.favoriteError'),\n          description: t('property.favoriteErrorDescription'),\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      // Guest user: use localStorage favorites\n      const wasFavorite = localFavorites.isFavorite(property.id);\n      localFavorites.toggleFavorite(property.id);\n      if (wasFavorite) {\n        toast({\n          title: t('property.removedFromFavorites'),\n          description: t('property.removedFromFavoritesDescription'),\n        });\n      } else {\n        toast({\n          title: t('property.addedToFavorites'),\n          description: t('property.addedToFavoritesDescription'),\n        });\n      }\n    }\n  };\n\n  const handleShare = async (platform?: string) => {\n    if (!property) return;\n\n    // Get the current language prefix from the URL to maintain language consistency\n    const currentPath = window.location.pathname;\n    const languageMatch = currentPath.match(/^\\/(en|ar|kur)\\//);\n    const languagePrefix = languageMatch ? `/${languageMatch[1]}` : '/en'; // Default to English if no prefix found\n    \n    const propertyUrl = `${window.location.origin}${languagePrefix}/property/${property.slug || property.id}`;\n    const shareTitle = `${property.title} - MapEstate`;\n    const shareText = `Check out this amazing ${property.type} in ${property.city}! ${formatPrice(property.price, property.currency || 'USD', property.listingType, displayCurrency, convertedAmount, t)}`;\n\n    // Try Web Share API first (mainly for mobile)\n    if (navigator.share && !platform) {\n      try {\n        await navigator.share({\n          title: shareTitle,\n          text: shareText,\n          url: propertyUrl,\n        });\n        return;\n      } catch (error) {\n        // Fall back to manual sharing if user cancels or API fails\n      }\n    }\n\n    // Manual sharing based on platform\n    switch (platform) {\n      case 'facebook':\n        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(propertyUrl)}`, '_blank');\n        break;\n      case 'twitter':\n        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(propertyUrl)}`, '_blank');\n        break;\n      case 'whatsapp':\n        window.open(`https://wa.me/?text=${encodeURIComponent(`${shareText} ${propertyUrl}`)}`, '_blank');\n        break;\n      case 'linkedin':\n        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(propertyUrl)}`, '_blank');\n        break;\n      case 'copy':\n        try {\n          await navigator.clipboard.writeText(propertyUrl);\n          toast({\n            title: t('property.linkCopied'),\n            description: t('property.linkCopiedDescription'),\n          });\n        } catch (error) {\n          // Fallback for older browsers\n          const textArea = document.createElement('textarea');\n          textArea.value = propertyUrl;\n          document.body.appendChild(textArea);\n          textArea.select();\n          document.execCommand('copy');\n          document.body.removeChild(textArea);\n          toast({\n            title: t('property.linkCopied'),\n            description: t('property.linkCopiedDescription'),\n          });\n        }\n        break;\n      default:\n        // If no platform specified and Web Share API failed, show copy functionality\n        handleShare('copy');\n    }\n  };\n\n\n  const nextImage = () => {\n    if (property?.images && property.images.length > 0) {\n      setCurrentImageIndex((prev) => (prev + 1) % property.images.length);\n    }\n  };\n\n  const prevImage = () => {\n    if (property?.images && property.images.length > 0) {\n      setCurrentImageIndex((prev) => \n        prev === 0 ? property.images.length - 1 : prev - 1\n      );\n    }\n  };\n\n  // Auto sliding functionality\n  useEffect(() => {\n    if (!isAutoSliding || !property?.images || property.images.length <= 1 || isFullScreen) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      nextImage();\n    }, 4000); // Change image every 4 seconds\n\n    return () => clearInterval(interval);\n  }, [isAutoSliding, property?.images, isFullScreen]);\n\n  const openFullScreen = () => {\n    setIsFullScreen(true);\n    setIsAutoSliding(false);\n  };\n\n  const closeFullScreen = () => {\n    setIsFullScreen(false);\n    setIsAutoSliding(true);\n  };\n\n  const toggleAutoSlide = () => {\n    setIsAutoSliding(!isAutoSliding);\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-32 mb-6\"></div>\n            <div className=\"h-96 bg-muted rounded mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <div className=\"h-8 bg-muted rounded w-3/4 mb-4\"></div>\n                <div className=\"h-4 bg-muted rounded w-1/2 mb-8\"></div>\n                <div className=\"grid grid-cols-4 gap-4 mb-8\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"h-20 bg-muted rounded\"></div>\n                  ))}\n                </div>\n                <div className=\"h-32 bg-muted rounded\"></div>\n              </div>\n              <div className=\"h-96 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !property) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">{t('property.notFound')}</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            {t('property.notFoundDescription')}\n          </p>\n          <Link href=\"/\">\n            <Button>{t('property.backToHome')}</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const firstImage = property.images?.[0];\n  const defaultSocialImage = `${window.location.origin}/uploads/properties/1759082074149-xrejrtvx6.jpg`;\n  \n  // Get primary image URL with proper formatting\n  let primaryImageUrl = '';\n  if (firstImage && typeof firstImage === 'object' && 'imageUrl' in firstImage) {\n    primaryImageUrl = firstImage.imageUrl;\n  } else if (firstImage) {\n    primaryImageUrl = firstImage as string;\n  } else {\n    primaryImageUrl = defaultSocialImage;\n  }\n  \n  // Ensure image URL is absolute for social sharing\n  const primaryImage = primaryImageUrl.startsWith('http') \n    ? primaryImageUrl \n    : `${window.location.origin}${primaryImageUrl.startsWith('/') ? primaryImageUrl : '/' + primaryImageUrl}`;\n    \n  const images = Array.isArray(property.images) && property.images.length > 0 \n    ? property.images.map((img: any) => img.imageUrl || img) : [primaryImageUrl];\n\n  // SEO data for meta tags\n  const seoTitle = `${property.title} - ${formatPrice(property.price, property.currency || 'USD', property.listingType, displayCurrency, convertedAmount, t)} | ${property.city}, Iraq | MapEstate`;\n  const seoDescription = property.description ? \n    (property.description.length > 160 ? \n      property.description.substring(0, 157) + '...' : \n      property.description) : \n    `${property.bedrooms} bedroom ${property.type} for ${property.listingType} in ${property.city}. ${property.address}. Contact our expert agents for viewing and details.`;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {property && (\n        <SEOHead\n          pageType=\"property-detail\"\n          title={seoTitle}\n          description={seoDescription}\n          propertyData={{\n            propertyType: property.type,\n            listingType: property.listingType,\n            price: formatPrice(property.price, property.currency || 'USD', property.listingType, displayCurrency, convertedAmount, t),\n            city: property.city,\n            bedrooms: property.bedrooms,\n            bathrooms: property.bathrooms,\n            address: property.address,\n            country: property.country,\n            currency: property.currency || 'USD',\n            area: property.area\n          }}\n          ogImage={primaryImage}\n          canonicalUrl={`${window.location.origin}${window.location.pathname}`}\n          structuredData={getPropertyStructuredData(property)}\n          breadcrumbs={[\n            { name: 'Home', url: '/' },\n            { name: 'Properties', url: '/properties' },\n            { name: property.title, url: `/property/${property.slug || property.id}` }\n          ]}\n        />\n      )}\n      \n      <div className={getLanguageClasses()} dir={isPropertyRTL ? 'rtl' : 'ltr'}>\n        {/* Top Navigation with Back Button and Theme Toggle */}\n        <div className={`flex items-center mb-6 ${isPropertyRTL ? 'justify-end' : 'justify-start'}`}>\n          <Link href=\"/\">\n            <Button \n              variant=\"ghost\" \n              data-testid=\"back-button\"\n              className={`flex items-center gap-2 ${isPropertyRTL ? 'flex-row-reverse' : ''}`}\n            >\n              {isPropertyRTL ? (\n                <ArrowLeft className=\"h-4 w-4\" />\n              ) : (\n                <ArrowLeft className=\"h-4 w-4\" />\n              )}\n              {t('property.backToHome')}\n            </Button>\n          </Link>\n          \n        </div>\n\n        {/* Image Gallery */}\n        <Card className=\"bg-white/20 dark:bg-black/20 backdrop-blur-xl border-white/30 dark:border-white/10 overflow-hidden mb-8\">\n          <div className=\"relative h-64 md:h-96\">\n            <img \n              src={images[currentImageIndex]}\n              alt={`${property.title} - Image ${currentImageIndex + 1}`}\n              className=\"w-full h-full object-cover\"\n              data-testid=\"property-main-image\"\n              loading=\"eager\"\n              decoding=\"async\"\n            />\n            \n            {/* Image Navigation */}\n            {images.length > 1 && (\n              <>\n                <Button\n                  variant=\"secondary\"\n                  size=\"icon\"\n                  className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white dark:bg-black/80 dark:hover:bg-black dark:text-white\"\n                  onClick={prevImage}\n                  data-testid=\"prev-image-button\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  size=\"icon\"\n                  className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white dark:bg-black/80 dark:hover:bg-black dark:text-white\"\n                  onClick={nextImage}\n                  data-testid=\"next-image-button\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n                \n                {/* Image Counter */}\n                <div className=\"absolute top-4 left-4 bg-orange-500/70 text-white px-3 py-1 rounded-full text-sm\">\n                  {currentImageIndex + 1} / {images.length}\n                </div>\n              </>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"absolute top-4 right-4 flex space-x-2\">\n              <Button\n                variant=\"secondary\"\n                size=\"icon\"\n                onClick={handleFavoriteClick}\n                className={`transition-all duration-200 ${\n                  isFavorite \n                    ? 'bg-red-50 hover:bg-red-100 text-red-500 border-red-200 dark:bg-red-900/20 dark:hover:bg-red-900/30 dark:text-red-400 dark:border-red-800' \n                    : 'bg-white/80 hover:bg-white text-gray-600 hover:text-gray-700 dark:bg-black/80 dark:hover:bg-black dark:text-gray-300 dark:hover:text-white'\n                }`}\n                data-testid=\"favorite-button\"\n              >\n                <Heart className={`h-4 w-4 transition-all duration-200 ${\n                  isFavorite ? 'fill-current scale-110' : 'hover:scale-105'\n                }`} />\n              </Button>\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    className=\"bg-white/80 hover:bg-white text-gray-600 hover:text-gray-700 dark:bg-black/80 dark:hover:bg-black dark:text-gray-300 dark:hover:text-white transition-all duration-200\"\n                    data-testid=\"share-button\"\n                  >\n                    <Share2 className=\"h-4 w-4 hover:scale-105 transition-all duration-200\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem onClick={() => handleShare('facebook')} data-testid=\"share-facebook\">\n                    <SiFacebook className=\"h-4 w-4 mr-2 text-blue-600\" />\n                    {t('property.shareOnFacebook')}\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleShare('twitter')} data-testid=\"share-twitter\">\n                    <SiX className=\"h-4 w-4 mr-2 text-gray-800 dark:text-white\" />\n                    {t('property.shareOnTwitter')}\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleShare('whatsapp')} data-testid=\"share-whatsapp\">\n                    <SiWhatsapp className=\"h-4 w-4 mr-2 text-green-600\" />\n                    {t('property.shareOnWhatsApp')}\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleShare('linkedin')} data-testid=\"share-linkedin\">\n                    <SiLinkedin className=\"h-4 w-4 mr-2 text-blue-700\" />\n                    {t('property.shareOnLinkedIn')}\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => handleShare('copy')} data-testid=\"share-copy\">\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    {t('property.copyLink')}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n          \n          {/* Thumbnail Gallery */}\n          {images.length > 1 && (\n            <div className=\"p-4 bg-gray-50 dark:bg-gray-800\">\n              <div className=\"flex gap-2 overflow-x-auto\">\n                {images.map((image, index) => (\n                  <div\n                    key={index}\n                    className={`flex-shrink-0 cursor-pointer rounded-lg overflow-hidden border-2 transition-all ${\n                      index === currentImageIndex \n                        ? 'border-primary shadow-md' \n                        : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'\n                    }`}\n                    onClick={() => setCurrentImageIndex(index)}\n                    data-testid={`thumbnail-${index}`}\n                  >\n                    <img\n                      src={image}\n                      alt={`${property.title} thumbnail ${index + 1}`}\n                      className=\"w-16 h-16 md:w-20 md:h-20 object-cover\"\n                      loading=\"lazy\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </Card>\n\n        {/* Full Screen Modal */}\n        {isFullScreen && (\n          <div className=\"fixed inset-0 bg-black z-50 flex items-center justify-center\">\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              <img\n                src={images[currentImageIndex]}\n                alt={`${property.title} - Full Screen ${currentImageIndex + 1}`}\n                className=\"max-w-full max-h-full object-contain\"\n                data-testid=\"fullscreen-image\"\n              />\n              \n              {/* Close button */}\n              <Button\n                variant=\"secondary\"\n                size=\"icon\"\n                className=\"absolute top-4 right-4 bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                onClick={closeFullScreen}\n                data-testid=\"close-fullscreen-button\"\n              >\n                <div className=\"h-4 w-4 flex items-center justify-center\">\n                  <div className=\"w-3 h-0.5 bg-current transform rotate-45 absolute\"></div>\n                  <div className=\"w-3 h-0.5 bg-current transform -rotate-45 absolute\"></div>\n                </div>\n              </Button>\n              \n              {/* Navigation buttons in full screen */}\n              {images.length > 1 && (\n                <>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                    onClick={prevImage}\n                    data-testid=\"fullscreen-prev-button\"\n                  >\n                    <ChevronLeft className=\"h-6 w-6\" />\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                    onClick={nextImage}\n                    data-testid=\"fullscreen-next-button\"\n                  >\n                    <ChevronRight className=\"h-6 w-6\" />\n                  </Button>\n                  \n                  {/* Image counter in full screen */}\n                  <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/70 text-white px-4 py-2 rounded-full text-sm\">\n                    {currentImageIndex + 1} / {images.length}\n                  </div>\n                </>  \n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            {/* Property Header */}\n            <div className=\"bg-gradient-to-r from-blue-50/80 to-purple-50/80 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-6 mb-8 border border-blue-200/30 dark:border-blue-700/30 backdrop-blur-sm\">\n              <div className=\"flex flex-col md:flex-row md:items-start md:justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-4 mb-2\">\n                  <Badge className={property.listingType === 'sale' \n                    ? 'bg-red-600 text-white' \n                    : 'bg-emerald-600 text-white'\n                  }>\n                    {property.listingType === 'sale' ? t('filter.forSale') : t('filter.forRent')}\n                  </Badge>\n                  {property.isFeatured && (\n                    <Badge variant=\"secondary\">{t('property.featured')}</Badge>\n                  )}\n                </div>\n                <h1 className=\"text-2xl md:text-3xl font-bold text-foreground mb-2\" data-testid=\"property-title\">\n                  {property.title}\n                </h1>\n                <div className=\"flex items-center text-muted-foreground mb-4\">\n                  <MapPin className=\"h-4 w-4 mr-1\" />\n                  <p data-testid=\"property-address\">\n                    {property.address}, {property.city}, {property.country}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-left md:text-right\">\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"property-price\">\n                  {formatPrice(property.price, property.currency, property.listingType, displayCurrency, convertedAmount, t)}\n                </div>\n                {property.area && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    {formatPricePerUnit(property.price, property.area, property.currency, displayCurrency, convertedAmount, t)}\n                  </div>\n                )}\n              </div>\n              </div>\n            </div>\n\n            {/* Property Features */}\n            <Card className=\"bg-gradient-to-br from-green-50/80 to-emerald-50/80 dark:from-green-900/20 dark:to-emerald-900/20 backdrop-blur-xl border-green-200/40 dark:border-green-700/40 mb-8\">\n              <CardContent className=\"p-4 sm:p-5 md:p-6\">\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4 md:gap-6\">\n                  {property.bedrooms && (\n                    <div className=\"flex items-center gap-3 md:flex-col md:items-center md:justify-center text-start md:text-center\" data-testid=\"bedrooms-info\">\n                      <Bed className=\"h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8 text-primary md:mx-auto shrink-0\" />\n                      <div>\n                        <div className=\"font-semibold text-base sm:text-lg md:text-xl\">{property.bedrooms}</div>\n                        <div className=\"text-[11px] sm:text-xs md:text-sm text-muted-foreground leading-tight\">{t('property.bedrooms')}</div>\n                      </div>\n                    </div>\n                  )}\n                  {property.bathrooms && (\n                    <div className=\"flex items-center gap-3 md:flex-col md:items-center md:justify-center text-start md:text-center\" data-testid=\"bathrooms-info\">\n                      <Bath className=\"h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8 text-primary md:mx-auto shrink-0\" />\n                      <div>\n                        <div className=\"font-semibold text-base sm:text-lg md:text-xl\">{property.bathrooms}</div>\n                        <div className=\"text-[11px] sm:text-xs md:text-sm text-muted-foreground leading-tight\">{t('property.bathrooms')}</div>\n                      </div>\n                    </div>\n                  )}\n                  {property.area && (\n                    <div className=\"flex items-center gap-3 md:flex-col md:items-center md:justify-center text-start md:text-center\" data-testid=\"area-info\">\n                      <Square className=\"h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8 text-primary md:mx-auto shrink-0\" />\n                      <div>\n                        <div className=\"font-semibold text-base sm:text-lg md:text-xl\">{property.area.toLocaleString()}</div>\n                        <div className=\"text-[11px] sm:text-xs md:text-sm text-muted-foreground leading-tight\">{t('property.sqFt')}</div>\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"flex items-center gap-3 md:flex-col md:items-center md:justify-center text-start md:text-center\">\n                    <Car className=\"h-5 w-5 sm:h-6 sm:w-6 md:h-8 md:w-8 text-primary md:mx-auto shrink-0\" />\n                    <div>\n                      <div className=\"font-semibold text-base sm:text-lg md:text-xl\">2</div>\n                      <div className=\"text-[11px] sm:text-xs md:text-sm text-muted-foreground leading-tight\">{t('property.parking')}</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Description */}\n            {property.description && (\n              <Card className=\"bg-gradient-to-r from-orange-50/80 to-amber-50/80 dark:from-orange-900/20 dark:to-amber-900/20 backdrop-blur-xl border-orange-200/40 dark:border-orange-700/40 mb-8\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">{t('property.description')}</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"property-description\">\n                    {property.description}\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Amenities & Features */}\n            <Card className=\"bg-gradient-to-bl from-indigo-50/80 to-cyan-50/80 dark:from-indigo-900/20 dark:to-cyan-900/20 backdrop-blur-xl border-indigo-200/40 dark:border-indigo-700/40 mb-8\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">{t('property.featuresAmenities')}</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {property.features?.length > 0 ? (\n                    <div>\n                      <h4 className=\"font-medium mb-2\">{t('property.features')}</h4>\n                      <div className=\"space-y-2\">\n                        {property.features.map((feature, index) => {\n                          // Handle both old string format and new object format from database\n                          const featureValue = typeof feature === 'string' ? feature : feature.feature;\n                          // Try to translate the key, fallback to the original value if translation doesn't exist\n                          const translatedFeature = t(`property.features.${featureValue}`) !== `property.features.${featureValue}` \n                            ? t(`property.features.${featureValue}`) \n                            : featureValue;\n                          return (\n                            <div key={index} className=\"flex items-center space-x-2\">\n                              <Check className=\"h-4 w-4 text-green-500\" />\n                              <span className=\"text-sm text-muted-foreground\">{translatedFeature}</span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ) : (\n                    <div>\n                      <h4 className=\"font-medium mb-2\">{t('property.features')}</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-muted-foreground\">{t('property.features.centralAC')}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-muted-foreground\">{t('property.features.hardwoodFloors')}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-muted-foreground\">{t('property.features.modernKitchen')}</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {property.amenities?.length > 0 ? (\n                    <div>\n                      <h4 className=\"font-medium mb-2\">{t('property.amenities')}</h4>\n                      <div className=\"space-y-2\">\n                        {property.amenities.map((amenity, index) => {\n                          // Handle both old string format and new object format from database\n                          const amenityValue = typeof amenity === 'string' ? amenity : amenity.amenity;\n                          // Try to translate the key, fallback to the original value if translation doesn't exist\n                          const translatedAmenity = t(`property.amenities.${amenityValue}`) !== `property.amenities.${amenityValue}` \n                            ? t(`property.amenities.${amenityValue}`) \n                            : amenityValue;\n                          return (\n                            <div key={index} className=\"flex items-center space-x-2\">\n                              <Check className=\"h-4 w-4 text-green-500\" />\n                              <span className=\"text-sm text-muted-foreground\">{translatedAmenity}</span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ) : (\n                    <div>\n                      <h4 className=\"font-medium mb-2\">{t('property.amenities')}</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-muted-foreground\">{t('property.amenities.gardenPatio')}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-muted-foreground\">{t('property.amenities.securitySystem')}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span className=\"text-sm text-muted-foreground\">{t('property.amenities.garageParking')}</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Property Stats */}\n            <Card className=\"bg-gradient-to-tr from-rose-50/80 to-pink-50/80 dark:from-rose-900/20 dark:to-pink-900/20 backdrop-blur-xl border-rose-200/40 dark:border-rose-700/40\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">{t('property.propertyInformation')}</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-left\">\n                  <div className=\"text-left\">\n                    <span className=\"text-muted-foreground\">{t('property.propertyType')} </span>\n                    <span className=\"font-medium capitalize bg-orange-500 text-white dark:bg-orange-600 px-2 py-1 rounded-md text-xs\">\n                      {t(`filter.${property.type}`) !== `filter.${property.type}` \n                        ? t(`filter.${property.type}`) \n                        : property.type}\n                    </span>\n                  </div>\n                  <div className=\"text-left\">\n                    <span className=\"text-muted-foreground\">{t('property.listed')} </span>\n                    <span className=\"font-medium bg-blue-100 dark:bg-blue-700 px-2 py-1 rounded-md text-xs\">\n                      <Calendar className=\"inline h-4 w-4 mr-1\" />\n                      {new Date(property.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"text-left\">\n                    <span className=\"text-muted-foreground\">{t('property.status')} </span>\n                    <Badge variant=\"secondary\" className=\"capitalize bg-green-500 text-white dark:bg-green-600 text-xs\">\n                      {t(`property.status.${property.status}`) !== `property.status.${property.status}` \n                        ? t(`property.status.${property.status}`) \n                        : property.status}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"lg:col-span-1\">\n            <ContactForm property={property} agent={property.agent || undefined} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":39158},"export-database.ts":{"content":"import mysql from 'mysql2/promise';\nimport { getValidatedDatabaseConfig } from './server/config/dbConfig';\nimport fs from 'fs';\nimport path from 'path';\n\nasync function exportDatabase() {\n  let connection: mysql.Connection | null = null;\n  \n  try {\n    const config = getValidatedDatabaseConfig();\n    \n    console.log(\"🔗 Connecting to MySQL database...\");\n    console.log(`   Host: ${config.host}:${config.port}`);\n    console.log(`   Database: ${config.database}`);\n    \n    connection = await mysql.createConnection({\n      host: config.host,\n      port: config.port,\n      user: config.user,\n      password: config.password,\n      database: config.database,\n    });\n    \n    console.log(\"✅ Connected to MySQL database\");\n    \n    const exportFileName = `database-export-${new Date().toISOString().split('T')[0]}.sql`;\n    const exportPath = path.resolve(exportFileName);\n    \n    console.log(`\\n📝 Exporting database to: ${exportPath}`);\n    \n    let sqlDump = `-- MapEstate Database Export\\n`;\n    sqlDump += `-- Date: ${new Date().toISOString()}\\n`;\n    sqlDump += `-- Database: ${config.database}\\n\\n`;\n    sqlDump += `SET NAMES utf8mb4;\\n`;\n    sqlDump += `SET FOREIGN_KEY_CHECKS = 0;\\n\\n`;\n    \n    // Get all tables\n    const [tables] = await connection.query<any[]>('SHOW TABLES');\n    const tableNames = tables.map(t => Object.values(t)[0] as string);\n    \n    console.log(`\\n📊 Found ${tableNames.length} tables to export:\\n`);\n    \n    for (const tableName of tableNames) {\n      console.log(`   Exporting table: ${tableName}...`);\n      \n      // Get CREATE TABLE statement\n      const [createResult] = await connection.query<any[]>(`SHOW CREATE TABLE \\`${tableName}\\``);\n      const createStatement = createResult[0]['Create Table'];\n      \n      sqlDump += `-- Table: ${tableName}\\n`;\n      sqlDump += `DROP TABLE IF EXISTS \\`${tableName}\\`;\\n`;\n      sqlDump += `${createStatement};\\n\\n`;\n      \n      // Get table data\n      const [rows] = await connection.query<any[]>(`SELECT * FROM \\`${tableName}\\``);\n      \n      if (rows.length > 0) {\n        console.log(`      → ${rows.length} rows`);\n        \n        sqlDump += `-- Data for table: ${tableName}\\n`;\n        sqlDump += `LOCK TABLES \\`${tableName}\\` WRITE;\\n`;\n        \n        // Build INSERT statements in batches\n        const batchSize = 100;\n        for (let i = 0; i < rows.length; i += batchSize) {\n          const batch = rows.slice(i, i + batchSize);\n          \n          const columns = Object.keys(batch[0]);\n          const columnList = columns.map(c => `\\`${c}\\``).join(', ');\n          \n          const values = batch.map(row => {\n            const vals = columns.map(col => {\n              const val = row[col];\n              if (val === null) return 'NULL';\n              if (val instanceof Date) return `'${val.toISOString().slice(0, 19).replace('T', ' ')}'`;\n              if (typeof val === 'string') return `'${val.replace(/'/g, \"''\")}'`;\n              if (typeof val === 'boolean') return val ? '1' : '0';\n              return val;\n            });\n            return `(${vals.join(', ')})`;\n          }).join(',\\n  ');\n          \n          sqlDump += `INSERT INTO \\`${tableName}\\` (${columnList}) VALUES\\n  ${values};\\n`;\n        }\n        \n        sqlDump += `UNLOCK TABLES;\\n\\n`;\n      } else {\n        console.log(`      → 0 rows (empty table)`);\n      }\n    }\n    \n    sqlDump += `SET FOREIGN_KEY_CHECKS = 1;\\n`;\n    \n    // Write to file\n    fs.writeFileSync(exportPath, sqlDump, 'utf-8');\n    \n    console.log(`\\n✅ Database exported successfully!`);\n    console.log(`📁 Export file: ${exportFileName}`);\n    console.log(`📊 File size: ${(fs.statSync(exportPath).size / 1024).toFixed(2)} KB`);\n    console.log(`\\n📤 Transfer this file to your VPS and import it using:`);\n    console.log(`   tsx server/import-sql.ts ${exportFileName}`);\n    \n  } catch (error: any) {\n    console.error(\"\\n❌ Export failed:\", error.message);\n    throw error;\n  } finally {\n    if (connection) {\n      await connection.end();\n      console.log(\"🔌 Database connection closed\");\n    }\n  }\n}\n\nexportDatabase()\n  .then(() => {\n    console.log(\"\\n✅ Export completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"\\n❌ Export failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":4312},"server/memStorage.ts":{"content":"import { \n  type User, type InsertUser, type UserLanguage, type InsertUserLanguage,\n  type Property, type InsertProperty, type PropertyWithDetails,\n  type PropertyImage, type InsertPropertyImage,\n  type PropertyAmenity, type InsertPropertyAmenity,\n  type PropertyFeature, type InsertPropertyFeature,\n  type Inquiry, type InsertInquiry,\n  type Favorite, type InsertFavorite,\n  type SearchHistory, type InsertSearchHistory,\n  type SearchFilter, type InsertSearchFilter,\n  type CustomerActivity, type InsertCustomerActivity,\n  type ActivityMetadata, type InsertActivityMetadata,\n  type CustomerPoints, type InsertCustomerPoints,\n  type Wave, type InsertWave,\n  type CustomerWavePermission, type InsertCustomerWavePermission,\n  type CurrencyRate, type InsertCurrencyRate, type UpdateCurrencyRate,\n  type ClientLocation, type InsertClientLocation,\n  type PropertyFilters\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\nimport { generatePropertySlug, generateUniqueSlug } from \"@shared/slug-utils\";\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private userLanguages: Map<string, UserLanguage[]> = new Map();\n  private properties: Map<string, Property> = new Map();\n  private propertyImages: Map<string, PropertyImage[]> = new Map();\n  private propertyAmenities: Map<string, PropertyAmenity[]> = new Map();\n  private propertyFeatures: Map<string, PropertyFeature[]> = new Map();\n  private inquiries: Map<string, Inquiry> = new Map();\n  private favorites: Map<string, Favorite[]> = new Map();\n  private searchHistory: Map<string, SearchHistory[]> = new Map();\n  private searchFilters: Map<string, SearchFilter[]> = new Map();\n  private customerActivity: Map<string, CustomerActivity[]> = new Map();\n  private activityMetadata: Map<string, ActivityMetadata[]> = new Map();\n  private customerPoints: Map<string, CustomerPoints[]> = new Map();\n  private waves: Map<string, Wave> = new Map();\n  private customerWavePermissions: Map<string, CustomerWavePermission[]> = new Map();\n  private currencyRates: Map<string, CurrencyRate> = new Map();\n  private clientLocations: Map<string, ClientLocation> = new Map();\n\n  private defaultUsersInitialized = false;\n\n  constructor() {\n    // Initialize default users only in development mode\n    if (process.env.NODE_ENV === 'development') {\n      this.initializeDefaultUsers();\n    }\n  }\n\n  private async initializeDefaultUsers(): Promise<void> {\n    if (this.defaultUsersInitialized) return;\n    \n    try {\n      const { hashPassword } = await import(\"./auth\");\n      \n      // Generate secure random password for admin\n      const adminPassword = process.env.ADMIN_PASSWORD || \"admin123\";\n      const agentPassword = process.env.AGENT_PASSWORD || \"agent123\";\n      \n      // Create default admin user\n      const adminId = this.generateId();\n      const hashedAdminPassword = await hashPassword(adminPassword);\n      \n      const adminUser: User = {\n        id: adminId,\n        username: \"admin\",\n        email: \"admin@estateai.com\",\n        password: hashedAdminPassword,\n        role: \"super_admin\",\n        firstName: \"System\",\n        lastName: \"Admin\",\n        phone: \"+964 750 000 0000\",\n        isVerified: true,\n        createdAt: new Date()\n      };\n      \n      this.users.set(adminId, adminUser);\n      \n      // Create default agent user\n      const agentId = this.generateId();\n      const hashedAgentPassword = await hashPassword(agentPassword);\n      \n      const agentUser: User = {\n        id: agentId,\n        username: \"john_agent\",\n        email: \"john@estateai.com\",\n        password: hashedAgentPassword,\n        role: \"agent\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n        phone: \"+964 750 123 4567\",\n        isVerified: true,\n        createdAt: new Date()\n      };\n      \n      this.users.set(agentId, agentUser);\n      \n      this.defaultUsersInitialized = true;\n      console.log(\"✅ Default users initialized in MemStorage (development mode)\");\n      console.log(\"🔑 Use 'admin' and 'john_agent' usernames to login\");\n      \n    } catch (error) {\n      console.error(\"❌ Error initializing default users:\", error);\n    }\n  }\n\n  private generateId(): string {\n    return crypto.randomUUID();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.username === username) return user;\n    }\n    return undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.email === email) return user;\n    }\n    return undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    await this.initializeDefaultUsers(); // Ensure initialization is complete\n    \n    const id = this.generateId();\n    \n    // Hash password before storing if it's not already hashed\n    let hashedPassword = user.password;\n    if (user.password && !user.password.startsWith('$2')) {\n      const { hashPassword } = await import(\"./auth\");\n      hashedPassword = await hashPassword(user.password);\n    }\n    \n    const newUser: User = {\n      id,\n      ...user,\n      password: hashedPassword,\n      createdAt: new Date(),\n    };\n    this.users.set(id, newUser);\n    return newUser;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const existing = this.users.get(id);\n    if (!existing) return undefined;\n    \n    // Hash password if it's being updated and not already hashed\n    let updatedUser = { ...user };\n    if (user.password && !user.password.startsWith('$2')) {\n      const { hashPassword } = await import(\"./auth\");\n      updatedUser.password = await hashPassword(user.password);\n    }\n    \n    const updated = { ...existing, ...updatedUser };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  async getUserLanguages(userId: string): Promise<UserLanguage[]> {\n    return this.userLanguages.get(userId) || [];\n  }\n\n  async addUserLanguage(userId: string, language: string): Promise<UserLanguage> {\n    const userLangs = this.userLanguages.get(userId) || [];\n    const newLang: UserLanguage = {\n      id: userLangs.length + 1,\n      userId,\n      language,\n      createdAt: new Date(),\n    };\n    userLangs.push(newLang);\n    this.userLanguages.set(userId, userLangs);\n    return newLang;\n  }\n\n  async removeUserLanguage(userId: string, language: string): Promise<boolean> {\n    const userLangs = this.userLanguages.get(userId) || [];\n    const filtered = userLangs.filter(lang => lang.language !== language);\n    this.userLanguages.set(userId, filtered);\n    return filtered.length < userLangs.length;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    await this.initializeDefaultUsers(); // Ensure initialization is complete\n    \n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    // Handle backward compatibility for existing plaintext passwords\n    const { comparePassword, hashPassword } = await import(\"./auth\");\n    \n    // If password is already hashed (starts with $2), use bcrypt comparison\n    if (user.password.startsWith('$2')) {\n      const isValidPassword = await comparePassword(password, user.password);\n      return isValidPassword ? user : null;\n    } else {\n      // Legacy plaintext comparison - rehash and update if successful\n      if (user.password === password) {\n        // Upgrade to hashed password\n        const hashedPassword = await hashPassword(password);\n        await this.updateUser(user.id, { password: hashedPassword });\n        return user;\n      }\n      return null;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  // Properties\n  async getProperty(id: string): Promise<PropertyWithDetails | undefined> {\n    const property = this.properties.get(id);\n    if (!property) return undefined;\n    \n    return {\n      ...property,\n      agent: property.agentId ? await this.getUser(property.agentId) : undefined,\n      wave: property.waveId ? await this.getWave(property.waveId) : undefined,\n      images: await this.getPropertyImages(id),\n      amenities: await this.getPropertyAmenities(id),\n      features: await this.getPropertyFeatures(id),\n      inquiries: await this.getInquiriesForProperty(id),\n      favorites: this.favorites.get(id) || []\n    };\n  }\n\n  async getPropertyBySlug(slug: string): Promise<PropertyWithDetails | undefined> {\n    for (const property of this.properties.values()) {\n      if (property.slug === slug) {\n        return this.getProperty(property.id);\n      }\n    }\n    return undefined;\n  }\n\n  async getProperties(filters?: PropertyFilters): Promise<PropertyWithDetails[]> {\n    const properties: PropertyWithDetails[] = [];\n    for (const property of this.properties.values()) {\n      const detailed = await this.getProperty(property.id);\n      if (detailed) properties.push(detailed);\n    }\n    return properties;\n  }\n\n  async getFeaturedProperties(): Promise<PropertyWithDetails[]> {\n    return this.getProperties();\n  }\n\n  async createProperty(property: InsertProperty, images?: string[], amenities?: string[], features?: string[]): Promise<Property> {\n    const id = this.generateId();\n    const slug = await generateUniqueSlug(property.title, (slug) => this.isSlugTaken(slug));\n    \n    const newProperty: Property = {\n      id,\n      slug,\n      ...property,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.properties.set(id, newProperty);\n    \n    if (images) {\n      for (let i = 0; i < images.length; i++) {\n        await this.addPropertyImage({ propertyId: id, imageUrl: images[i], sortOrder: i });\n      }\n    }\n    \n    if (amenities) {\n      await this.replacePropertyAmenities(id, amenities);\n    }\n    \n    if (features) {\n      await this.replacePropertyFeatures(id, features);\n    }\n    \n    return newProperty;\n  }\n\n  async updateProperty(id: string, property: Partial<InsertProperty>, images?: string[], amenities?: string[], features?: string[]): Promise<Property | undefined> {\n    const existing = this.properties.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { \n      ...existing, \n      ...property,\n      updatedAt: new Date()\n    };\n    \n    this.properties.set(id, updated);\n    \n    if (images) {\n      this.propertyImages.set(id, []);\n      for (let i = 0; i < images.length; i++) {\n        await this.addPropertyImage({ propertyId: id, imageUrl: images[i], sortOrder: i });\n      }\n    }\n    \n    if (amenities) {\n      await this.replacePropertyAmenities(id, amenities);\n    }\n    \n    if (features) {\n      await this.replacePropertyFeatures(id, features);\n    }\n    \n    return updated;\n  }\n\n  async deleteProperty(id: string): Promise<boolean> {\n    this.propertyImages.delete(id);\n    this.propertyAmenities.delete(id);\n    this.propertyFeatures.delete(id);\n    this.favorites.delete(id);\n    return this.properties.delete(id);\n  }\n\n  async incrementPropertyViews(id: string): Promise<void> {\n    const property = this.properties.get(id);\n    if (property) {\n      property.views = (property.views || 0) + 1;\n    }\n  }\n\n  async isSlugTaken(slug: string, excludePropertyId?: string): Promise<boolean> {\n    for (const property of this.properties.values()) {\n      if (property.slug === slug && property.id !== excludePropertyId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async clearAllProperties(): Promise<void> {\n    this.properties.clear();\n    this.propertyImages.clear();\n    this.propertyAmenities.clear();\n    this.propertyFeatures.clear();\n  }\n\n  // Property Images\n  async getPropertyImages(propertyId: string): Promise<PropertyImage[]> {\n    return this.propertyImages.get(propertyId) || [];\n  }\n\n  async getAllPropertyImages(): Promise<Array<PropertyImage & { propertyTitle?: string | null }>> {\n    const allImages: Array<PropertyImage & { propertyTitle?: string | null }> = [];\n    for (const [propertyId, images] of this.propertyImages.entries()) {\n      const property = this.properties.get(propertyId);\n      images.forEach(img => {\n        allImages.push({\n          ...img,\n          propertyTitle: property?.title || null\n        });\n      });\n    }\n    return allImages;\n  }\n\n  async addPropertyImage(image: InsertPropertyImage): Promise<PropertyImage> {\n    const images = this.propertyImages.get(image.propertyId) || [];\n    const newImage: PropertyImage = {\n      id: images.length + 1,\n      ...image,\n      createdAt: new Date(),\n    };\n    images.push(newImage);\n    this.propertyImages.set(image.propertyId, images);\n    return newImage;\n  }\n\n  async removePropertyImage(propertyId: string, imageUrl: string): Promise<boolean> {\n    const images = this.propertyImages.get(propertyId) || [];\n    const filtered = images.filter(img => img.imageUrl !== imageUrl);\n    this.propertyImages.set(propertyId, filtered);\n    return filtered.length < images.length;\n  }\n\n  async removePropertyImageWithResequencing(propertyId: string, imageUrl: string): Promise<{ success: boolean; remainingCount: number }> {\n    const images = this.propertyImages.get(propertyId) || [];\n    const initialCount = images.length;\n    \n    // Filter out the specific image\n    const filtered = images.filter(img => img.imageUrl !== imageUrl);\n    \n    if (filtered.length === initialCount) {\n      // Image was not found\n      return { success: false, remainingCount: initialCount };\n    }\n    \n    // Resequence the remaining images\n    filtered.forEach((img, index) => {\n      img.sortOrder = index;\n    });\n    \n    this.propertyImages.set(propertyId, filtered);\n    \n    return { success: true, remainingCount: filtered.length };\n  }\n\n  async updatePropertyImageOrder(propertyId: string, imageUpdates: { imageUrl: string; sortOrder: number }[]): Promise<void> {\n    const images = this.propertyImages.get(propertyId) || [];\n    for (const update of imageUpdates) {\n      const image = images.find(img => img.imageUrl === update.imageUrl);\n      if (image) {\n        image.sortOrder = update.sortOrder;\n      }\n    }\n  }\n\n  // Property Amenities\n  async getPropertyAmenities(propertyId: string): Promise<PropertyAmenity[]> {\n    return this.propertyAmenities.get(propertyId) || [];\n  }\n\n  async addPropertyAmenity(amenity: InsertPropertyAmenity): Promise<PropertyAmenity> {\n    const amenities = this.propertyAmenities.get(amenity.propertyId) || [];\n    const newAmenity: PropertyAmenity = {\n      id: amenities.length + 1,\n      ...amenity,\n      createdAt: new Date(),\n    };\n    amenities.push(newAmenity);\n    this.propertyAmenities.set(amenity.propertyId, amenities);\n    return newAmenity;\n  }\n\n  async removePropertyAmenity(propertyId: string, amenity: string): Promise<boolean> {\n    const amenities = this.propertyAmenities.get(propertyId) || [];\n    const filtered = amenities.filter(a => a.amenity !== amenity);\n    this.propertyAmenities.set(propertyId, filtered);\n    return filtered.length < amenities.length;\n  }\n\n  async replacePropertyAmenities(propertyId: string, amenities: string[]): Promise<void> {\n    this.propertyAmenities.set(propertyId, []);\n    for (const amenity of amenities) {\n      await this.addPropertyAmenity({ propertyId, amenity });\n    }\n  }\n\n  // Property Features\n  async getPropertyFeatures(propertyId: string): Promise<PropertyFeature[]> {\n    return this.propertyFeatures.get(propertyId) || [];\n  }\n\n  async addPropertyFeature(feature: InsertPropertyFeature): Promise<PropertyFeature> {\n    const features = this.propertyFeatures.get(feature.propertyId) || [];\n    const newFeature: PropertyFeature = {\n      id: features.length + 1,\n      ...feature,\n      createdAt: new Date(),\n    };\n    features.push(newFeature);\n    this.propertyFeatures.set(feature.propertyId, features);\n    return newFeature;\n  }\n\n  async removePropertyFeature(propertyId: string, feature: string): Promise<boolean> {\n    const features = this.propertyFeatures.get(propertyId) || [];\n    const filtered = features.filter(f => f.feature !== feature);\n    this.propertyFeatures.set(propertyId, filtered);\n    return filtered.length < features.length;\n  }\n\n  async replacePropertyFeatures(propertyId: string, features: string[]): Promise<void> {\n    this.propertyFeatures.set(propertyId, []);\n    for (const feature of features) {\n      await this.addPropertyFeature({ propertyId, feature });\n    }\n  }\n\n  // Language permissions\n  async grantAllLanguagePermissionsToUser(userId: string): Promise<void> {\n    const languages = ['en', 'ar', 'tr', 'ku'];\n    for (const lang of languages) {\n      await this.addUserLanguage(userId, lang);\n    }\n  }\n\n  async fixExistingUsersLanguagePermissions(): Promise<void> {\n    for (const user of this.users.values()) {\n      if (user.role === 'user') {\n        await this.grantAllLanguagePermissionsToUser(user.id);\n      }\n    }\n  }\n\n  // Inquiries\n  async getInquiry(id: string): Promise<Inquiry | undefined> {\n    return this.inquiries.get(id);\n  }\n\n  async getInquiriesForProperty(propertyId: string): Promise<Inquiry[]> {\n    return Array.from(this.inquiries.values()).filter(i => i.propertyId === propertyId);\n  }\n\n  async createInquiry(inquiry: InsertInquiry): Promise<Inquiry> {\n    const id = this.generateId();\n    const newInquiry: Inquiry = { id, ...inquiry, createdAt: new Date() };\n    this.inquiries.set(id, newInquiry);\n    return newInquiry;\n  }\n\n  async updateInquiryStatus(id: string, status: string): Promise<Inquiry | undefined> {\n    const inquiry = this.inquiries.get(id);\n    if (!inquiry) return undefined;\n    const updated = { ...inquiry, status };\n    this.inquiries.set(id, updated);\n    return updated;\n  }\n\n  // Favorites\n  async getFavoritesByUser(userId: string): Promise<PropertyWithDetails[]> {\n    const userFavorites = this.favorites.get(userId) || [];\n    const properties: PropertyWithDetails[] = [];\n    for (const fav of userFavorites) {\n      const property = await this.getProperty(fav.propertyId);\n      if (property) properties.push(property);\n    }\n    return properties;\n  }\n\n  async addToFavorites(favorite: InsertFavorite): Promise<Favorite> {\n    const userFavs = this.favorites.get(favorite.userId) || [];\n    const newFavorite: Favorite = {\n      id: userFavs.length + 1,\n      ...favorite,\n      createdAt: new Date(),\n    };\n    userFavs.push(newFavorite);\n    this.favorites.set(favorite.userId, userFavs);\n    return newFavorite;\n  }\n\n  async removeFromFavorites(userId: string, propertyId: string): Promise<boolean> {\n    const userFavs = this.favorites.get(userId) || [];\n    const filtered = userFavs.filter(f => f.propertyId !== propertyId);\n    this.favorites.set(userId, filtered);\n    return filtered.length < userFavs.length;\n  }\n\n  async isFavorite(userId: string, propertyId: string): Promise<boolean> {\n    const userFavs = this.favorites.get(userId) || [];\n    return userFavs.some(f => f.propertyId === propertyId);\n  }\n\n  // Search History\n  async addSearchHistory(search: InsertSearchHistory): Promise<SearchHistory> {\n    const userHistory = this.searchHistory.get(search.userId) || [];\n    const newSearch: SearchHistory = {\n      id: this.generateId(),\n      ...search,\n      createdAt: new Date(),\n    };\n    userHistory.push(newSearch);\n    this.searchHistory.set(search.userId, userHistory);\n    return newSearch;\n  }\n\n  async getSearchHistoryByUser(userId: string): Promise<SearchHistory[]> {\n    return this.searchHistory.get(userId) || [];\n  }\n\n  async addSearchFilter(filter: InsertSearchFilter): Promise<SearchFilter> {\n    const userFilters = this.searchFilters.get(filter.userId) || [];\n    const newFilter: SearchFilter = {\n      id: this.generateId(),\n      ...filter,\n      createdAt: new Date(),\n    };\n    userFilters.push(newFilter);\n    this.searchFilters.set(filter.userId, userFilters);\n    return newFilter;\n  }\n\n  // Customer Analytics\n  async addCustomerActivity(activity: InsertCustomerActivity): Promise<CustomerActivity> {\n    const userActivities = this.customerActivity.get(activity.userId) || [];\n    const newActivity: CustomerActivity = {\n      id: this.generateId(),\n      ...activity,\n      createdAt: new Date(),\n    };\n    userActivities.push(newActivity);\n    this.customerActivity.set(activity.userId, userActivities);\n    return newActivity;\n  }\n\n  async getCustomerActivities(userId: string, limit?: number): Promise<CustomerActivity[]> {\n    const activities = this.customerActivity.get(userId) || [];\n    return limit ? activities.slice(0, limit) : activities;\n  }\n\n  async getCustomerPoints(userId: string): Promise<CustomerPoints | undefined> {\n    const points = this.customerPoints.get(userId) || [];\n    return points[points.length - 1];\n  }\n\n  async updateCustomerPoints(userId: string, points: Partial<InsertCustomerPoints>): Promise<CustomerPoints> {\n    const existing = await this.getCustomerPoints(userId);\n    const updated: CustomerPoints = {\n      id: existing?.id || this.generateId(),\n      userId,\n      totalPoints: points.totalPoints ?? existing?.totalPoints ?? 0,\n      createdAt: existing?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    \n    const userPoints = this.customerPoints.get(userId) || [];\n    if (existing) {\n      const index = userPoints.findIndex(p => p.id === existing.id);\n      if (index >= 0) userPoints[index] = updated;\n    } else {\n      userPoints.push(updated);\n    }\n    this.customerPoints.set(userId, userPoints);\n    return updated;\n  }\n\n  async getCustomerAnalytics(userId: string): Promise<{\n    totalActivities: number;\n    activitiesByType: { activityType: string; count: number; points: number }[];\n    pointsHistory: { date: string; points: number }[];\n    monthlyActivity: { month: string; activities: number }[];\n  }> {\n    const activities = this.customerActivity.get(userId) || [];\n    const points = this.customerPoints.get(userId) || [];\n    \n    return {\n      totalActivities: activities.length,\n      activitiesByType: [],\n      pointsHistory: points.map(p => ({\n        date: p.createdAt?.toISOString() || '',\n        points: p.totalPoints || 0\n      })),\n      monthlyActivity: []\n    };\n  }\n\n  // Waves\n  async getWaves(): Promise<Wave[]> {\n    return Array.from(this.waves.values());\n  }\n\n  async getWave(id: string): Promise<Wave | undefined> {\n    return this.waves.get(id);\n  }\n\n  async createWave(wave: InsertWave): Promise<Wave> { \n    const id = this.generateId();\n    const newWave: Wave = { id, ...wave, createdAt: new Date(), updatedAt: new Date() };\n    this.waves.set(id, newWave);\n    return newWave;\n  }\n\n  async updateWave(id: string, wave: Partial<InsertWave>): Promise<Wave | undefined> {\n    const existing = this.waves.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...wave, updatedAt: new Date() };\n    this.waves.set(id, updated);\n    return updated;\n  }\n\n  async deleteWave(id: string): Promise<boolean> {\n    return this.waves.delete(id);\n  }\n\n  async getPropertiesByWave(waveId: string): Promise<Property[]> {\n    return Array.from(this.properties.values()).filter(p => p.waveId === waveId);\n  }\n\n  // Wave Permissions\n  async getCustomerWavePermissions(userId: string): Promise<CustomerWavePermission[]> {\n    return this.customerWavePermissions.get(userId) || [];\n  }\n\n  async grantWavePermission(permission: InsertCustomerWavePermission): Promise<CustomerWavePermission> {\n    const userPerms = this.customerWavePermissions.get(permission.userId) || [];\n    const newPerm: CustomerWavePermission = {\n      id: this.generateId(),\n      ...permission,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    userPerms.push(newPerm);\n    this.customerWavePermissions.set(permission.userId, userPerms);\n    return newPerm;\n  }\n\n  async revokeWavePermission(userId: string, waveId: string): Promise<boolean> {\n    const userPerms = this.customerWavePermissions.get(userId) || [];\n    const filtered = userPerms.filter(p => p.waveId !== waveId);\n    this.customerWavePermissions.set(userId, filtered);\n    return filtered.length < userPerms.length;\n  }\n\n  async getWavePermission(userId: string, waveId: string): Promise<CustomerWavePermission | undefined> {\n    const userPerms = this.customerWavePermissions.get(userId) || [];\n    return userPerms.find(p => p.waveId === waveId);\n  }\n\n  async updateWavePermission(id: string, permission: Partial<InsertCustomerWavePermission>): Promise<CustomerWavePermission | undefined> {\n    for (const [userId, perms] of this.customerWavePermissions.entries()) {\n      const index = perms.findIndex(p => p.id === id);\n      if (index >= 0) {\n        const updated = { ...perms[index], ...permission, updatedAt: new Date() };\n        perms[index] = updated;\n        return updated;\n      }\n    }\n    return undefined;\n  }\n\n  async getUserWaveUsage(userId: string): Promise<{ waveId: string; used: number; max: number }[]> {\n    return [];\n  }\n\n  async getUserRemainingWaves(userId: string): Promise<number> {\n    return 10;\n  }\n\n  async updateUsersWithZeroWaveBalance(): Promise<void> {}\n\n  async deductWaveBalance(userId: string, amount: number): Promise<boolean> {\n    return true;\n  }\n\n  async addWaveBalance(userId: string, amount: number): Promise<boolean> {\n    return true;\n  }\n\n  async checkWavePermission(userId: string, waveId: string | null | undefined): Promise<{ allowed: boolean; reason?: string }> {\n    return { allowed: true };\n  }\n\n  async incrementWaveUsage(userId: string, waveId: string | null | undefined): Promise<void> {}\n\n  async decrementWaveUsage(userId: string, waveId: string | null | undefined): Promise<void> {}\n\n  // Currency\n  async getCurrencyRates(): Promise<CurrencyRate[]> {\n    return Array.from(this.currencyRates.values());\n  }\n\n  async getActiveCurrencyRates(): Promise<CurrencyRate[]> {\n    return Array.from(this.currencyRates.values()).filter(r => r.isActive);\n  }\n\n  async getCurrencyRate(fromCurrency: string, toCurrency: string): Promise<CurrencyRate | undefined> {\n    return Array.from(this.currencyRates.values()).find(\n      r => r.fromCurrency === fromCurrency && r.toCurrency === toCurrency && r.isActive\n    );\n  }\n\n  async createCurrencyRate(rate: InsertCurrencyRate): Promise<CurrencyRate> {\n    const id = this.generateId();\n    const newRate: CurrencyRate = { id, ...rate, createdAt: new Date(), updatedAt: new Date() };\n    this.currencyRates.set(id, newRate);\n    return newRate;\n  }\n\n  async updateCurrencyRate(id: string, rate: UpdateCurrencyRate): Promise<CurrencyRate | undefined> {\n    const existing = this.currencyRates.get(id);\n    if (!existing) return undefined;\n    const updated = { ...existing, ...rate, updatedAt: new Date() };\n    this.currencyRates.set(id, updated);\n    return updated;\n  }\n\n  async deactivateCurrencyRate(id: string): Promise<boolean> {\n    const rate = this.currencyRates.get(id);\n    if (!rate) return false;\n    rate.isActive = false;\n    rate.updatedAt = new Date();\n    return true;\n  }\n\n  async convertPrice(amount: number, fromCurrency: string, toCurrency: string): Promise<number> {\n    const rate = await this.getCurrencyRate(fromCurrency, toCurrency);\n    return rate ? amount * rate.rate : amount;\n  }\n\n  // Client Locations\n  async createClientLocation(location: InsertClientLocation): Promise<ClientLocation> {\n    return this.addClientLocation(location);\n  }\n\n  async addClientLocation(location: InsertClientLocation): Promise<ClientLocation> {\n    const id = this.generateId();\n    const newLocation: ClientLocation = { id, ...location, createdAt: new Date() };\n    this.clientLocations.set(id, newLocation);\n    return newLocation;\n  }\n\n  async getClientLocations(filters?: any, limit?: number): Promise<ClientLocation[]> {\n    return Array.from(this.clientLocations.values());\n  }\n\n  async countClientLocations(filters?: any): Promise<number> {\n    return this.clientLocations.size;\n  }\n\n  async getClientLocationStats(): Promise<any> {\n    return { total: this.clientLocations.size, byCountry: [], byCity: [] };\n  }\n}","size_bytes":28154},"client/src/pages/about.tsx":{"content":"import { ArrowLeft, Brain, Users, Headphones, Shield, Award, Lightbulb } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { SEOHead } from \"@/components/SEOHead\";\n\nexport default function AboutPage() {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n      <SEOHead\n        pageType=\"about\"\n        canonicalUrl={undefined}\n        ogImage={`/uploads/properties/1759082074149-xrejrtvx6.jpg`}\n        breadcrumbs={[\n          { name: 'Home', url: '/' },\n          { name: 'About', url: '/about' }\n        ]}\n      />\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <Button \n                variant=\"ghost\" \n                className=\"flex items-center gap-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\n                data-testid=\"button-back-home\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                {t('about.backToHome')}\n              </Button>\n            </Link>\n            <Badge \n              variant=\"secondary\" \n              className=\"bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200\"\n            >\n              MapEstate\n            </Badge>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-8 space-y-12\">\n        {/* Hero Section */}\n        <section className=\"text-left space-y-4\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white\" data-testid=\"text-about-title\">\n            {t('about.title')}\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-2xl\" data-testid=\"text-about-subtitle\">\n            {t('about.subtitle')}\n          </p>\n        </section>\n\n        {/* Mission Section */}\n        <section className=\"max-w-4xl mx-auto\">\n          <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm\">\n            <CardHeader className=\"text-left\">\n              <CardTitle className=\"text-3xl text-gray-900 dark:text-white flex items-center gap-2\" data-testid=\"text-mission-title\">\n                <Shield className=\"h-8 w-8 text-orange-600\" />\n                {t('about.ourMission')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-lg text-gray-700 dark:text-gray-300 leading-relaxed text-left\" data-testid=\"text-mission-content\">\n                {t('about.missionText')}\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Story Section */}\n        <section className=\"max-w-4xl mx-auto\">\n          <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm\">\n            <CardHeader className=\"text-left\">\n              <CardTitle className=\"text-3xl text-gray-900 dark:text-white\" data-testid=\"text-story-title\">\n                {t('about.ourStory')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-lg text-gray-700 dark:text-gray-300 leading-relaxed text-left\" data-testid=\"text-story-content\">\n                {t('about.storyText')}\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Values Section */}\n        <section className=\"space-y-8\">\n          <h2 className=\"text-3xl font-bold text-left text-gray-900 dark:text-white\" data-testid=\"text-values-title\">\n            {t('about.ourValues')}\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"text-left\">\n                <Shield className=\"h-12 w-12 text-blue-600 mb-2\" />\n                <CardTitle className=\"text-xl text-gray-900 dark:text-white\" data-testid=\"text-value-transparency\">\n                  {t('about.valueTransparency')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 dark:text-gray-300 text-left\" data-testid=\"text-value-transparency-desc\">\n                  {t('about.valueTransparencyText')}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"text-left\">\n                <Lightbulb className=\"h-12 w-12 text-yellow-600 mb-2\" />\n                <CardTitle className=\"text-xl text-gray-900 dark:text-white\" data-testid=\"text-value-innovation\">\n                  {t('about.valueInnovation')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 dark:text-gray-300 text-left\" data-testid=\"text-value-innovation-desc\">\n                  {t('about.valueInnovationText')}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"text-left\">\n                <Award className=\"h-12 w-12 text-green-600 mb-2\" />\n                <CardTitle className=\"text-xl text-gray-900 dark:text-white\" data-testid=\"text-value-excellence\">\n                  {t('about.valueExcellence')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 dark:text-gray-300 text-left\" data-testid=\"text-value-excellence-desc\">\n                  {t('about.valueExcellenceText')}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Why Choose Us Section */}\n        <section className=\"space-y-8\">\n          <h2 className=\"text-3xl font-bold text-left text-gray-900 dark:text-white\" data-testid=\"text-why-choose-title\">\n            {t('about.whyChooseUs')}\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20 backdrop-blur-sm hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"text-left\">\n                <Brain className=\"h-12 w-12 text-orange-600 mb-2\" />\n                <CardTitle className=\"text-xl text-gray-900 dark:text-white\" data-testid=\"text-feature-ai\">\n                  {t('about.featureAI')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 dark:text-gray-300 text-left\" data-testid=\"text-feature-ai-desc\">\n                  {t('about.featureAIText')}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 backdrop-blur-sm hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"text-left\">\n                <Users className=\"h-12 w-12 text-blue-600 mb-2\" />\n                <CardTitle className=\"text-xl text-gray-900 dark:text-white\" data-testid=\"text-feature-local\">\n                  {t('about.featureLocal')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 dark:text-gray-300 text-left\" data-testid=\"text-feature-local-desc\">\n                  {t('about.featureLocalText')}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 backdrop-blur-sm hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"text-left\">\n                <Headphones className=\"h-12 w-12 text-green-600 mb-2\" />\n                <CardTitle className=\"text-xl text-gray-900 dark:text-white\" data-testid=\"text-feature-support\">\n                  {t('about.featureSupport')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 dark:text-gray-300 text-left\" data-testid=\"text-feature-support-desc\">\n                  {t('about.featureSupportText')}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Contact Section */}\n        <section className=\"text-left bg-gradient-to-r from-orange-500 to-orange-600 rounded-2xl p-8 text-white\">\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"text-contact-title\">\n            {t('about.contactUs')}\n          </h2>\n          <p className=\"text-xl mb-6 opacity-90\" data-testid=\"text-contact-content\">\n            {t('about.contactText')}\n          </p>\n          <Link href=\"/\">\n            <Button \n              variant=\"secondary\" \n              size=\"lg\" \n              className=\"bg-white text-orange-600 hover:bg-gray-100\"\n              data-testid=\"button-contact-home\"\n            >\n              {t('about.backToHome')}\n            </Button>\n          </Link>\n        </section>\n      </main>\n    </div>\n  );\n}","size_bytes":9691},"client/src/components/CustomerAnalytics.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer \n} from 'recharts';\nimport { \n  Activity, Award, TrendingUp, Calendar, Eye, Heart, Search, \n  MessageSquare, User, Plus, Star, BarChart3 \n} from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface CustomerAnalyticsProps {\n  customerId: string;\n  customerName: string;\n}\n\ninterface CustomerPoints {\n  userId: string;\n  totalPoints: number;\n  currentLevel: string;\n  pointsThisMonth: number;\n  lastActivity: string | null;\n}\n\ninterface CustomerActivity {\n  id: string;\n  userId: string;\n  activityType: string;\n  propertyId?: string | null;\n  metadata: Record<string, any>;\n  points: number;\n  createdAt: string;\n}\n\ninterface CustomerAnalytics {\n  totalActivities: number;\n  activitiesByType: { activityType: string; count: number; points: number }[];\n  pointsHistory: { date: string; points: number }[];\n  monthlyActivity: { month: string; activities: number }[];\n}\n\nconst ACTIVITY_COLORS = {\n  property_view: '#3b82f6',\n  search: '#10b981',\n  favorite_add: '#f59e0b',\n  favorite_remove: '#ef4444',\n  inquiry_sent: '#8b5cf6',\n  login: '#06b6d4',\n  profile_update: '#84cc16'\n};\n\nconst ACTIVITY_ICONS = {\n  property_view: Eye,\n  search: Search,\n  favorite_add: Heart,\n  favorite_remove: Heart,\n  inquiry_sent: MessageSquare,\n  login: User,\n  profile_update: User\n};\n\nconst LEVEL_COLORS = {\n  Bronze: '#cd7f32',\n  Silver: '#c0c0c0',\n  Gold: '#ffd700',\n  Platinum: '#e5e4e2'\n};\n\nexport function CustomerAnalytics({ customerId, customerName }: CustomerAnalyticsProps) {\n  const [pointsToAdd, setPointsToAdd] = useState(0);\n  const [selectedActivityType, setSelectedActivityType] = useState('property_view');\n\n  // Fetch customer points\n  const { data: customerPoints, isLoading: pointsLoading } = useQuery<CustomerPoints>({\n    queryKey: [`/api/customers/${customerId}/points`],\n    enabled: !!customerId\n  });\n\n  // Fetch customer activities\n  const { data: customerActivities = [], isLoading: activitiesLoading } = useQuery<CustomerActivity[]>({\n    queryKey: [`/api/customers/${customerId}/activities`],\n    enabled: !!customerId\n  });\n\n  // Fetch customer analytics\n  const { data: analytics, isLoading: analyticsLoading } = useQuery<CustomerAnalytics>({\n    queryKey: [`/api/customers/${customerId}/analytics`],\n    enabled: !!customerId\n  });\n\n  const addCustomerActivity = async () => {\n    try {\n      await apiRequest(`/api/customers/${customerId}/activity`, {\n        method: 'POST',\n        body: JSON.stringify({\n          activityType: selectedActivityType,\n          points: pointsToAdd,\n          metadata: {\n            source: 'admin_dashboard',\n            timestamp: new Date().toISOString()\n          }\n        })\n      });\n\n      // Invalidate and refetch all customer data\n      queryClient.invalidateQueries({ queryKey: [`/api/customers/${customerId}/points`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/customers/${customerId}/activities`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/customers/${customerId}/analytics`] });\n\n      setPointsToAdd(0);\n    } catch (error) {\n      console.error('Failed to add customer activity:', error);\n    }\n  };\n\n  const formatActivityType = (type: string) => {\n    return type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getActivityIcon = (type: string) => {\n    const IconComponent = ACTIVITY_ICONS[type as keyof typeof ACTIVITY_ICONS] || Activity;\n    return <IconComponent className=\"h-4 w-4\" />;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (pointsLoading || activitiesLoading || analyticsLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin h-8 w-8 border-4 border-orange-600 border-t-transparent rounded-full\"></div>\n        <span className=\"ml-3\">Loading analytics...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Customer Points Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Award className=\"h-4 w-4 mr-2\" />\n              Total Points\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {customerPoints?.totalPoints || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              Current Level\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Badge \n              style={{ \n                backgroundColor: LEVEL_COLORS[customerPoints?.currentLevel as keyof typeof LEVEL_COLORS] || LEVEL_COLORS.Bronze,\n                color: 'white'\n              }}\n            >\n              {customerPoints?.currentLevel || 'Bronze'}\n            </Badge>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              This Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {customerPoints?.pointsThisMonth || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Activity className=\"h-4 w-4 mr-2\" />\n              Total Activities\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {analytics?.totalActivities || 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add Points Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Plus className=\"h-5 w-5 mr-2\" />\n            Add Customer Activity\n          </CardTitle>\n          <CardDescription>\n            Award points to {customerName} for their engagement\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"activity-type\">Activity Type</Label>\n              <select \n                id=\"activity-type\"\n                value={selectedActivityType}\n                onChange={(e) => setSelectedActivityType(e.target.value)}\n                className=\"w-full mt-1 p-2 border border-gray-300 rounded-md\"\n              >\n                <option value=\"property_view\">Property View</option>\n                <option value=\"search\">Search</option>\n                <option value=\"favorite_add\">Favorite Added</option>\n                <option value=\"inquiry_sent\">Inquiry Sent</option>\n                <option value=\"login\">Login</option>\n                <option value=\"profile_update\">Profile Update</option>\n              </select>\n            </div>\n            <div>\n              <Label htmlFor=\"points\">Points to Award</Label>\n              <Input\n                id=\"points\"\n                type=\"number\"\n                value={pointsToAdd}\n                onChange={(e) => setPointsToAdd(parseInt(e.target.value) || 0)}\n                min={0}\n                max={100}\n                data-testid=\"input-points-to-add\"\n              />\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                onClick={addCustomerActivity}\n                className=\"w-full\"\n                data-testid=\"button-add-activity\"\n              >\n                Add Activity\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Analytics Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n          <TabsTrigger value=\"history\">History</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Activities by Type Pie Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Activities by Type</CardTitle>\n                <CardDescription>Breakdown of customer engagement activities</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={analytics?.activitiesByType || []}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, value }) => `${formatActivityType(name)}: ${value}`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {analytics?.activitiesByType?.map((entry, index) => (\n                        <Cell \n                          key={`cell-${index}`} \n                          fill={ACTIVITY_COLORS[entry.activityType as keyof typeof ACTIVITY_COLORS] || '#8884d8'} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Points by Activity Type */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Points by Activity Type</CardTitle>\n                <CardDescription>Points earned from different activities</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={analytics?.activitiesByType || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"activityType\"\n                      tick={{ fontSize: 12 }}\n                      tickFormatter={formatActivityType}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(value) => formatActivityType(value as string)}\n                      formatter={(value) => [`${value} points`, 'Points']}\n                    />\n                    <Bar dataKey=\"points\" fill=\"#f59e0b\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"activities\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Activities</CardTitle>\n              <CardDescription>Latest customer engagement activities</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {customerActivities.map((activity) => (\n                  <div key={activity.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"p-2 rounded-full bg-gray-100\">\n                        {getActivityIcon(activity.activityType)}\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{formatActivityType(activity.activityType)}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {formatDate(activity.createdAt)}\n                        </div>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\">\n                      +{activity.points} points\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Points History Line Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Points History (Last 30 Days)</CardTitle>\n                <CardDescription>Daily points earned over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={analytics?.pointsHistory || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"points\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Monthly Activity Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Activity Trend</CardTitle>\n                <CardDescription>Activity levels over the last 12 months</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={analytics?.monthlyActivity || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"activities\" \n                      stroke=\"#3b82f6\" \n                      fill=\"#3b82f6\" \n                      fillOpacity={0.6}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Complete Activity History</CardTitle>\n              <CardDescription>Detailed log of all customer activities</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left p-2\">Date</th>\n                      <th className=\"text-left p-2\">Activity</th>\n                      <th className=\"text-left p-2\">Points</th>\n                      <th className=\"text-left p-2\">Details</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {customerActivities.map((activity) => (\n                      <tr key={activity.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"p-2\">{formatDate(activity.createdAt)}</td>\n                        <td className=\"p-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {getActivityIcon(activity.activityType)}\n                            <span>{formatActivityType(activity.activityType)}</span>\n                          </div>\n                        </td>\n                        <td className=\"p-2\">\n                          <Badge variant=\"outline\">+{activity.points}</Badge>\n                        </td>\n                        <td className=\"p-2 text-gray-500\">\n                          {activity.propertyId ? `Property: ${activity.propertyId.substring(0, 8)}...` : 'General activity'}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17091},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/routes.ts":{"content":"import type { Express, Response } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { fileURLToPath } from 'url';\nimport { StorageFactory } from \"./storageFactory\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nimport { \n  insertPropertySchema, updatePropertySchema, insertInquirySchema, insertFavoriteSchema, insertUserSchema,\n  insertWaveSchema, insertCustomerWavePermissionSchema, insertCurrencyRateSchema, updateCurrencyRateSchema,\n  insertClientLocationSchema\n} from \"@shared/schema\";\nimport { extractPropertyIdentifier } from \"@shared/slug-utils\";\nimport { hashPassword, requireAuth, requireRole, requireAnyRole, populateUser, validateLanguagePermission, checkExpiration } from \"./auth\";\nimport session from \"express-session\";\nimport { z } from \"zod\";\nimport sitemapRouter from \"./routes/sitemap\";\nimport { registerPerformanceRoutes } from \"./routes/performance\";\nimport { \n  authRateLimit, searchRateLimit, apiRateLimit, adminRateLimit, \n  heavyOperationRateLimit, uploadRateLimit \n} from \"./middleware/rateLimiting\";\nimport { \n  cacheControl, handleConditionalRequest, trackQueryPerformance,\n  performanceMonitor \n} from \"./middleware/performance\";\n\n// SSE client management\nconst sseClients = new Set<Response>();\n\nfunction broadcastToSSEClients(event: string, data: any) {\n  // Structure payload to avoid property type field overwriting event type\n  const payload = { \n    eventType: event,\n    data: data\n  };\n  \n  // Send both custom event and default message for maximum compatibility\n  const customEventMessage = `event: ${event}\\ndata: ${JSON.stringify(data)}\\n\\n`;\n  const defaultMessage = `data: ${JSON.stringify(payload)}\\n\\n`;\n  \n  console.log(`📡 Broadcasting ${event} to ${sseClients.size} connected clients:`, data.title || data.id);\n  \n  // Send to all connected clients\n  sseClients.forEach(client => {\n    try {\n      // Send both formats to ensure compatibility\n      client.write(customEventMessage);\n      client.write(defaultMessage);\n    } catch (error) {\n      console.error(`❌ Failed to send ${event} to client:`, error);\n      // Remove disconnected clients\n      sseClients.delete(client);\n    }\n  });\n}\n\nimport type { IStorage } from \"./storage\";\n\nexport async function registerRoutes(app: Express, storageInstance?: IStorage): Promise<Server> {\n  // Use provided storage or get from factory\n  const storage = storageInstance || StorageFactory.getInstance();\n\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Add user to all requests\n  app.use(populateUser);\n\n  // SEO routes\n  app.use(sitemapRouter);\n\n  // Performance monitoring routes\n  registerPerformanceRoutes(app);\n\n  // Authentication routes with rate limiting\n  app.post(\"/api/auth/login\", authRateLimit, async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      const user = await storage.authenticateUser(username, password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n      \n      // Set session\n      req.session.userId = user.id;\n      \n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, message: \"Login successful\" });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", authRateLimit, (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Fetch user's language permissions\n      const userLanguages = await storage.getUserLanguages(req.session.userId!);\n      const allowedLanguages = userLanguages.map(ul => ul.language);\n      \n      const { password: _, ...userWithoutPassword } = user;\n      \n      // Include language permissions in the response\n      const userWithLanguages = {\n        ...userWithoutPassword,\n        allowedLanguages: allowedLanguages.length > 0 ? allowedLanguages : ['en'] // Default to English if no languages assigned\n      };\n      \n      res.json(userWithLanguages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Get user's language permissions\n  app.get(\"/api/users/:id/languages\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userLanguages = await storage.getUserLanguages(id);\n      res.json(userLanguages.map(ul => ul.language));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user languages\" });\n    }\n  });\n\n  // Add language permission to user (super admin only)\n  app.post(\"/api/users/:id/languages\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { language } = req.body;\n      \n      if (!language) {\n        return res.status(400).json({ message: \"Language is required\" });\n      }\n      \n      // Check if language is supported\n      const supportedLanguages = [\"en\", \"ar\", \"kur\"];\n      if (!supportedLanguages.includes(language)) {\n        return res.status(400).json({ \n          message: `Unsupported language '${language}'. Supported languages: ${supportedLanguages.join(', ')}` \n        });\n      }\n      \n      // Check if user exists\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      await storage.addUserLanguage(id, language);\n      res.json({ message: `Language '${language}' added to user successfully` });\n    } catch (error) {\n      console.error(\"Failed to add user language:\", error);\n      res.status(500).json({ message: \"Failed to add user language\" });\n    }\n  });\n\n  // Remove language permission from user (super admin only)\n  app.delete(\"/api/users/:id/languages/:language\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { id, language } = req.params;\n      \n      // Check if user exists\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      await storage.removeUserLanguage(id, language);\n      res.json({ message: `Language '${language}' removed from user successfully` });\n    } catch (error) {\n      console.error(\"Failed to remove user language:\", error);\n      res.status(500).json({ message: \"Failed to remove user language\" });\n    }\n  });\n\n  // Set all language permissions for user (super admin only)\n  app.put(\"/api/users/:id/languages\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { languages } = req.body;\n      \n      if (!Array.isArray(languages)) {\n        return res.status(400).json({ message: \"Languages must be an array\" });\n      }\n      \n      // Check if all languages are supported\n      const supportedLanguages = [\"en\", \"ar\", \"kur\"];\n      const invalidLanguages = languages.filter(lang => !supportedLanguages.includes(lang));\n      if (invalidLanguages.length > 0) {\n        return res.status(400).json({ \n          message: `Unsupported languages: ${invalidLanguages.join(', ')}. Supported languages: ${supportedLanguages.join(', ')}` \n        });\n      }\n      \n      // Check if user exists\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Remove all existing languages\n      const currentLanguages = await storage.getUserLanguages(id);\n      for (const userLang of currentLanguages) {\n        await storage.removeUserLanguage(id, userLang.language);\n      }\n      \n      // Add new languages\n      for (const language of languages) {\n        await storage.addUserLanguage(id, language);\n      }\n      \n      res.json({ message: `User language permissions updated successfully. Languages: ${languages.join(', ')}` });\n    } catch (error) {\n      console.error(\"Failed to update user languages:\", error);\n      res.status(500).json({ message: \"Failed to update user languages\" });\n    }\n  });\n\n  // Fix existing users language permissions (super admin only)\n  app.post(\"/api/users/fix-language-permissions\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      await storage.fixExistingUsersLanguagePermissions();\n      res.json({ message: \"Successfully fixed language permissions for all existing users\" });\n    } catch (error) {\n      console.error(\"Failed to fix user language permissions:\", error);\n      res.status(500).json({ message: \"Failed to fix user language permissions\" });\n    }\n  });\n\n  // Wave balance information\n  app.get(\"/api/auth/wave-balance\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const [currentUsage, remainingWaves] = await Promise.all([\n        storage.getUserWaveUsage(userId),\n        storage.getUserRemainingWaves(userId)\n      ]);\n\n      const user = await storage.getUser(userId);\n      const totalBalance = user?.waveBalance || 0;\n\n      res.json({\n        totalBalance,\n        currentUsage,\n        remainingWaves,\n        hasUnlimited: user?.role === 'admin' || user?.role === 'super_admin'\n      });\n    } catch (error) {\n      console.error(\"Failed to get wave balance:\", error);\n      res.status(500).json({ message: \"Failed to get wave balance\" });\n    }\n  });\n\n  // Multer configuration for file uploads\n  // Use environment variable for uploads path or default to relative path\n  const baseUploadsPath = process.env.UPLOADS_PATH || path.join(__dirname, 'uploads');\n  \n  const ALLOWED_UPLOAD_TYPES = {\n    'avatar': path.join(baseUploadsPath, 'avatar'),\n    'customer': path.join(baseUploadsPath, 'customer'), \n    'properties': path.join(baseUploadsPath, 'properties')\n  } as const;\n  \n  // Ensure upload directories exist\n  Object.values(ALLOWED_UPLOAD_TYPES).forEach(dir => {\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n      console.log(`📁 Created upload directory: ${dir}`);\n    }\n  });\n\n  const storage_multer = multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadType = req.params.type as string;\n      const folderPath = ALLOWED_UPLOAD_TYPES[uploadType as keyof typeof ALLOWED_UPLOAD_TYPES];\n      \n      if (!folderPath) {\n        return cb(new Error('Invalid upload type'), '');\n      }\n      \n      cb(null, folderPath);\n    },\n    filename: (req, file, cb) => {\n      const uniqueName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}${path.extname(file.originalname)}`;\n      cb(null, uniqueName);\n    }\n  });\n\n  const upload = multer({\n    storage: storage_multer,\n    limits: { \n      fileSize: 5 * 1024 * 1024 // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Invalid file type. Only JPEG, PNG, and WebP images are allowed.'));\n      }\n    }\n  });\n\n  // Helper function to get base URL for images from incoming request\n  // Automatically detects the correct server URL\n  function getImageBaseUrl(req: express.Request): string {\n    // Use environment variable if explicitly set\n    if (process.env.IMAGE_BASE_URL) {\n      return process.env.IMAGE_BASE_URL;\n    }\n    \n    // Auto-detect from request headers\n    const protocol = req.get('x-forwarded-proto') || req.protocol || 'http';\n    const host = req.get('x-forwarded-host') || req.get('host') || 'localhost:5000';\n    return `${protocol}://${host}`;\n  }\n\n  // File upload endpoints\n  app.post(\"/api/upload/:type\", requireAuth, uploadRateLimit, upload.single('file'), async (req, res) => {\n    try {\n      const { type } = req.params;\n      \n      // Validate upload type\n      if (!['avatar', 'customer', 'properties'].includes(type)) {\n        return res.status(400).json({ message: \"Invalid upload type. Use 'avatar', 'customer', or 'properties'\" });\n      }\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n      \n      // Generate URL using configured IMAGE_BASE_URL or auto-detect from request\n      const baseUrl = getImageBaseUrl(req);\n      const fileUrl = `${baseUrl}/uploads/${type}/${req.file.filename}`;\n      \n      res.json({\n        message: \"File uploaded successfully\",\n        url: fileUrl,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        size: req.file.size\n      });\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  // Serve static files - use same base path as multer\n  app.use('/uploads', express.static(baseUploadsPath));\n  console.log(`📁 Serving uploads from: ${baseUploadsPath}`);\n\n  // Database initialization route (temporary for setup)\n  app.post(\"/api/init-db\", async (req, res) => {\n    try {\n      // Check if any users exist\n      const existingUsers = await storage.getAllUsers();\n      if (existingUsers.length > 0) {\n        return res.status(400).json({ message: \"Database already initialized\" });\n      }\n\n      // Create admin user\n      const hashedAdminPassword = await hashPassword(\"admin123\");\n      const admin = await storage.createUser({\n        username: \"admin\",\n        email: \"admin@estateai.com\",\n        password: hashedAdminPassword,\n        role: \"super_admin\",\n        firstName: \"System\",\n        lastName: \"Admin\",\n        phone: \"+964 750 000 0000\",\n        isVerified: true\n      });\n\n      // Create sample agent\n      const hashedAgentPassword = await hashPassword(\"agent123\");\n      const agent = await storage.createUser({\n        username: \"john_agent\",\n        email: \"john@estateai.com\",\n        password: hashedAgentPassword,\n        role: \"agent\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n        phone: \"+964 750 123 4567\",\n        isVerified: true\n      });\n\n      res.json({\n        message: \"Database initialized successfully\",\n        users: [\n          { username: \"admin\", password: \"admin123\", role: \"super_admin\" },\n          { username: \"john_agent\", password: \"agent123\", role: \"agent\" }\n        ]\n      });\n    } catch (error) {\n      console.error(\"Database initialization error:\", error);\n      res.status(500).json({ message: \"Failed to initialize database\" });\n    }\n  });\n\n\n  // Admin routes with rate limiting\n  app.get(\"/api/admin/users\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Clear all properties (admin only)\n  app.delete(\"/api/admin/properties/all\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const count = await storage.clearAllProperties();\n      \n      // Broadcast to all SSE clients that properties were cleared\n      broadcastToSSEClients('properties_cleared', { count });\n      \n      res.json({ \n        message: `Successfully deleted ${count} properties and related data`,\n        deletedCount: count \n      });\n    } catch (error) {\n      console.error(\"Error clearing all properties:\", error);\n      res.status(500).json({ message: \"Failed to clear all properties\" });\n    }\n  });\n\n  // Reset properties with new multilingual data (admin only)\n  app.post(\"/api/admin/properties/reset\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      // First clear all existing properties\n      const deletedCount = await storage.clearAllProperties();\n      \n      // Define multilingual property data (3 per language: en, ar, kur)\n      const multilingualProperties = [\n        // English Properties\n        {\n          title: \"Luxury Villa in Erbil Center\",\n          description: \"A stunning luxury villa located in the heart of Erbil with modern amenities and spacious rooms. Perfect for families seeking comfort and elegance in a prime location.\",\n          type: \"villa\" as const,\n          listingType: \"sale\" as const,\n          price: \"450000\",\n          currency: \"USD\" as const,\n          bedrooms: 5,\n          bathrooms: 4,\n          area: 350,\n          address: \"Central District, Erbil\",\n          city: \"Erbil\",\n          country: \"Iraq\",\n          latitude: \"36.1911\",\n          longitude: \"44.0092\",\n          amenities: [\"Swimming Pool\", \"Garden\", \"Garage\", \"Security System\"],\n          features: [\"Modern Kitchen\", \"Master Suite\", \"Balcony\", \"Central AC\"],\n          language: \"en\" as const,\n          status: \"active\" as const,\n          isFeatured: true,\n          images: []\n        },\n        {\n          title: \"Modern Apartment in Ankawa\",\n          description: \"Contemporary apartment in the vibrant Ankawa district, featuring modern design and convenient access to restaurants, shopping, and entertainment venues.\",\n          type: \"apartment\" as const,\n          listingType: \"rent\" as const,\n          price: \"800\",\n          currency: \"USD\" as const,\n          bedrooms: 2,\n          bathrooms: 2,\n          area: 120,\n          address: \"Ankawa District, Erbil\",\n          city: \"Erbil\", \n          country: \"Iraq\",\n          latitude: \"36.2381\",\n          longitude: \"44.0092\",\n          amenities: [\"Parking\", \"Elevator\", \"Balcony\"],\n          features: [\"Open Plan\", \"Modern Fixtures\", \"City View\"],\n          language: \"en\" as const,\n          status: \"active\" as const,\n          isFeatured: false,\n          images: []\n        },\n        {\n          title: \"Commercial Office Space\",\n          description: \"Prime commercial office space in Erbil's business district, ideal for companies and startups. Features modern infrastructure and excellent connectivity.\",\n          type: \"commercial\" as const,\n          listingType: \"rent\" as const,\n          price: \"1200\",\n          currency: \"USD\" as const,\n          bedrooms: 0,\n          bathrooms: 2,\n          area: 200,\n          address: \"Business District, Erbil\",\n          city: \"Erbil\",\n          country: \"Iraq\", \n          latitude: \"36.1776\",\n          longitude: \"44.0094\",\n          amenities: [\"Parking\", \"Security\", \"Meeting Rooms\"],\n          features: [\"High-Speed Internet\", \"Conference Room\", \"Reception Area\"],\n          language: \"en\" as const,\n          status: \"active\" as const,\n          isFeatured: false,\n          images: []\n        },\n        // Arabic Properties\n        {\n          title: \"فيلا فاخرة في مركز أربيل\",\n          description: \"فيلا فاخرة مذهلة تقع في قلب أربيل مع وسائل الراحة الحديثة والغرف الواسعة. مثالية للعائلات التي تسعى للراحة والأناقة في موقع متميز.\",\n          type: \"villa\" as const,\n          listingType: \"sale\" as const,\n          price: \"420000\",\n          currency: \"USD\" as const,\n          bedrooms: 4,\n          bathrooms: 3,\n          area: 300,\n          address: \"المنطقة المركزية، أربيل\",\n          city: \"أربيل\",\n          country: \"العراق\",\n          latitude: \"36.1950\",\n          longitude: \"44.0050\",\n          amenities: [\"حمام سباحة\", \"حديقة\", \"كراج\", \"نظام أمني\"],\n          features: [\"مطبخ حديث\", \"جناح رئيسي\", \"شرفة\", \"تكييف مركزي\"],\n          language: \"ar\" as const,\n          status: \"active\" as const,\n          isFeatured: true,\n          images: []\n        },\n        {\n          title: \"شقة حديثة في عنكاوا\",\n          description: \"شقة عصرية في منطقة عنكاوا النابضة بالحياة، تتميز بالتصميم الحديث والوصول المريح للمطاعم والتسوق وأماكن الترفيه.\",\n          type: \"apartment\" as const,\n          listingType: \"rent\" as const,\n          price: \"750\",\n          currency: \"USD\" as const,\n          bedrooms: 3,\n          bathrooms: 2,\n          area: 140,\n          address: \"منطقة عنكاوا، أربيل\",\n          city: \"أربيل\",\n          country: \"العراق\",\n          latitude: \"36.2400\",\n          longitude: \"44.0080\",\n          amenities: [\"موقف سيارات\", \"مصعد\", \"شرفة\"],\n          features: [\"مخطط مفتوح\", \"تجهيزات حديثة\", \"إطلالة على المدينة\"],\n          language: \"ar\" as const,\n          status: \"active\" as const,\n          isFeatured: false,\n          images: []\n        },\n        {\n          title: \"مساحة مكتبية تجارية\",\n          description: \"مساحة مكتبية تجارية متميزة في المنطقة التجارية بأربيل، مثالية للشركات والشركات الناشئة. تتميز بالبنية التحتية الحديثة والاتصال الممتاز.\",\n          type: \"commercial\" as const,\n          listingType: \"rent\" as const,\n          price: \"1100\",\n          currency: \"USD\" as const,\n          bedrooms: 0,\n          bathrooms: 1,\n          area: 180,\n          address: \"المنطقة التجارية، أربيل\",\n          city: \"أربيل\",\n          country: \"العراق\",\n          latitude: \"36.1800\",\n          longitude: \"44.0100\",\n          amenities: [\"موقف سيارات\", \"أمن\", \"قاعات اجتماعات\"],\n          features: [\"إنترنت عالي السرعة\", \"قاعة مؤتمرات\", \"منطقة استقبال\"],\n          language: \"ar\" as const,\n          status: \"active\" as const,\n          isFeatured: false,\n          images: []\n        },\n        // Kurdish Properties  \n        {\n          title: \"ڤیلای فاخر لە ناوەندی هەولێر\",\n          description: \"ڤیلایەکی فاخر و جوان لە دڵی شاری هەولێر، خاوەنی ئامرازە نوێکان و ژووری فراوان. تەواو گونجاوە بۆ خێزانەکان کە بەدوای ئاسوودەیی و جوانی دەگەڕێن.\",\n          type: \"villa\" as const,\n          listingType: \"sale\" as const,\n          price: \"380000\",\n          currency: \"USD\" as const,\n          bedrooms: 4,\n          bathrooms: 3,\n          area: 280,\n          address: \"ناوچەی ناوەند، هەولێر\",\n          city: \"هەولێر\",\n          country: \"عێراق\",\n          latitude: \"36.1930\",\n          longitude: \"44.0070\",\n          amenities: [\"حەوزی مەلەکردن\", \"باخچە\", \"گاراج\", \"سیستەمی ئاسایش\"],\n          features: [\"چێشتخانەی نوێ\", \"ژووری سەرەکی\", \"بەرەوپێش\", \"ئەیری ناوەند\"],\n          language: \"kur\" as const,\n          status: \"active\" as const,\n          isFeatured: true,\n          images: []\n        },\n        {\n          title: \"شوقەی نوێ لە عەنکاوا\",\n          description: \"شوقەیەکی هاوچەرخ لە ناوچەی بژووی عەنکاوا، خاوەنی دیزاینی نوێ و دەستگەیشتنی ئاسان بۆ چێشتخانە، بازاڕ و شوێنەکانی خۆشی.\",\n          type: \"apartment\" as const,\n          listingType: \"rent\" as const,\n          price: \"700\",\n          currency: \"USD\" as const,\n          bedrooms: 2,\n          bathrooms: 1,\n          area: 100,\n          address: \"ناوچەی عەنکاوا، هەولێر\",\n          city: \"هەولێر\",\n          country: \"عێراق\",\n          latitude: \"36.2350\",\n          longitude: \"44.0060\",\n          amenities: [\"پارکینگ\", \"ئاسانسۆر\", \"بەرەوپێش\"],\n          features: [\"نەخشەی کراوە\", \"ئامرازی نوێ\", \"بینینی شار\"],\n          language: \"kur\" as const,\n          status: \"active\" as const,\n          isFeatured: false,\n          images: []\n        },\n        {\n          title: \"شوێنی کاری بازرگانی\",\n          description: \"شوێنی کاری بازرگانی باش لە ناوچەی بازرگانی هەولێر، گونجاو بۆ کۆمپانیاکان و کۆمپانیا نوێکان. خاوەنی بنیاتی نوێ و پەیوەندی باشە.\",\n          type: \"commercial\" as const,\n          listingType: \"rent\" as const,\n          price: \"1000\",\n          currency: \"USD\" as const,\n          bedrooms: 0,\n          bathrooms: 1,\n          area: 150,\n          address: \"ناوچەی بازرگانی، هەولێر\",\n          city: \"هەولێر\",\n          country: \"عێراق\",\n          latitude: \"36.1750\",\n          longitude: \"44.0110\",\n          amenities: [\"پارکینگ\", \"ئاسایش\", \"ژووری کۆبوونەوە\"],\n          features: [\"ئینتەرنێتی خێرا\", \"ژووری کۆنفرانس\", \"ناوچەی پێشوازی\"],\n          language: \"kur\" as const,\n          status: \"active\" as const,\n          isFeatured: false,\n          images: []\n        }\n      ];\n\n      // Insert new properties\n      const insertedProperties = [];\n      const counts = { en: 0, ar: 0, kur: 0 };\n      \n      for (const propertyData of multilingualProperties) {\n        try {\n          const property = await storage.createProperty(propertyData);\n          insertedProperties.push(property);\n          counts[propertyData.language]++;\n        } catch (error) {\n          console.error(`Failed to create property: ${propertyData.title}`, error);\n        }\n      }\n\n      // Broadcast to all SSE clients about the reset\n      broadcastToSSEClients('properties_reset', { \n        deletedCount, \n        insertedCount: insertedProperties.length,\n        languageCounts: counts \n      });\n\n      res.status(201).json({\n        message: `Successfully reset properties. Deleted ${deletedCount}, inserted ${insertedProperties.length} new properties.`,\n        deletedCount,\n        insertedCount: insertedProperties.length,\n        languageCounts: counts,\n        properties: insertedProperties\n      });\n\n    } catch (error) {\n      console.error(\"Error resetting properties:\", error);\n      res.status(500).json({ message: \"Failed to reset properties\" });\n    }\n  });\n\n  // Admin and super admin - get users with passwords\n  app.get(\"/api/admin/users/with-passwords\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Admin and super admin can see passwords\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users with passwords\" });\n    }\n  });\n\n  app.post(\"/api/admin/users\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      console.log('🔍 DEBUG: Raw request body:', JSON.stringify(req.body, null, 2));\n      console.log('🔍 DEBUG: User role:', req.user?.role);\n      \n      // Preprocess the request body to handle date conversion\n      const processedBody = { ...req.body };\n      \n      // Convert expiresAt string to Date if provided and not empty\n      if (processedBody.expiresAt) {\n        if (typeof processedBody.expiresAt === 'string' && processedBody.expiresAt.trim() !== '') {\n          const dateObj = new Date(processedBody.expiresAt);\n          if (!isNaN(dateObj.getTime())) {\n            processedBody.expiresAt = dateObj;\n          } else {\n            delete processedBody.expiresAt;\n          }\n        } else {\n          delete processedBody.expiresAt;\n        }\n      }\n\n      // Only admins and super admins can set language permissions for other users\n      if (processedBody.allowedLanguages && req.user?.role !== 'admin' && req.user?.role !== 'super_admin') {\n        return res.status(403).json({ \n          message: \"Only admins can set language permissions\" \n        });\n      }\n\n      // Extract allowedLanguages before validation since it's not in the main schema\n      const allowedLanguages = processedBody.allowedLanguages;\n      delete processedBody.allowedLanguages;\n      \n      console.log('🔍 DEBUG: Processed body before validation (avatar truncated):', {\n        ...processedBody,\n        avatar: processedBody.avatar ? `[Base64 image ${processedBody.avatar.length} chars]` : undefined\n      });\n      \n      const validatedData = insertUserSchema.parse(processedBody);\n      \n      // Hash password\n      const hashedPassword = await hashPassword(validatedData.password);\n      \n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword\n      });\n      \n      // Handle language permissions after user creation (only for admin/super admin)\n      if (allowedLanguages && (req.user?.role === 'admin' || req.user?.role === 'super_admin')) {\n        // Remove any existing languages first\n        const existingLanguages = await storage.getUserLanguages(user.id);\n        for (const lang of existingLanguages) {\n          await storage.removeUserLanguage(user.id, lang.language);\n        }\n        \n        // Add the new languages\n        for (const language of allowedLanguages) {\n          await storage.addUserLanguage(user.id, language);\n        }\n      }\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Preprocess the request body to handle date conversion\n      const processedBody = { ...req.body };\n      \n      // Convert expiresAt string to Date if provided and not empty\n      if (processedBody.expiresAt) {\n        if (typeof processedBody.expiresAt === 'string' && processedBody.expiresAt.trim() !== '') {\n          const dateObj = new Date(processedBody.expiresAt);\n          if (!isNaN(dateObj.getTime())) {\n            processedBody.expiresAt = dateObj;\n          } else {\n            delete processedBody.expiresAt;\n          }\n        } else {\n          delete processedBody.expiresAt;\n        }\n      }\n\n      // Only admins and super admins can modify language permissions\n      if (processedBody.allowedLanguages && req.user?.role !== 'admin' && req.user?.role !== 'super_admin') {\n        return res.status(403).json({ \n          message: \"Only admins can modify language permissions\" \n        });\n      }\n\n      // Extract allowedLanguages before validation since it's not in the main schema\n      const allowedLanguages = processedBody.allowedLanguages;\n      delete processedBody.allowedLanguages;\n      \n      const validatedData = insertUserSchema.partial().parse(processedBody);\n      \n      // Hash password if provided\n      if (validatedData.password) {\n        validatedData.password = await hashPassword(validatedData.password);\n      }\n      \n      const updatedUser = await storage.updateUser(id, validatedData);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Handle language permissions after user update (only for admin/super admin)\n      if (allowedLanguages && (req.user?.role === 'admin' || req.user?.role === 'super_admin')) {\n        // Remove any existing languages first\n        const existingLanguages = await storage.getUserLanguages(id);\n        for (const lang of existingLanguages) {\n          await storage.removeUserLanguage(id, lang.language);\n        }\n        \n        // Add the new languages\n        for (const language of allowedLanguages) {\n          await storage.addUserLanguage(id, language);\n        }\n      }\n      \n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Prevent admin from deleting themselves\n      if (req.user?.id === id) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n      \n      const deleted = await storage.deleteUser(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Update wave balance for customers with 0 balance\n  app.post(\"/api/admin/update-customer-wave-balance\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const updatedCount = await storage.updateUsersWithZeroWaveBalance();\n      res.json({ \n        message: `Updated wave balance for ${updatedCount} customers`, \n        updatedCount \n      });\n    } catch (error) {\n      console.error(\"Update wave balance error:\", error);\n      res.status(500).json({ message: \"Failed to update customer wave balances\" });\n    }\n  });\n\n  // Set specific wave balance for a customer\n  app.put(\"/api/admin/users/:id/wave-balance\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { waveBalance } = req.body;\n\n      if (typeof waveBalance !== 'number' || waveBalance < 0) {\n        return res.status(400).json({ message: \"Wave balance must be a non-negative number\" });\n      }\n\n      const updatedUser = await storage.updateUser(id, { waveBalance });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Set wave balance error:\", error);\n      res.status(500).json({ message: \"Failed to set customer wave balance\" });\n    }\n  });\n\n  // Currency rate management routes (admin and super admin)\n  app.get(\"/api/admin/currency-rates\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const rates = await storage.getCurrencyRates();\n      res.json(rates);\n    } catch (error) {\n      console.error(\"Get currency rates error:\", error);\n      res.status(500).json({ message: \"Failed to fetch currency rates\" });\n    }\n  });\n\n  app.get(\"/api/admin/currency-rates/active\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const rates = await storage.getActiveCurrencyRates();\n      res.json(rates);\n    } catch (error) {\n      console.error(\"Get active currency rates error:\", error);\n      res.status(500).json({ message: \"Failed to fetch active currency rates\" });\n    }\n  });\n\n  app.post(\"/api/admin/currency-rates\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const validatedData = insertCurrencyRateSchema.parse({\n        ...req.body,\n        setBy: req.user?.id || 'unknown'\n      });\n      \n      const newRate = await storage.createCurrencyRate(validatedData);\n      res.status(201).json(newRate);\n    } catch (error) {\n      console.error(\"Create currency rate error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid currency rate data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create currency rate\" });\n    }\n  });\n\n  app.put(\"/api/admin/currency-rates/:id\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = updateCurrencyRateSchema.parse(req.body);\n      \n      const updatedRate = await storage.updateCurrencyRate(id, validatedData);\n      \n      if (!updatedRate) {\n        return res.status(404).json({ message: \"Currency rate not found\" });\n      }\n      \n      res.json(updatedRate);\n    } catch (error) {\n      console.error(\"Update currency rate error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid currency rate data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update currency rate\" });\n    }\n  });\n\n  app.delete(\"/api/admin/currency-rates/:id\", adminRateLimit, requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deactivateCurrencyRate(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Currency rate not found\" });\n      }\n      \n      res.json({ message: \"Currency rate deactivated successfully\" });\n    } catch (error) {\n      console.error(\"Deactivate currency rate error:\", error);\n      res.status(500).json({ message: \"Failed to deactivate currency rate\" });\n    }\n  });\n\n  // Client location tracking routes\n  // Public route for creating client locations (when users click location button)\n  app.post(\"/api/client-locations\", apiRateLimit, async (req, res) => {\n    try {\n      const validatedData = insertClientLocationSchema.parse({\n        ...req.body,\n        userId: req.user?.id || null // Include user ID if logged in, otherwise null for anonymous tracking\n      });\n      \n      const location = await storage.createClientLocation(validatedData);\n      res.status(201).json(location);\n    } catch (error) {\n      console.error(\"Create client location error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid location data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to record client location\" });\n    }\n  });\n\n  // Admin route for retrieving client location data\n  app.get(\"/api/admin/client-locations\", adminRateLimit, requireAnyRole([\"admin\", \"super_admin\"]), async (req, res) => {\n    try {\n      const { userId, from, to, limit, offset } = req.query;\n      \n      // Validate and sanitize parameters\n      const params = {\n        userId: userId ? String(userId) : undefined,\n        from: undefined as string | undefined,\n        to: undefined as string | undefined,\n        limit: undefined as number | undefined,\n        offset: undefined as number | undefined,\n      };\n\n      // Validate date strings\n      if (from) {\n        const fromDate = new Date(String(from));\n        if (isNaN(fromDate.getTime())) {\n          return res.status(400).json({ message: \"Invalid 'from' date format. Use ISO 8601 format.\" });\n        }\n        params.from = String(from);\n      }\n\n      if (to) {\n        const toDate = new Date(String(to));\n        if (isNaN(toDate.getTime())) {\n          return res.status(400).json({ message: \"Invalid 'to' date format. Use ISO 8601 format.\" });\n        }\n        params.to = String(to);\n      }\n\n      // Validate and clamp limit\n      if (limit) {\n        const limitNum = parseInt(String(limit));\n        if (isNaN(limitNum) || limitNum < 1 || limitNum > 200) {\n          return res.status(400).json({ message: \"Limit must be between 1 and 200.\" });\n        }\n        params.limit = limitNum;\n      }\n\n      // Validate offset\n      if (offset) {\n        const offsetNum = parseInt(String(offset));\n        if (isNaN(offsetNum) || offsetNum < 0) {\n          return res.status(400).json({ message: \"Offset must be 0 or greater.\" });\n        }\n        params.offset = offsetNum;\n      } else {\n        params.offset = 0;\n      }\n\n      const [locations, total] = await Promise.all([\n        storage.getClientLocations(params),\n        storage.countClientLocations({ \n          userId: params.userId, \n          from: params.from, \n          to: params.to \n        })\n      ]);\n\n      res.json({\n        items: locations,\n        total,\n        limit: params.limit || null,\n        offset: params.offset || 0\n      });\n    } catch (error) {\n      console.error(\"Get client locations error:\", error);\n      res.status(500).json({ message: \"Failed to fetch client locations\" });\n    }\n  });\n\n  // Admin route for client location analytics/stats\n  app.get(\"/api/admin/client-locations/stats\", adminRateLimit, requireAnyRole([\"admin\", \"super_admin\"]), async (req, res) => {\n    try {\n      const { from, to } = req.query;\n      \n      // Validate dates\n      const params: { from?: string; to?: string } = {};\n      if (from) {\n        const fromDate = new Date(String(from));\n        if (isNaN(fromDate.getTime())) {\n          return res.status(400).json({ message: \"Invalid 'from' date format. Use ISO 8601 format.\" });\n        }\n        params.from = String(from);\n      }\n\n      if (to) {\n        const toDate = new Date(String(to));\n        if (isNaN(toDate.getTime())) {\n          return res.status(400).json({ message: \"Invalid 'to' date format. Use ISO 8601 format.\" });\n        }\n        params.to = String(to);\n      }\n\n      const stats = await storage.getClientLocationStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get client location stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch client location stats\" });\n    }\n  });\n\n  // Public currency conversion endpoint\n  app.get(\"/api/currency/convert\", apiRateLimit, async (req, res) => {\n    try {\n      const { amount, from, to } = req.query;\n      \n      if (!amount || !from || !to) {\n        return res.status(400).json({ \n          message: \"Missing required parameters: amount, from, to\" \n        });\n      }\n      \n      const numAmount = parseFloat(amount as string);\n      if (isNaN(numAmount)) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n      \n      const convertedAmount = await storage.convertPrice(numAmount, from as string, to as string);\n      \n      res.json({\n        originalAmount: numAmount,\n        fromCurrency: from,\n        toCurrency: to,\n        convertedAmount,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Currency conversion error:\", error);\n      res.status(500).json({ message: \"Failed to convert currency\" });\n    }\n  });\n\n  // Customer profile update route (users can update their own profile)\n  app.put(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      \n      // Allow only specific fields to be updated by customers\n      const allowedFields = ['firstName', 'lastName', 'phone', 'avatar'];\n      const updateData: any = {};\n      \n      // Filter only allowed fields from request body\n      Object.keys(req.body).forEach(key => {\n        if (allowedFields.includes(key) && req.body[key] !== undefined) {\n          updateData[key] = req.body[key];\n        }\n      });\n      \n      if (Object.keys(updateData).length === 0) {\n        return res.status(400).json({ message: \"No valid fields to update\" });\n      }\n      \n      const updatedUser = await storage.updateUser(userId, updateData);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Properties routes with caching and optimization\n  app.get(\"/api/properties\", \n    apiRateLimit,\n    cacheControl({ maxAge: 0 }), // No caching for real-time updates\n    async (req, res) => {\n    try {\n      const {\n        type,\n        listingType,\n        minPrice,\n        maxPrice,\n        bedrooms,\n        bathrooms,\n        city,\n        country,\n        language,\n        search,\n        sortBy,\n        sortOrder,\n        limit = \"20\",\n        offset = \"0\"\n      } = req.query;\n\n      const filters = {\n        type: type as string,\n        listingType: listingType as \"sale\" | \"rent\",\n        minPrice: minPrice ? parseFloat(minPrice as string) : undefined,\n        maxPrice: maxPrice ? parseFloat(maxPrice as string) : undefined,\n        bedrooms: bedrooms ? parseInt(bedrooms as string) : undefined,\n        bathrooms: bathrooms ? parseInt(bathrooms as string) : undefined,\n        city: city as string,\n        country: country as string,\n        language: language as \"en\" | \"ar\" | \"kur\",\n        search: search as string,\n        sortBy: sortBy as \"price\" | \"date\" | \"views\",\n        sortOrder: sortOrder as \"asc\" | \"desc\",\n        limit: parseInt(limit as string),\n        offset: parseInt(offset as string),\n      };\n\n      const properties = await storage.getProperties(filters);\n      \n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/featured\", \n    cacheControl({ maxAge: 600 }), // Cache for 10 minutes\n    async (req, res) => {\n    try {\n      const properties = await storage.getFeaturedProperties();\n      \n      // Handle conditional requests for caching (with error handling)\n      try {\n        if (handleConditionalRequest(req, res, properties)) {\n          return;\n        }\n      } catch (error) {\n        console.warn('Conditional request handling failed:', error);\n      }\n      \n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch featured properties\" });\n    }\n  });\n\n  // SSE stream for real-time property updates\n  app.get(\"/api/properties/stream\", (req, res) => {\n    console.log('🔌 New SSE connection established');\n    \n    // Set SSE headers with anti-buffering measures\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache, no-transform',\n      'Connection': 'keep-alive',\n      'Keep-Alive': 'timeout=60, max=1000',\n      'Content-Encoding': 'identity',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control',\n      'X-Accel-Buffering': 'no' // Prevent buffering by Nginx\n    });\n\n    // Flush headers to prevent intermediary buffering\n    res.flushHeaders();\n\n    // Send 2KB padding to force streaming start (prevents proxy buffering)\n    res.write(':' + ' '.repeat(2048) + '\\n');\n    res.write('retry: 10000\\n\\n');\n    if (res.flush) res.flush();\n    console.log('📡 SSE padding sent, forcing stream start');\n\n    // Send initial connection event\n    res.write(`data: ${JSON.stringify({ type: 'connected', message: 'SSE connection established' })}\\n\\n`);\n    if (res.flush) res.flush();\n    console.log('📡 SSE initial connection message sent and flushed');\n\n    // Add client to SSE clients set\n    sseClients.add(res);\n    console.log(`📊 SSE clients connected: ${sseClients.size}`);\n\n    // Set up heartbeat to keep connection alive\n    const heartbeat = setInterval(() => {\n      try {\n        const heartbeatData = `data: ${JSON.stringify({ type: 'heartbeat', timestamp: new Date().toISOString() })}\\n\\n`;\n        res.write(heartbeatData);\n        if (res.flush) res.flush();\n        console.log('💓 SSE heartbeat sent and flushed');\n      } catch (error) {\n        console.log('💔 SSE heartbeat failed, removing client:', (error as Error).message);\n        clearInterval(heartbeat);\n        sseClients.delete(res);\n        console.log(`📊 SSE clients connected: ${sseClients.size}`);\n      }\n    }, 15000); // Send heartbeat every 15 seconds\n\n    // Handle client disconnect\n    req.on('close', () => {\n      console.log('🔌 SSE client disconnected (close)');\n      clearInterval(heartbeat);\n      sseClients.delete(res);\n      console.log(`📊 SSE clients connected: ${sseClients.size}`);\n    });\n\n    req.on('error', (error) => {\n      console.log('🔌 SSE client disconnected (error):', error.message);\n      clearInterval(heartbeat);\n      sseClients.delete(res);\n      console.log(`📊 SSE clients connected: ${sseClients.size}`);\n    });\n  });\n\n  app.get(\"/api/properties/:idOrSlug\", async (req, res) => {\n    try {\n      const { idOrSlug } = req.params;\n      console.log(`🔍 Fetching property with ID or slug: ${idOrSlug}`);\n      \n      // Implement fallback mechanism: try slug first, then ID\n      let property = await storage.getPropertyBySlug(idOrSlug);\n      \n      if (!property) {\n        console.log(`🔄 Slug lookup failed, trying ID lookup for: ${idOrSlug}`);\n        property = await storage.getProperty(idOrSlug);\n      }\n      \n      if (!property) {\n        console.log(`❌ Property not found with slug or ID: ${idOrSlug}`);\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n\n      // Increment views using the property ID\n      await storage.incrementPropertyViews(property.id);\n      \n      console.log(`✅ Property found: ${property.title}`);\n      res.json(property);\n    } catch (error) {\n      console.error('Error fetching property:', error);\n      res.status(500).json({ message: \"Failed to fetch property\" });\n    }\n  });\n\n  app.post(\"/api/properties\", requireAnyRole([\"user\", \"admin\"]), checkExpiration, validateLanguagePermission, async (req, res) => {\n    try {\n      const validatedData = insertPropertySchema.parse(req.body);\n      \n      // Extract images, amenities, and features from the validated request body\n      const { images = [], amenities = [], features = [] } = req.body;\n      \n      // Create property with validated data and associated arrays, including userId for wave validation\n      const property = await storage.createProperty(\n        validatedData, \n        images, \n        amenities, \n        features,\n        req.session.userId\n      );\n      \n      // Broadcast new property to all SSE clients\n      broadcastToSSEClients('property_created', property);\n      \n      res.status(201).json(property);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid property data\", errors: error.errors });\n      }\n      \n      // Check if it's a wave permission error\n      if (error instanceof Error && error.message.includes('Wave permission denied') || \n          error instanceof Error && error.message.includes('Maximum properties limit reached')) {\n        return res.status(403).json({ message: error.message });\n      }\n      \n      console.error('Error creating property:', error);\n      res.status(500).json({ message: \"Failed to create property\" });\n    }\n  });\n\n  app.put(\"/api/properties/:id\", requireAnyRole([\"user\", \"admin\"]), checkExpiration, validateLanguagePermission, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get the property first to check ownership\n      const existingProperty = await storage.getProperty(id);\n      if (!existingProperty) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      \n      // Check if user owns the property or is admin\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Allow update if user is admin or owns the property\n      if (user.role !== 'admin' && user.role !== 'super_admin' && existingProperty.agentId !== user.id) {\n        return res.status(403).json({ message: \"Forbidden: You can only update your own properties\" });\n      }\n      \n      // Preprocess request body to handle null images\n      const processedBody = { ...req.body };\n      if (processedBody.images === null) {\n        processedBody.images = undefined;\n      }\n      \n      const validatedData = updatePropertySchema.parse(processedBody);\n      \n      // Extract images, amenities, and features from the validated request body like we do in POST\n      const { images, amenities = [], features = [] } = req.body;\n      \n      const property = await storage.updateProperty(\n        id, \n        validatedData,\n        images,\n        amenities,\n        features\n      );\n      \n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      \n      // Broadcast updated property to all SSE clients\n      broadcastToSSEClients('property_updated', property);\n      \n      res.json(property);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid property data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update property\" });\n    }\n  });\n\n  // Get all images from database with property details\n  app.get(\"/api/admin/images\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const allImages = await storage.getAllPropertyImages();\n      \n      // Check if images exist on filesystem\n      const imagesWithStatus = allImages.map((img: typeof allImages[0]) => {\n        let fileExists = false;\n        let filePath = \"\";\n        \n        if (img.imageUrl.startsWith(\"http://\") || img.imageUrl.startsWith(\"https://\")) {\n          fileExists = true;\n          filePath = img.imageUrl;\n        } else {\n          const localPath = img.imageUrl.startsWith(\"/\") ? img.imageUrl.substring(1) : img.imageUrl;\n          filePath = path.join(__dirname, \"..\", localPath);\n          try {\n            fs.accessSync(filePath, fs.constants.F_OK);\n            fileExists = true;\n          } catch {\n            fileExists = false;\n          }\n        }\n        \n        return {\n          ...img,\n          fileExists,\n          filePath\n        };\n      });\n      \n      res.json({\n        total: imagesWithStatus.length,\n        images: imagesWithStatus\n      });\n    } catch (error) {\n      console.error(\"Error fetching all images:\", error);\n      res.status(500).json({ message: \"Failed to fetch images\" });\n    }\n  });\n\n  app.delete(\"/api/properties/:id\", requireAnyRole([\"user\", \"admin\"]), checkExpiration, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get the property first to check ownership\n      const property = await storage.getProperty(id);\n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      \n      // Check if user owns the property or is admin\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Allow deletion if user is admin or owns the property\n      if (user.role !== 'admin' && user.role !== 'super_admin' && property.agentId !== user.id) {\n        return res.status(403).json({ message: \"Forbidden: You can only delete your own properties\" });\n      }\n      \n      const deleted = await storage.deleteProperty(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      \n      // Broadcast property deletion to all SSE clients\n      broadcastToSSEClients('property_deleted', { id, title: property.title });\n      \n      res.json({ message: \"Property deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete property\" });\n    }\n  });\n\n  // Delete individual property image\n  app.delete(\"/api/properties/:propertyId/images\", requireAnyRole([\"agent\", \"admin\", \"super_admin\"]), async (req, res) => {\n    try {\n      const { propertyId } = req.params;\n      \n      // Validate request body with Zod\n      const imageDeleteSchema = z.object({\n        imageUrl: z.string().min(1, \"Image URL is required\")\n      });\n      \n      const validatedData = imageDeleteSchema.parse(req.body);\n      const { imageUrl } = validatedData;\n      \n      // Get the property first to check ownership\n      const property = await storage.getProperty(propertyId);\n      if (!property) {\n        return res.status(404).json({ message: \"Property not found\" });\n      }\n      \n      // Check if user owns the property or is admin\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      // Allow deletion if user is admin/super_admin or owns the property\n      if (user.role !== 'admin' && user.role !== 'super_admin' && property.agentId !== user.id) {\n        return res.status(403).json({ message: \"Forbidden: You can only modify your own properties\" });\n      }\n      \n      // Remove the specific image with automatic resequencing (handled atomically in storage)\n      const result = await storage.removePropertyImageWithResequencing(propertyId, imageUrl);\n      \n      if (!result.success) {\n        return res.status(404).json({ message: \"Image not found or already removed\" });\n      }\n      \n      // Broadcast property update to all SSE clients\n      broadcastToSSEClients('property_updated', { id: propertyId, title: property.title });\n      \n      res.json({ \n        message: \"Image deleted successfully\",\n        remainingImages: result.remainingCount\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error('Failed to delete property image:', error);\n      res.status(500).json({ message: \"Failed to delete image\" });\n    }\n  });\n\n  // User's own properties\n  app.get(\"/api/users/:userId/properties\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      // Get all properties and filter by agentId since we removed getPropertiesByAgent\n      const allProperties = await storage.getProperties();\n      const properties = allProperties.filter(p => p.agentId === userId);\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user properties\" });\n    }\n  });\n\n  // Inquiries routes\n  app.post(\"/api/inquiries\", async (req, res) => {\n    try {\n      const validatedData = insertInquirySchema.parse(req.body);\n      const inquiry = await storage.createInquiry(validatedData);\n      res.status(201).json(inquiry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inquiry data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create inquiry\" });\n    }\n  });\n\n  app.get(\"/api/properties/:propertyId/inquiries\", async (req, res) => {\n    try {\n      const { propertyId } = req.params;\n      const inquiries = await storage.getInquiriesForProperty(propertyId);\n      res.json(inquiries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inquiries\" });\n    }\n  });\n\n\n  app.put(\"/api/inquiries/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      if (![\"pending\", \"replied\", \"closed\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      const inquiry = await storage.updateInquiryStatus(id, status);\n      \n      if (!inquiry) {\n        return res.status(404).json({ message: \"Inquiry not found\" });\n      }\n      \n      res.json(inquiry);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inquiry status\" });\n    }\n  });\n\n  // Favorites routes\n  app.get(\"/api/users/:userId/favorites\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const favorites = await storage.getFavoritesByUser(userId);\n      res.json(favorites);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch favorites\" });\n    }\n  });\n\n  app.post(\"/api/favorites\", requireAuth, checkExpiration, async (req, res) => {\n    try {\n      const validatedData = insertFavoriteSchema.parse(req.body);\n      const favorite = await storage.addToFavorites(validatedData);\n      res.status(201).json(favorite);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error(\"❌ POST /api/favorites - Validation error:\", error.errors);\n        return res.status(400).json({ message: \"Invalid favorite data\", errors: error.errors });\n      }\n      console.error(\"❌ POST /api/favorites - Server error:\", error);\n      res.status(500).json({ message: \"Failed to add to favorites\" });\n    }\n  });\n\n  app.delete(\"/api/favorites\", requireAuth, checkExpiration, async (req, res) => {\n    try {\n      const { userId, propertyId } = req.body;\n      \n      if (!userId || !propertyId) {\n        return res.status(400).json({ message: \"userId and propertyId are required\" });\n      }\n      \n      const removed = await storage.removeFromFavorites(userId, propertyId);\n      \n      if (!removed) {\n        return res.status(404).json({ message: \"Favorite not found\" });\n      }\n      \n      res.json({ message: \"Removed from favorites\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove from favorites\" });\n    }\n  });\n\n  app.get(\"/api/favorites/check\", async (req, res) => {\n    try {\n      const { userId, propertyId } = req.query;\n      \n      if (!userId || !propertyId) {\n        return res.status(400).json({ message: \"userId and propertyId are required\" });\n      }\n      \n      const isFavorite = await storage.isFavorite(userId as string, propertyId as string);\n      res.json({ isFavorite });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check favorite status\" });\n    }\n  });\n\n  // AI Search endpoint with rate limiting\n  app.post(\"/api/search/ai\", searchRateLimit, async (req, res) => {\n    try {\n      const { query, userId } = req.body;\n      \n      if (!query) {\n        return res.status(400).json({ message: \"Query is required\" });\n      }\n\n      // Basic AI search implementation - parse common patterns\n      const searchTerms = query.toLowerCase();\n      const filters: any = {};\n\n      // Extract price range\n      const priceMatch = searchTerms.match(/under\\s+\\$?([\\d,]+)|below\\s+\\$?([\\d,]+)|less\\s+than\\s+\\$?([\\d,]+)/);\n      if (priceMatch) {\n        const price = parseInt(priceMatch[1]?.replace(',', '') || priceMatch[2]?.replace(',', '') || priceMatch[3]?.replace(',', ''));\n        filters.maxPrice = price;\n      }\n\n      // Extract bedrooms\n      const bedroomMatch = searchTerms.match(/(\\d+)\\s*bed/);\n      if (bedroomMatch) {\n        filters.bedrooms = parseInt(bedroomMatch[1]);\n      }\n\n      // Extract property type\n      if (searchTerms.includes('house')) filters.type = 'house';\n      if (searchTerms.includes('apartment')) filters.type = 'apartment';\n      if (searchTerms.includes('villa')) filters.type = 'villa';\n\n      // Extract listing type\n      if (searchTerms.includes('rent')) filters.listingType = 'rent';\n      if (searchTerms.includes('buy') || searchTerms.includes('sale')) filters.listingType = 'sale';\n\n      // Extract location\n      const locations = ['erbil', 'baghdad', 'sulaymaniyah', 'kurdistan', 'iraq'];\n      for (const location of locations) {\n        if (searchTerms.includes(location)) {\n          filters.city = location;\n          break;\n        }\n      }\n\n      // Add general search term\n      filters.search = query;\n\n      const properties = await trackQueryPerformance(\n        'getPropertiesForSearch',\n        () => storage.getProperties(filters)\n      );\n\n      // Save search history if user is provided\n      if (userId) {\n        await storage.addSearchHistory({\n          userId,\n          query,\n          results: properties.length,\n        });\n      }\n\n      res.json({\n        query,\n        filters,\n        results: properties,\n        count: properties.length,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to perform AI search\" });\n    }\n  });\n\n  // Search suggestions\n  app.get(\"/api/search/suggestions\", async (req, res) => {\n    try {\n      const suggestions = [\n        \"Show me apartments under $150k in Erbil\",\n        \"Find family homes with gardens near schools\",\n        \"Luxury properties with mountain views\",\n        \"3-bedroom houses under $200k\",\n        \"Modern apartments for rent in Baghdad\",\n        \"Villas with swimming pools in Kurdistan\",\n      ];\n      \n      res.json(suggestions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch suggestions\" });\n    }\n  });\n\n  // Customer Analytics Routes\n  app.post(\"/api/customers/:userId/activity\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { activityType, propertyId, metadata, points } = req.body;\n      \n      const activity = await storage.addCustomerActivity({\n        userId,\n        activityType,\n        propertyId: propertyId || null,\n        points: points || 0\n      });\n      \n      res.status(201).json(activity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to add customer activity\" });\n    }\n  });\n\n  app.get(\"/api/customers/:userId/activities\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      \n      const activities = await storage.getCustomerActivities(userId, limit);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer activities\" });\n    }\n  });\n\n  app.get(\"/api/customers/:userId/points\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const points = await storage.getCustomerPoints(userId);\n      \n      if (!points) {\n        return res.json({\n          userId,\n          totalPoints: 0,\n          currentLevel: \"Bronze\",\n          pointsThisMonth: 0,\n          lastActivity: null\n        });\n      }\n      \n      res.json(points);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer points\" });\n    }\n  });\n\n  app.get(\"/api/customers/:userId/analytics\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const analytics = await storage.getCustomerAnalytics(userId);\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  app.put(\"/api/customers/:userId/points\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { totalPoints, currentLevel, pointsThisMonth } = req.body;\n      \n      const points = await storage.updateCustomerPoints(userId, {\n        totalPoints,\n        currentLevel,\n        pointsThisMonth\n      });\n      \n      res.json(points);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update customer points\" });\n    }\n  });\n\n  // Seed users endpoint\n  app.post(\"/api/seed/users\", async (req, res) => {\n    try {\n      // Check if users already exist\n      const existingSuperAdmin = await storage.getUserByUsername(\"superadmin\");\n      const existingUser = await storage.getUserByUsername(\"john_doe\");\n\n      const createdUsers = [];\n\n      if (!existingSuperAdmin) {\n        // Create super admin\n        const hashedPassword = await hashPassword(\"SuperAdmin123!\");\n        const superAdmin = await storage.createUser({\n          username: \"superadmin\",\n          email: \"superadmin@estateai.com\",\n          password: hashedPassword,\n          role: \"super_admin\",\n          firstName: \"Super\",\n          lastName: \"Admin\",\n          phone: \"+964-750-123-4567\",\n          isVerified: true\n        });\n        createdUsers.push({ username: superAdmin.username, role: superAdmin.role });\n      } else {\n        createdUsers.push({ username: \"superadmin\", role: \"super_admin\", status: \"already_exists\" });\n      }\n\n      if (!existingUser) {\n        // Create regular user\n        const hashedPassword = await hashPassword(\"User123!\");\n        const regularUser = await storage.createUser({\n          username: \"john_doe\",\n          email: \"john.doe@example.com\",\n          password: hashedPassword,\n          role: \"user\",\n          firstName: \"John\",\n          lastName: \"Doe\",\n          phone: \"+964-750-987-6543\",\n          isVerified: true\n        });\n        createdUsers.push({ username: regularUser.username, role: regularUser.role });\n      } else {\n        createdUsers.push({ username: \"john_doe\", role: \"user\", status: \"already_exists\" });\n      }\n\n      res.json({ \n        message: \"Seed operation completed\",\n        users: createdUsers \n      });\n    } catch (error) {\n      console.error(\"Seed error:\", error);\n      res.status(500).json({ message: \"Failed to seed users\" });\n    }\n  });\n\n  // Wave Management Routes\n  \n  // Get all waves (for super admin and customers to see available waves)\n  app.get(\"/api/waves\", requireAuth, async (req, res) => {\n    try {\n      const waves = await storage.getWaves();\n      res.json(waves);\n    } catch (error) {\n      console.error(\"Error fetching waves:\", error);\n      res.status(500).json({ message: \"Failed to fetch waves\" });\n    }\n  });\n\n  // Create wave (super admin only)\n  app.post(\"/api/waves\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const validatedData = insertWaveSchema.parse(req.body);\n      const wave = await storage.createWave({\n        ...validatedData,\n        createdBy: req.session.userId!\n      });\n      res.status(201).json(wave);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid wave data\", errors: error.errors });\n      }\n      console.error(\"Error creating wave:\", error);\n      res.status(500).json({ message: \"Failed to create wave\" });\n    }\n  });\n\n  // Update wave (super admin only)\n  app.put(\"/api/waves/:id\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertWaveSchema.partial().parse(req.body);\n      const wave = await storage.updateWave(id, validatedData);\n      \n      if (!wave) {\n        return res.status(404).json({ message: \"Wave not found\" });\n      }\n      \n      res.json(wave);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid wave data\", errors: error.errors });\n      }\n      console.error(\"Error updating wave:\", error);\n      res.status(500).json({ message: \"Failed to update wave\" });\n    }\n  });\n\n  // Delete wave (super admin only)\n  app.delete(\"/api/waves/:id\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteWave(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Wave not found\" });\n      }\n      \n      res.json({ message: \"Wave deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting wave:\", error);\n      res.status(500).json({ message: \"Failed to delete wave\" });\n    }\n  });\n\n  // Get customer wave permissions (for specific customer)\n  app.get(\"/api/customers/:userId/wave-permissions\", requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const currentUser = await storage.getUser(req.session.userId!);\n      \n      // Users can only see their own permissions or admin can see all\n      if (req.session.userId !== userId && currentUser?.role !== 'super_admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const permissions = await storage.getCustomerWavePermissions(userId);\n      res.json(permissions);\n    } catch (error) {\n      console.error(\"Error fetching wave permissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch wave permissions\" });\n    }\n  });\n\n  // Grant wave permission to customer (super admin only)\n  app.post(\"/api/customers/:userId/wave-permissions\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { waveId, maxProperties } = req.body;\n      \n      const permission = await storage.grantWavePermission({\n        userId,\n        waveId,\n        maxProperties: maxProperties || 1,\n        usedProperties: 0,\n        grantedBy: req.session.userId!\n      });\n      \n      res.status(201).json(permission);\n    } catch (error) {\n      console.error(\"Error granting wave permission:\", error);\n      res.status(500).json({ message: \"Failed to grant wave permission\" });\n    }\n  });\n\n  // Update wave permission (super admin only)\n  app.put(\"/api/customers/:userId/wave-permissions/:waveId\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { userId, waveId } = req.params;\n      const { maxProperties } = req.body;\n      \n      const permission = await storage.getWavePermission(userId, waveId);\n      if (!permission) {\n        return res.status(404).json({ message: \"Wave permission not found\" });\n      }\n      \n      const updated = await storage.updateWavePermission(permission.id, {\n        maxProperties,\n        grantedBy: req.session.userId!\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating wave permission:\", error);\n      res.status(500).json({ message: \"Failed to update wave permission\" });\n    }\n  });\n\n  // Revoke wave permission (super admin only)\n  app.delete(\"/api/customers/:userId/wave-permissions/:waveId\", requireRole(\"super_admin\"), async (req, res) => {\n    try {\n      const { userId, waveId } = req.params;\n      const success = await storage.revokeWavePermission(userId, waveId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Wave permission not found\" });\n      }\n      \n      res.json({ message: \"Wave permission revoked successfully\" });\n    } catch (error) {\n      console.error(\"Error revoking wave permission:\", error);\n      res.status(500).json({ message: \"Failed to revoke wave permission\" });\n    }\n  });\n\n  // Get properties by wave (for map display)\n  app.get(\"/api/waves/:waveId/properties\", requireAuth, async (req, res) => {\n    try {\n      const { waveId } = req.params;\n      const properties = await storage.getPropertiesByWave(waveId);\n      res.json(properties);\n    } catch (error) {\n      console.error(\"Error fetching wave properties:\", error);\n      res.status(500).json({ message: \"Failed to fetch wave properties\" });\n    }\n  });\n\n  // Fix external image URLs to use local server (admin only)\n  app.post(\"/api/admin/fix-image-urls\", requireRole(\"admin\"), async (req, res) => {\n    try {\n      const images = await storage.getAllPropertyImages();\n      console.log(`📊 Found ${images.length} total images to check`);\n      let fixedCount = 0;\n      \n      for (const image of images) {\n        console.log(`🔍 Checking image: ${image.imageUrl}`);\n        \n        // Check if the image URL contains an external domain (including old domains)\n        if (image.imageUrl.includes('dailynewscrypto.net') || \n            image.imageUrl.includes('mapestate.com') ||\n            (image.imageUrl.startsWith('http://') || image.imageUrl.startsWith('https://'))) {\n          \n          // Extract just the filename from the URL\n          const urlParts = image.imageUrl.split('/');\n          const filename = urlParts[urlParts.length - 1];\n          \n          // Create the new relative URL\n          const newUrl = `/uploads/properties/${filename}`;\n          \n          console.log(`🔄 Updating image URL from ${image.imageUrl} to ${newUrl}`);\n          \n          // Direct database update for MySQL\n          if (storage instanceof require('./storage').DatabaseStorage) {\n            const { db } = await import('./db');\n            const { propertyImages } = await import('@shared/schema');\n            const { eq } = await import('drizzle-orm');\n            \n            await db().update(propertyImages)\n              .set({ imageUrl: newUrl })\n              .where(eq(propertyImages.id, image.id));\n          }\n          \n          fixedCount++;\n          console.log(`✅ Fixed image URL: ${image.imageUrl} -> ${newUrl}`);\n        }\n      }\n      \n      console.log(`✨ Fixed ${fixedCount} image URLs total`);\n      res.json({ \n        message: `Successfully fixed ${fixedCount} image URLs`,\n        fixedCount,\n        totalChecked: images.length\n      });\n    } catch (error) {\n      console.error(\"❌ Error fixing image URLs:\", error);\n      res.status(500).json({ message: \"Failed to fix image URLs\", error: String(error) });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":77151},"client/src/lib/i18n.ts":{"content":"import { useState, useEffect, useRef } from \"react\";\n\nexport type Language = \"en\" | \"ar\" | \"kur\";\n\n// Language mapping for better SEO and standards compliance\nexport const LANGUAGE_MAPPING = {\n  en: {\n    iso: 'en',\n    hreflang: 'en-US',\n    locale: 'en_US',\n    name: 'English',\n    nativeName: 'English',\n    dir: 'ltr' as const,\n    region: 'US'\n  },\n  ar: {\n    iso: 'ar',\n    hreflang: 'ar-IQ',\n    locale: 'ar_IQ', \n    name: 'Arabic',\n    nativeName: 'العربية',\n    dir: 'rtl' as const,\n    region: 'IQ'\n  },\n  kur: {\n    iso: 'ku', // Proper ISO 639-1 code for Kurdish\n    hreflang: 'ku-IQ',\n    locale: 'ku_IQ',\n    name: 'Kurdish',\n    nativeName: 'کوردی',\n    dir: 'rtl' as const,\n    region: 'IQ'\n  }\n} as const;\n\nexport const SUPPORTED_LANGUAGES = Object.keys(LANGUAGE_MAPPING) as Language[];\n\n// Get language info by internal code\nexport function getLanguageInfo(language: Language) {\n  return LANGUAGE_MAPPING[language];\n}\n\n// Detect language from browser with improved fallback\nexport function detectBrowserLanguage(): Language {\n  // Check localStorage first\n  const saved = localStorage.getItem('language') as Language;\n  if (saved && saved in LANGUAGE_MAPPING) {\n    return saved;\n  }\n\n  // Check navigator languages array (more comprehensive)\n  const browserLanguages = navigator.languages || [navigator.language];\n  \n  for (const browserLang of browserLanguages) {\n    const normalizedLang = browserLang.toLowerCase();\n    \n    // Direct matches\n    if (normalizedLang.startsWith('ar')) return 'ar';\n    if (normalizedLang.startsWith('ku')) return 'kur';\n    if (normalizedLang.startsWith('en')) return 'en';\n    \n    // Region-specific matches\n    if (normalizedLang.includes('iq') || normalizedLang.includes('iraq')) {\n      if (normalizedLang.includes('ar') || normalizedLang.includes('arab')) return 'ar';\n      if (normalizedLang.includes('ku') || normalizedLang.includes('kurd')) return 'kur';\n    }\n  }\n\n  // Default fallback\n  return 'en';\n}\n\ninterface Translations {\n  [key: string]: {\n    en: string;\n    ar: string;\n    kur: string;\n  };\n}\n\nconst translations: Translations = {\n  // Navigation\n  \"nav.home\": {\n    en: \"Home\",\n    ar: \"الرئيسية\",\n    kur: \"سەرەتا\",\n  },\n  \"nav.properties\": {\n    en: \"Properties\",\n    ar: \"العقارات\",\n    kur: \"خانووبەرە\",\n  },\n  \"nav.agents\": {\n    en: \"Agents\",\n    ar: \"الوكلاء\",\n    kur: \"بریکار\",\n  },\n  \"nav.about\": {\n    en: \"About\",\n    ar: \"حول\",\n    kur: \"دەربارە\",\n  },\n  \"nav.signIn\": {\n    en: \"Sign In\",\n    ar: \"تسجيل الدخول\",\n    kur: \"چوونەژوورەوە\",\n  },\n\n  // Hero Section\n  \"hero.title\": {\n    en: \"Find Your Perfect Home with AI\",\n    ar: \"اعثر على منزلك المثالي بالذكاء الاصطناعي\",\n    kur: \"ماڵی تەواوی خۆت بە AI بدۆزەرەوە\",\n  },\n  \"hero.subtitle\": {\n    en: \"Discover properties tailored to your needs using intelligent recommendations\",\n    ar: \"اكتشف العقارات المصممة خصيصًا لاحتياجاتك باستخدام التوصيات الذكية\",\n    kur: \"خانووبەرەکان بدۆزەرەوە کە بە پێی پێداویستییەکانت داڕێژراون\",\n  },\n  \"hero.searchPlaceholder\": {\n    en: \"Ask AI: 'Find me a 3-bedroom house under $200k near downtown'\",\n    ar: \"اسأل الذكاء الاصطناعي: 'ابحث لي عن منزل بـ 3 غرف نوم تحت 200 ألف دولار بالقرب من وسط المدينة'\",\n    kur: \"لە AI بپرسە: 'ماڵێکی 3 ژووری نوستن بدۆزەرەوە کە کەمتر لە 200 هەزار دۆلار بێت'\",\n  },\n  \"hero.search\": {\n    en: \"Search\",\n    ar: \"بحث\",\n    kur: \"گەڕان\",\n  },\n\n  // Quick Filters\n  \"filter.forSale\": {\n    en: \"For Sale\",\n    ar: \"للبيع\",\n    kur: \"بۆ فرۆشتن\",\n  },\n  \"filter.forRent\": {\n    en: \"For Rent\",\n    ar: \"للإيجار\",\n    kur: \"بۆ کرێ\",\n  },\n  \"filter.houses\": {\n    en: \"Houses\",\n    ar: \"منازل\",\n    kur: \"ماڵەکان\",\n  },\n  \"filter.apartments\": {\n    en: \"Apartments\",\n    ar: \"شقق\",\n    kur: \"شوقەکان\",\n  },\n  \"filter.nearMe\": {\n    en: \"Near Me\",\n    ar: \"بالقرب مني\",\n    kur: \"نزیکی من\",\n  },\n\n  // Property Details\n  \"property.beds\": {\n    en: \"Beds\",\n    ar: \"غرف نوم\",\n    kur: \"ژووری نوستن\",\n  },\n  \"property.baths\": {\n    en: \"Baths\",\n    ar: \"حمامات\",\n    kur: \"حەمام\",\n  },\n  \"property.viewDetails\": {\n    en: \"View Details\",\n    ar: \"عرض التفاصيل\",\n    kur: \"بینینی وردەکارییەکان\",\n  },\n  \"property.viewProperty\": {\n    en: \"View Property\",\n    ar: \"عرض العقار\",\n    kur: \"بینینی خانووبەرە\",\n  },\n\n  // Contact\n  \"contact.callNow\": {\n    en: \"Call Now\",\n    ar: \"اتصل الآن\",\n    kur: \"ئێستا پەیوەندی بکە\",\n  },\n  \"contact.sendMessage\": {\n    en: \"Send Message\",\n    ar: \"إرسال رسالة\",\n    kur: \"نامە بنێرە\",\n  },\n  \"contact.name\": {\n    en: \"Your Name\",\n    ar: \"اسمك\",\n    kur: \"ناوت\",\n  },\n  \"contact.email\": {\n    en: \"Your Email\",\n    ar: \"بريدك الإلكتروني\",\n    kur: \"ئیمەیڵت\",\n  },\n  \"contact.message\": {\n    en: \"Your Message\",\n    ar: \"رسالتك\",\n    kur: \"نامەکەت\",\n  },\n  \"contact.contactNumber\": {\n    en: \"Contact Number\",\n    ar: \"رقم الاتصال\",\n    kur: \"ژمارەی پەیوەندی\",\n  },\n  \"contact.whatsapp\": {\n    en: \"WhatsApp\",\n    ar: \"واتساب\",\n    kur: \"واتساپ\",\n  },\n  \"contact.agentTitle\": {\n    en: \"Licensed Real Estate Agent\",\n    ar: \"وكيل عقارات مرخص\",\n    kur: \"بریکاری خانووبەرەی مۆڵەتدار\",\n  },\n\n  // Property Status\n  \"property.status.active\": {\n    en: \"Active\",\n    ar: \"نشط\",\n    kur: \"چالاک\",\n  },\n\n  // Common\n  \"common.loading\": {\n    en: \"Loading...\",\n    ar: \"جاري التحميل...\",\n    kur: \"بارکردن...\",\n  },\n  \"common.error\": {\n    en: \"An error occurred\",\n    ar: \"حدث خطأ\",\n    kur: \"هەڵەیەک ڕوویدا\",\n  },\n  \"common.noResults\": {\n    en: \"No results found\",\n    ar: \"لا توجد نتائج\",\n    kur: \"هیچ ئەنجامێک نەدۆزرایەوە\",\n  },\n\n  // Property Detail Page\n  \"property.backToHome\": {\n    en: \"Back to Home\",\n    ar: \"العودة للرئيسية\",\n    kur: \"گەڕانەوە بۆ سەرەتا\",\n  },\n  \"property.description\": {\n    en: \"Description\",\n    ar: \"الوصف\",\n    kur: \"وەسف\",\n  },\n  \"property.featuresAmenities\": {\n    en: \"Features & Amenities\",\n    ar: \"المزايا والخدمات\",\n    kur: \"تایبەتمەندی و خزمەتگوزاریەکان\",\n  },\n  \"property.features\": {\n    en: \"Features\",\n    ar: \"المزايا\",\n    kur: \"تایبەتمەندییەکان\",\n  },\n  \"property.amenities\": {\n    en: \"Amenities\",\n    ar: \"الخدمات\",\n    kur: \"خزمەتگوزاریەکان\",\n  },\n  \"property.propertyInformation\": {\n    en: \"Property Information\",\n    ar: \"معلومات العقار\",\n    kur: \"زانیاری خانووبەرە\",\n  },\n  \"property.propertyType\": {\n    en: \"Property Type:\",\n    ar: \"نوع العقار:\",\n    kur: \"جۆری خانووبەرە\",\n  },\n  \"property.listed\": {\n    en: \"Listed:\",\n    ar: \"تاريخ الإدراج:\",\n    kur: \"لیست کراوە\",\n  },\n  \"property.status\": {\n    en: \"Status:\",\n    ar: \"الحالة:\",\n    kur: \"دۆخ\",\n  },\n  \"property.bedrooms\": {\n    en: \"Bedrooms\",\n    ar: \"غرف النوم\",\n    kur: \"ژووری نوستن\",\n  },\n  \"property.bathrooms\": {\n    en: \"Bathrooms\",\n    ar: \"الحمامات\",\n    kur: \"حەمام\",\n  },\n  \"property.sqFt\": {\n    en: \"M²\",\n    ar: \"M²\",\n    kur: \"M²\",\n  },\n  \"property.parking\": {\n    en: \"Parking\",\n    ar: \"موقف السيارات\",\n    kur: \"پارک کردن\",\n  },\n  \"property.featured\": {\n    en: \"Featured\",\n    ar: \"مميز\",\n    kur: \"تایبەت\",\n  },\n\n  // Error states and additional labels\n  \"property.notFound\": {\n    en: \"Property Not Found\",\n    ar: \"العقار غير موجود\",\n    kur: \"خانووبەرە نەدۆزرایەوە\",\n  },\n  \"property.notFoundDescription\": {\n    en: \"The property you're looking for doesn't exist or has been removed.\",\n    ar: \"العقار الذي تبحث عنه غير موجود أو تم حذفه.\",\n    kur: \"ئەو خانووبەرەی کە بەدوایدا دەگەڕێیت بوونی نییە یان سڕاوەتەوە.\",\n  },\n  \"property.perSqFt\": {\n    en: \"/M²\",\n    ar: \"/M²\",\n    kur: \"/M²\",\n  },\n  \"property.perMonth\": {\n    en: \"/mo\",\n    ar: \"/شهريًا\",\n    kur: \"/مانگانە\",\n  },\n  \"property.shareOnFacebook\": {\n    en: \"Share on Facebook\",\n    ar: \"مشاركة على فيسبوك\",\n    kur: \"هاوبەشکردن لە فەیسبووک\",\n  },\n  \"property.shareOnTwitter\": {\n    en: \"Share on Twitter\",\n    ar: \"مشاركة على تويتر\",\n    kur: \"هاوبەشکردن لە تویتەر\",\n  },\n  \"property.shareOnWhatsApp\": {\n    en: \"Share on WhatsApp\",\n    ar: \"مشاركة على واتساب\",\n    kur: \"هاوبەشکردن لە واتساپ\",\n  },\n  \"property.shareOnLinkedIn\": {\n    en: \"Share on LinkedIn\",\n    ar: \"مشاركة على لينكد إن\",\n    kur: \"هاوبەشکردن لە لینکدین\",\n  },\n  \"property.copyLink\": {\n    en: \"Copy Link\",\n    ar: \"نسخ الرابط\",\n    kur: \"کۆپیکردنی بەستەر\",\n  },\n  \"property.linkCopied\": {\n    en: \"Link Copied\",\n    ar: \"تم نسخ الرابط\",\n    kur: \"بەستەرەکە کۆپی کرا\",\n  },\n  \"property.linkCopiedDescription\": {\n    en: \"Property link has been copied to your clipboard.\",\n    ar: \"تم نسخ رابط العقار إلى الحافظة.\",\n    kur: \"بەستەری خانووبەرەکە کۆپی کراوە بۆ کلیپ بۆردەکەت.\",\n  },\n  \"property.addedToFavorites\": {\n    en: \"Added to Favorites\",\n    ar: \"تمت الإضافة إلى المفضلة\",\n    kur: \"زیادکرا بۆ بەرگری\",\n  },\n  \"property.addedToFavoritesDescription\": {\n    en: \"Property has been added to your favorites.\",\n    ar: \"تمت إضافة العقار إلى مفضلتك.\",\n    kur: \"خانووبەرەکە زیادکرا بۆ بەرگریەکانت.\",\n  },\n  \"property.removedFromFavorites\": {\n    en: \"Removed from Favorites\",\n    ar: \"تمت الإزالة من المفضلة\",\n    kur: \"لابرا لە بەرگری\",\n  },\n  \"property.removedFromFavoritesDescription\": {\n    en: \"Property has been removed from your favorites.\",\n    ar: \"تمت إزالة العقار من مفضلتك.\",\n    kur: \"خانووبەرەکە لابرا لە بەرگریەکانت.\",\n  },\n  \"property.favoriteError\": {\n    en: \"Error\",\n    ar: \"خطأ\",\n    kur: \"هەڵە\",\n  },\n  \"property.favoriteErrorDescription\": {\n    en: \"Failed to update favorites. Please try again.\",\n    ar: \"فشل في تحديث المفضلة. حاول مرة أخرى.\",\n    kur: \"سەرکەوتوو نەبوو لە نوێکردنەوەی بەرگری. دووبارە هەوڵبدەوە.\",\n  },\n\n  // Favorites Page\n  \"favorites.title\": {\n    en: \"My Favorite Properties\",\n    ar: \"خصائصي المفضلة - MapEstate | قوائم العقارات المحفوظة\",\n    kur: \"خانووبەرە بەرگریکراوەکانم - MapEstate | لیستی خانووبەرە پاشەکەوتکراوەکان\",\n  },\n  \"favorites.description\": {\n    en: \"View your saved favorite properties. Keep track of houses, apartments, and villas you're interested in buying or renting in Kurdistan, Iraq.\",\n    ar: \"اعرض خصائصك المفضلة المحفوظة. تتبع المنازل والشقق والفيلات التي تهتم بشرائها أو استئجارها في كردستان، العراق.\",\n    kur: \"خانووبەرە بەرگریکراوەکانت ببینە. شوێنکەوتن بکە بۆ ماڵ، شوقە و ڤیلاکان کە بەرامبەرت بە کڕین یان کرێ لە کوردستان، عێراق.\",\n  },\n  \"favorites.loadingFavorites\": {\n    en: \"Loading your favorites...\",\n    ar: \"تحميل مفضلتك...\",\n    kur: \"بارکردنی بەرگریەکانت...\",\n  },\n  \"favorites.errorLoading\": {\n    en: \"Error loading favorites. Please try again.\",\n    ar: \"خطأ في تحميل المفضلة. يرجى المحاولة مرة أخرى.\",\n    kur: \"هەڵە لە بارکردنی بەرگریەکان. تکایە دووبارە هەوڵبدەوە.\",\n  },\n  \"favorites.noFavoritesYet\": {\n    en: \"No favorites yet\",\n    ar: \"لا توجد مفضلة بعد\",\n    kur: \"هێشتا هیچ بەرگریەک نییە\",\n  },\n  \"favorites.noFavoritesDescription\": {\n    en: \"Start adding properties to your favorites by clicking the heart icon on property listings.\",\n    ar: \"ابدأ في إضافة العقارات إلى مفضلتك بالنقر على أيقونة القلب في قوائم العقارات.\",\n    kur: \"دەست بکە بە زیادکردنی خانووبەرەکان بۆ بەرگریەکانت لە ڕێگەی کرتەکردن لەسەر نیشانەی دڵ لە لیستی خانووبەرەکان.\",\n  },\n  \"favorites.structuredDataName\": {\n    en: \"My Favorite Properties\",\n    ar: \"خصائصي المفضلة\",\n    kur: \"خانووبەرە بەرگریکراوەکانم\",\n  },\n  \"favorites.structuredDataDescription\": {\n    en: \"saved favorite properties. Keep track of properties you're interested in buying or renting.\",\n    ar: \"خصائص مفضلة محفوظة. تتبع العقارات التي تهتم بشرائها أو استئجارها.\",\n    kur: \"خانووبەرە بەرگریکراوە پاشەکەوتکراوەکان. شوێنکەوتن بکە بۆ خانووبەرەکان کە بەرامبەرت بە کڕین یان کرێ.\",\n  },\n\n  // Property Features\n  // Property Amenities (Keys from customer dashboard form)\n  \"property.amenities.swimmingPool\": {\n    en: \"Swimming Pool\",\n    ar: \"مسبح\",\n    kur: \"حەوزی مەلەکردن\",\n  },\n  \"property.amenities.garden\": {\n    en: \"Garden\",\n    ar: \"حديقة\",\n    kur: \"باخچە\",\n  },\n  \"property.amenities.parking\": {\n    en: \"Parking\",\n    ar: \"موقف سيارات\",\n    kur: \"پارک کردن\",\n  },\n  \"property.amenities.securitySystem\": {\n    en: \"Security System\",\n    ar: \"نظام الأمان\",\n    kur: \"سیستەمی ئاسایش\",\n  },\n  \"property.amenities.elevator\": {\n    en: \"Elevator\",\n    ar: \"مصعد\",\n    kur: \"ئاسانسۆر\",\n  },\n  \"property.amenities.gym\": {\n    en: \"Gym\",\n    ar: \"نادي رياضي\",\n    kur: \"زالی وەرزش\",\n  },\n  \"property.amenities.balcony\": {\n    en: \"Balcony\",\n    ar: \"شرفة\",\n    kur: \"بالاخانە\",\n  },\n  \"property.amenities.terrace\": {\n    en: \"Terrace\",\n    ar: \"تراس\",\n    kur: \"تاراسە\",\n  },\n\n  // Property Features (Keys from customer dashboard form)\n  \"property.features.airConditioning\": {\n    en: \"Air Conditioning\",\n    ar: \"تكييف الهواء\",\n    kur: \"ڕەش‌کردنەوە\",\n  },\n  \"property.features.heating\": {\n    en: \"Heating\",\n    ar: \"تدفئة\",\n    kur: \"گەرمکردنەوە\",\n  },\n  \"property.features.furnished\": {\n    en: \"Furnished\",\n    ar: \"مؤثث\",\n    kur: \"فەرنیچەردار\",\n  },\n  \"property.features.petFriendly\": {\n    en: \"Pet Friendly\",\n    ar: \"مناسب للحيوانات الأليفة\",\n    kur: \"گونجاو بۆ ئاژەڵی ماڵی\",\n  },\n  \"property.features.fireplace\": {\n    en: \"Fireplace\",\n    ar: \"مدفأة\",\n    kur: \"بخاری\",\n  },\n  \"property.features.highCeilings\": {\n    en: \"High Ceilings\",\n    ar: \"أسقف عالية\",\n    kur: \"سەقفی بەرز\",\n  },\n  \"property.features.modernKitchen\": {\n    en: \"Modern Kitchen\",\n    ar: \"مطبخ عصري\",\n    kur: \"چێشتخانەی مۆدێرن\",\n  },\n  \"property.features.storageRoom\": {\n    en: \"Storage Room\",\n    ar: \"غرفة تخزين\",\n    kur: \"ژووری هەڵگرتن\",\n  },\n\n  // Legacy translations for backward compatibility\n  \"property.amenities.gardenPatio\": {\n    en: \"Garden & Patio\",\n    ar: \"حديقة وشرفة\",\n    kur: \"باخچە و بالاخانە\",\n  },\n  \"property.amenities.garageParking\": {\n    en: \"Garage Parking\",\n    ar: \"موقف السيارات\",\n    kur: \"پارک کردنی گاراژ\",\n  },\n\n  // Settings Page\n  \"settings.title\": {\n    en: \"Settings\",\n    ar: \"الإعدادات\",\n    kur: \"ڕێکخستنەکان\",\n  },\n  \"settings.backToHome\": {\n    en: \"Back to Home\",\n    ar: \"العودة للرئيسية\",\n    kur: \"گەڕانەوە بۆ سەرەتا\",\n  },\n  \"settings.languageRegion\": {\n    en: \"Language & Region\",\n    ar: \"اللغة والمنطقة\",\n    kur: \"زمان و ناوچە\",\n  },\n  \"settings.language\": {\n    en: \"Language\",\n    ar: \"اللغة\",\n    kur: \"زمان\",\n  },\n  \"settings.currency\": {\n    en: \"Currency\",\n    ar: \"العملة\",\n    kur: \"دراو\",\n  },\n  \"settings.dateFormat\": {\n    en: \"Date Format\",\n    ar: \"تنسيق التاريخ\",\n    kur: \"شێوازی بەروار\",\n  },\n  \"settings.notifications\": {\n    en: \"Notifications\",\n    ar: \"الإشعارات\",\n    kur: \"ئاگاداریەکان\",\n  },\n  \"settings.emailNotifications\": {\n    en: \"Email Notifications\",\n    ar: \"إشعارات البريد الإلكتروني\",\n    kur: \"ئاگاداری ئیمەیڵ\",\n  },\n  \"settings.emailNotificationsDesc\": {\n    en: \"Receive updates via email\",\n    ar: \"تلقي التحديثات عبر البريد الإلكتروني\",\n    kur: \"وەرگرتنی نوێکردنەوە بە ئیمەیڵ\",\n  },\n  \"settings.pushNotifications\": {\n    en: \"Push Notifications\",\n    ar: \"الإشعارات الفورية\",\n    kur: \"ئاگاداری فوری\",\n  },\n  \"settings.pushNotificationsDesc\": {\n    en: \"Browser notifications\",\n    ar: \"إشعارات المتصفح\",\n    kur: \"ئاگاداری وێبگەڕ\",\n  },\n  \"settings.favoriteUpdates\": {\n    en: \"Favorite Property Updates\",\n    ar: \"تحديثات العقارات المفضلة\",\n    kur: \"نوێکردنەوەی خانووبەرە بەرگریکراوەکان\",\n  },\n  \"settings.favoriteUpdatesDesc\": {\n    en: \"Notify when favorite properties change\",\n    ar: \"تنبيه عند تغيير العقارات المفضلة\",\n    kur: \"ئاگادارکردنەوە کاتێک خانووبەرە بەرگریکراوەکان دەگۆڕێن\",\n  },\n  \"settings.priceAlerts\": {\n    en: \"Price Drop Alerts\",\n    ar: \"تنبيهات انخفاض الأسعار\",\n    kur: \"ئاگاداری دابەزینی نرخ\",\n  },\n  \"settings.priceAlertsDesc\": {\n    en: \"Alert when property prices drop\",\n    ar: \"تنبيه عند انخفاض أسعار العقارات\",\n    kur: \"ئاگادارکردنەوە کاتێک نرخی خانووبەرەکان دادەبەزێت\",\n  },\n  \"settings.displayPreferences\": {\n    en: \"Display Preferences\",\n    ar: \"تفضيلات العرض\",\n    kur: \"ویستی نیشاندان\",\n  },\n  \"settings.mapStyle\": {\n    en: \"Map Style\",\n    ar: \"نمط الخريطة\",\n    kur: \"شێوازی نەخشە\",\n  },\n  \"settings.showPropertyPrices\": {\n    en: \"Show Property Prices\",\n    ar: \"إظهار أسعار العقارات\",\n    kur: \"نیشاندانی نرخی خانووبەرەکان\",\n  },\n  \"settings.showPropertyPricesDesc\": {\n    en: \"Display prices on map markers\",\n    ar: \"عرض الأسعار على علامات الخريطة\",\n    kur: \"نیشاندانی نرخەکان لەسەر نیشانەکانی نەخشە\",\n  },\n  \"settings.showDistance\": {\n    en: \"Show Distance\",\n    ar: \"إظهار المسافة\",\n    kur: \"نیشاندانی مەودا\",\n  },\n  \"settings.showDistanceDesc\": {\n    en: \"Show distance from your location\",\n    ar: \"إظهار المسافة من موقعك\",\n    kur: \"نیشاندانی مەودا لە شوێنت\",\n  },\n  \"settings.autoZoom\": {\n    en: \"Auto Zoom to Results\",\n    ar: \"تكبير تلقائي للنتائج\",\n    kur: \"گەورەکردنەوەی خۆکارانە بۆ ئەنجامەکان\",\n  },\n  \"settings.autoZoomDesc\": {\n    en: \"Automatically zoom map to show search results\",\n    ar: \"تكبير الخريطة تلقائياً لإظهار نتائج البحث\",\n    kur: \"گەورەکردنەوەی نەخشە بە شێوەی خۆکارانە بۆ نیشاندانی ئەنجامی گەڕان\",\n  },\n  \"settings.cancel\": {\n    en: \"Cancel\",\n    ar: \"إلغاء\",\n    kur: \"هەڵوەشاندنەوە\",\n  },\n  \"settings.saveSettings\": {\n    en: \"Save Settings\",\n    ar: \"حفظ الإعدادات\",\n    kur: \"پاشەکەوتکردنی ڕێکخستنەکان\",\n  },\n  \"settings.settingsSaved\": {\n    en: \"Settings saved successfully!\",\n    ar: \"تم حفظ الإعدادات بنجاح!\",\n    kur: \"ڕێکخستنەکان بە سەرکەوتوویی پاشەکەوت کران!\",\n  },\n  \"settings.mapStyleDefault\": {\n    en: \"Default\",\n    ar: \"افتراضي\",\n    kur: \"بنەڕەتی\",\n  },\n  \"settings.mapStyleSatellite\": {\n    en: \"Satellite\",\n    ar: \"قمر صناعي\",\n    kur: \"هەواربەرە\",\n  },\n  \"settings.mapStyleTerrain\": {\n    en: \"Terrain\",\n    ar: \"تضاريس\",\n    kur: \"دۆزران\",\n  },\n  \"settings.profileInformation\": {\n    en: \"Profile Information\",\n    ar: \"معلومات الملف الشخصي\",\n    kur: \"زانیاری پڕۆفایل\",\n  },\n  \"settings.displayName\": {\n    en: \"Display Name\",\n    ar: \"اسم العرض\",\n    kur: \"ناوی نیشاندان\",\n  },\n  \"settings.displayNamePlaceholder\": {\n    en: \"Your name\",\n    ar: \"اسمك\",\n    kur: \"ناوت\",\n  },\n  \"settings.email\": {\n    en: \"Email\",\n    ar: \"البريد الإلكتروني\",\n    kur: \"ئیمەیڵ\",\n  },\n  \"settings.emailPlaceholder\": {\n    en: \"your.email@example.com\",\n    ar: \"your.email@example.com\",\n    kur: \"your.email@example.com\",\n  },\n  \"settings.phone\": {\n    en: \"Phone Number\",\n    ar: \"رقم الهاتف\",\n    kur: \"ژمارەی تەلەفۆن\",\n  },\n  \"settings.phonePlaceholder\": {\n    en: \"+964 xxx xxx xxxx\",\n    ar: \"+964 xxx xxx xxxx\",\n    kur: \"+964 xxx xxx xxxx\",\n  },\n  \"settings.settingsPreferences\": {\n    en: \"Settings & Preferences\",\n    ar: \"الإعدادات والتفضيلات\",\n    kur: \"ڕێکخستن و ویستەکان\",\n  },\n  \"settings.settingsDescription\": {\n    en: \"Customize your profile, language, notifications, and display preferences.\",\n    ar: \"تخصيص ملفك الشخصي واللغة والإشعارات وتفضيلات العرض.\",\n    kur: \"دەستکاریکردنی پڕۆفایل، زمان، ئاگاداری و ویستی نیشاندان.\",\n  },\n\n  // Home page and menu items\n  \"menu.myFavorites\": {\n    en: \"My Favorites\",\n    ar: \"المفضلة\",\n    kur: \"بەرگریەکانم\",\n  },\n  \"menu.settings\": {\n    en: \"Settings\",\n    ar: \"الإعدادات\",\n    kur: \"ڕێکخستنەکان\",\n  },\n  \"menu.darkMode\": {\n    en: \"Dark Mode\",\n    ar: \"الوضع المظلم\",\n    kur: \"دۆخی تاریک\",\n  },\n  \"menu.lightMode\": {\n    en: \"Light Mode\",\n    ar: \"الوضع الفاتح\",\n    kur: \"دۆخی ڕووناک\",\n  },\n  \"menu.signOut\": {\n    en: \"Sign Out\",\n    ar: \"تسجيل الخروج\",\n    kur: \"چوونەدەرەوە\",\n  },\n  \"home.properties\": {\n    en: \"properties\",\n    ar: \"عقار\",\n    kur: \"خانووبەرە\",\n  },\n  \"home.loadingMap\": {\n    en: \"Loading map...\",\n    ar: \"تحميل الخريطة...\",\n    kur: \"بارکردنی نەخشە...\",\n  },\n\n  // Filter labels\n  \"filter.listingType\": {\n    en: \"Listing Type\",\n    ar: \"نوع الإعلان\",\n    kur: \"جۆری لیستکردن\",\n  },\n  \"filter.propertyType\": {\n    en: \"Property Type\",\n    ar: \"نوع العقار\",\n    kur: \"جۆری خانووبەرە\",\n  },\n  \"filter.bedrooms\": {\n    en: \"Bedrooms\",\n    ar: \"غرف النوم\",\n    kur: \"ژووری نوستن\",\n  },\n  \"filter.beds\": {\n    en: \"Beds\",\n    ar: \"أسرة\",\n    kur: \"جێخەوەکان\",\n  },\n  \"filter.bathrooms\": {\n    en: \"Bathrooms\",\n    ar: \"الحمامات\",\n    kur: \"حەمامەکان\",\n  },\n  \"filter.baths\": {\n    en: \"Baths\",\n    ar: \"حمامات\",\n    kur: \"حەمام\",\n  },\n  \"filter.city\": {\n    en: \"City\",\n    ar: \"المدينة\",\n    kur: \"شار\",\n  },\n  \"filter.cityPlaceholder\": {\n    en: \"e.g. Erbil, Baghdad\",\n    ar: \"مثل: أربيل، بغداد\",\n    kur: \"وەک: هەولێر، بەغدا\",\n  },\n  \"filter.priceRange\": {\n    en: \"Price Range\",\n    ar: \"نطاق السعر\",\n    kur: \"نرخی نێوان\",\n  },\n  \"filter.priceRangeLabel\": {\n    en: \"Price Range:\",\n    ar: \"نطاق السعر:\",\n    kur: \"نرخی نێوان:\",\n  },\n\n  // About Us Page\n  \"about.title\": {\n    en: \"About MapEstate\",\n    ar: \"حول MapEstate\",\n    kur: \"دەربارەی MapEstate\",\n  },\n  \"about.subtitle\": {\n    en: \"Your Trusted Real Estate Partner\",\n    ar: \"شريكك الموثوق في العقارات\",\n    kur: \"هاوبەشی متمانەپێکراوت لە خانووبەرە\",\n  },\n  \"about.ourMission\": {\n    en: \"Our Mission\",\n    ar: \"مهمتنا\",\n    kur: \"ئامانجمان\",\n  },\n  \"about.missionText\": {\n    en: \"At MapEstate, we are dedicated to revolutionizing the real estate experience through cutting-edge technology and personalized service. Our mission is to make property buying, selling, and renting accessible, transparent, and efficient for everyone.\",\n    ar: \"في MapEstate، نحن ملتزمون بثورة تجربة العقارات من خلال التكنولوجيا المتطورة والخدمة الشخصية. مهمتنا هي جعل شراء وبيع وتأجير العقارات في متناول الجميع وشفافة وفعالة.\",\n    kur: \"لە MapEstate، ئێمە پابەندین بە شۆڕشگێڕی ئەزموونی خانووبەرە لە ڕێگەی تەکنەلۆژیای پێشکەوتوو و خزمەتگوزاری کەسی. ئامانجمان ئەوەیە کە کڕین و فرۆشتن و کرێدانی خانووبەرە بکەینە دەستڕاگەیشتوو، ڕوونی و کاریگەر بۆ هەمووان.\",\n  },\n  \"about.ourStory\": {\n    en: \"Our Story\",\n    ar: \"قصتنا\",\n    kur: \"چیرۆکمان\",\n  },\n  \"about.storyText\": {\n    en: \"Founded with a vision to bridge the gap between traditional real estate practices and modern technology, MapEstate has grown to become a leading platform in the region. We combine local market expertise with innovative AI-powered search capabilities to help you find your perfect property.\",\n    ar: \"تأسست برؤية لسد الفجوة بين ممارسات العقارات التقليدية والتكنولوجيا الحديثة، نمت MapEstate لتصبح منصة رائدة في المنطقة. نحن نجمع بين خبرة السوق المحلية وقدرات البحث المبتكرة المدعومة بالذكاء الاصطناعي لمساعدتك في العثور على العقار المثالي.\",\n    kur: \"بە بینینێک دامەزراوە بۆ پڕکردنەوەی بۆشاییەکە لە نێوان پراکتیزەکانی خانووبەرەی نەریتی و تەکنەلۆژیای مۆدێرن، MapEstate گەشەی کردووە و بووەتە پلاتفۆرمێکی پێشەنگ لە هەرێمەکە. ئێمە شارەزایی بازاڕی خۆجێیی تێکەڵ دەکەین لەگەڵ توانای گەڕانی داهێنەری پاڵپشتیکراو بە AIەوە بۆ یارمەتیدانت لە دۆزینەوەی خانووبەرە تەواوەکەت.\",\n  },\n  \"about.ourValues\": {\n    en: \"Our Values\",\n    ar: \"قيمنا\",\n    kur: \"بەهاکانمان\",\n  },\n  \"about.valueTransparency\": {\n    en: \"Transparency\",\n    ar: \"الشفافية\",\n    kur: \"ڕوونی\",\n  },\n  \"about.valueTransparencyText\": {\n    en: \"We believe in complete transparency in all our dealings, providing accurate and up-to-date information.\",\n    ar: \"نؤمن بالشفافية الكاملة في جميع تعاملاتنا، وتوفير معلومات دقيقة ومحدثة.\",\n    kur: \"ئێمە باوەڕمان بە ڕوونی تەواو هەیە لە هەموو مامەڵەکانماندا، پێدانی زانیاری وردی نوێکراوە.\",\n  },\n  \"about.valueInnovation\": {\n    en: \"Innovation\",\n    ar: \"الابتكار\",\n    kur: \"داهێنان\",\n  },\n  \"about.valueInnovationText\": {\n    en: \"We continuously innovate to provide the best user experience with cutting-edge technology.\",\n    ar: \"نبتكر باستمرار لتوفير أفضل تجربة مستخدم بتكنولوجيا متطورة.\",\n    kur: \"ئێمە بەردەوام داهێنان دەکەین بۆ دابینکردنی باشترین ئەزموونی بەکارهێنەر بە تەکنەلۆژیای پێشکەوتوو.\",\n  },\n  \"about.valueExcellence\": {\n    en: \"Excellence\",\n    ar: \"التميز\",\n    kur: \"باشی\",\n  },\n  \"about.valueExcellenceText\": {\n    en: \"We strive for excellence in every aspect of our service, from customer support to property listings.\",\n    ar: \"نسعى للتميز في كل جانب من جوانب خدمتنا، من دعم العملاء إلى قوائم العقارات.\",\n    kur: \"ئێمە هەوڵ دەدەین بۆ باشی لە هەموو لایەکی خزمەتگوزاریەکانمان، لە پاڵپشتی کڕیارەوە تا لیستی خانووبەرەکان.\",\n  },\n  \"about.whyChooseUs\": {\n    en: \"Why Choose MapEstate?\",\n    ar: \"لماذا تختار MapEstate؟\",\n    kur: \"بۆچی MapEstate هەڵبژێریت؟\",\n  },\n  \"about.featureAI\": {\n    en: \"AI-Powered Search\",\n    ar: \"بحث مدعوم بالذكاء الاصطناعي\",\n    kur: \"گەڕانی پاڵپشتیکراو بە AI\",\n  },\n  \"about.featureAIText\": {\n    en: \"Find properties using natural language queries and get intelligent recommendations.\",\n    ar: \"ابحث عن العقارات باستخدام استعلامات اللغة الطبيعية واحصل على توصيات ذكية.\",\n    kur: \"خانووبەرەکان بدۆزەرەوە بە بەکارهێنانی پرسیاری زمانی سروشتی و پێشنیاری زیرەک وەربگرە.\",\n  },\n  \"about.featureLocal\": {\n    en: \"Local Expertise\",\n    ar: \"خبرة محلية\",\n    kur: \"شارەزایی خۆجێیی\",\n  },\n  \"about.featureLocalText\": {\n    en: \"Our team has deep knowledge of the local real estate market and regulations.\",\n    ar: \"فريقنا لديه معرفة عميقة بسوق العقارات المحلي واللوائح.\",\n    kur: \"تیمەکەمان زانیاری قووڵی هەیە لە بازاڕی خانووبەرەی خۆجێیی و یاساکان.\",\n  },\n  \"about.featureSupport\": {\n    en: \"24/7 Support\",\n    ar: \"دعم على مدار الساعة\",\n    kur: \"پشتگیری ٢٤/٧\",\n  },\n  \"about.featureSupportText\": {\n    en: \"Get assistance whenever you need it with our dedicated customer support team.\",\n    ar: \"احصل على المساعدة متى احتجت إليها مع فريق دعم العملاء المخصص لدينا.\",\n    kur: \"یارمەتی وەربگرە کاتێک پێویستت پێیەتی لەگەڵ تیمی تایبەتی پشتگیری کڕیارەکانمان.\",\n  },\n  \"about.contactUs\": {\n    en: \"Contact Us\",\n    ar: \"اتصل بنا\",\n    kur: \"پەیوەندیمان پێوە بکە\",\n  },\n  \"about.contactText\": {\n    en: \"Ready to find your dream property? Get in touch with our team today.\",\n    ar: \"جاهز للعثور على عقار أحلامك؟ تواصل مع فريقنا اليوم.\",\n    kur: \"ئامادەیت بۆ دۆزینەوەی خانووبەرەی خەونەکانت؟ ئەمڕۆ پەیوەندی بە تیمەکەمانەوە بکە.\",\n  },\n  \"about.backToHome\": {\n    en: \"Back to Home\",\n    ar: \"العودة للرئيسية\",\n    kur: \"گەڕانەوە بۆ سەرەتا\",\n  },\n\n  // Filter options\n  \"filter.allTypes\": {\n    en: \"All Types\",\n    ar: \"جميع الأنواع\",\n    kur: \"هەموو جۆرەکان\",\n  },\n  \"filter.allProperties\": {\n    en: \"All Properties\",\n    ar: \"جميع العقارات\",\n    kur: \"هەموو خانووبەرەکان\",\n  },\n  \"filter.house\": {\n    en: \"House\",\n    ar: \"منزل\",\n    kur: \"ماڵ\",\n  },\n  \"filter.apartment\": {\n    en: \"Apartment\",\n    ar: \"شقة\",\n    kur: \"شوقە\",\n  },\n  \"filter.villa\": {\n    en: \"Villa\",\n    ar: \"فيلا\",\n    kur: \"ڤیلا\",\n  },\n  \"filter.land\": {\n    en: \"Land\",\n    ar: \"أرض\",\n    kur: \"زەوی\",\n  },\n  \"filter.any\": {\n    en: \"Any\",\n    ar: \"أي\",\n    kur: \"هەر\",\n  },\n  \"filter.clearAll\": {\n    en: \"Clear All\",\n    ar: \"مسح الكل\",\n    kur: \"پاککردنەوەی هەموو\",\n  },\n  \"filter.activeFilters\": {\n    en: \"Active filters:\",\n    ar: \"المرشحات النشطة:\",\n    kur: \"فلتەرە چالاکەکان:\",\n  },\n  \"filter.clear\": {\n    en: \"Clear\",\n    ar: \"مسح\",\n    kur: \"پاککردنەوە\",\n  },\n\n  // Search and AI\n  \"search.aiPlaceholder\": {\n    en: \"Ask AI: 'Find me a 3-bedroom villa under $300k in Erbil'\",\n    ar: \"اسأل الذكاء الاصطناعي: 'ابحث لي عن فيلا بـ 3 غرف نوم تحت 300 ألف دولار في أربيل'\",\n    kur: \"لە AI بپرسە: 'ڤیلایەکی 3 ژووری نوستن بدۆزەرەوە کە کەمتر لە 300 هەزار دۆلار بێت لە هەولێر'\",\n  },\n\n  // SEO Meta Tags\n  \"seo.homeTitle\": {\n    en: \"MapEstate - AI-Powered Real Estate Finder | Properties in Kurdistan, Iraq\",\n    ar: \"MapEstate - محرك البحث العقاري المدعوم بالذكاء الاصطناعي | عقارات في كردستان، العراق\",\n    kur: \"MapEstate - دۆزەرەوەی خانووبەرەی پاڵپشتیکراو بە AI | خانووبەرە لە کوردستان، عێراق\",\n  },\n  \"seo.homeDescription\": {\n    en: \"Find your perfect home with AI-powered recommendations. Discover properties for rent and sale in Kurdistan, Iraq with intelligent search and expert agents.\",\n    ar: \"اعثر على منزلك المثالي مع التوصيات المدعومة بالذكاء الاصطناعي. اكتشف العقارات للإيجار والبيع في كردستان، العراق مع البحث الذكي والوكلاء الخبراء.\",\n    kur: \"ماڵی تەواوی خۆت بدۆزەرەوە لەگەڵ پێشنیارەکانی پاڵپشتیکراو بە AI. خانووبەرەکان بۆ کرێ و فرۆشتن لە کوردستان، عێراق بدۆزەرەوە لەگەڵ گەڕانی زیرەک و بریکارە شارەزاکان.\",\n  },\n  \"seo.propertiesTitle\": {\n    en: \"Properties for Sale and Rent in Kurdistan, Iraq | MapEstate\",\n    ar: \"عقارات للبيع والإيجار في كردستان، العراق | MapEstate\",\n    kur: \"خانووبەرە بۆ فرۆشتن و کرێ لە کوردستان، عێراق | MapEstate\",\n  },\n  \"seo.propertiesDescription\": {\n    en: \"Browse thousands of properties for sale and rent. Find apartments, houses, villas, and land in Kurdistan, Iraq with advanced search and AI recommendations.\",\n    ar: \"تصفح آلاف العقارات للبيع والإيجار. ابحث عن شقق ومنازل وفيلات وأراضي في كردستان، العراق مع البحث المتقدم والتوصيات الذكية.\",\n    kur: \"هەزاران خانووبەرە بۆ فرۆشتن و کرێ بگەڕێ. شوقە، ماڵ، ڤیلا و زەوی لە کوردستان، عێراق بدۆزەرەوە لەگەڵ گەڕانی پێشکەوتوو و پێشنیاری AI.\",\n  },\n  \"seo.propertyDetailTitle\": {\n    en: \"{propertyType} for {listingType} - {price} | {city}, Iraq | MapEstate\",\n    ar: \"{propertyType} لل{listingType} - {price} | {city}، العراق | MapEstate\",\n    kur: \"{propertyType} بۆ {listingType} - {price} | {city}، عێراق | MapEstate\",\n  },\n  \"seo.propertyDetailDescription\": {\n    en: \"{bedrooms} bedroom {propertyType} for {listingType} in {city}. {description} Contact our expert agents for viewing and details.\",\n    ar: \"{propertyType} بـ {bedrooms} غرفة نوم لل{listingType} في {city}. {description} اتصل بوكلائنا الخبراء للمعاينة والتفاصيل.\",\n    kur: \"{propertyType}ی {bedrooms} ژووری نوستن بۆ {listingType} لە {city}. {description} پەیوەندی بە بریکارە شارەزاکانمانەوە بکە بۆ بینین و وردەکاری.\",\n  },\n  \"seo.favoritesTitle\": {\n    en: \"My Favorite Properties - Saved Listings | MapEstate\",\n    ar: \"عقاراتي المفضلة - الإعلانات المحفوظة | MapEstate\",\n    kur: \"خانووبەرە بەرگریکراوەکانم - لیستی پاشەکەوتکراو | MapEstate\",\n  },\n  \"seo.aboutTitle\": {\n    en: \"About MapEstate - Leading Real Estate Platform in Kurdistan, Iraq\",\n    ar: \"حول MapEstate - منصة العقارات الرائدة في كردستان، العراق\",\n    kur: \"دەربارەی MapEstate - پلاتفۆرمی پێشەنگی خانووبەرە لە کوردستان، عێراق\",\n  },\n  \"seo.settingsTitle\": {\n    en: \"Settings - Customize Your Experience | MapEstate\",\n    ar: \"الإعدادات - خصص تجربتك | MapEstate\",\n    kur: \"ڕێکخستنەکان - ئەزموونەکەت خۆت بخە | MapEstate\",\n  },\n  \"seo.keywords\": {\n    en: \"real estate, Kurdistan, Iraq, properties for sale, properties for rent, apartments, houses, villas, land, AI search, Erbil, Sulaymaniyah, Dohuk\",\n    ar: \"عقارات، كردستان، العراق، عقارات للبيع، عقارات للإيجار، شقق، منازل، فيلات، أراضي، بحث ذكي، أربيل، السليمانية، دهوك\",\n    kur: \"خانووبەرە، کوردستان، عێراق، خانووبەرە بۆ فرۆشتن، خانووبەرە بۆ کرێ، شوقە، ماڵ، ڤیلا، زەوی، گەڕانی AI، هەولێر، سلێمانی، دهۆک\",\n  },\n  \n  // Property type translations for SEO\n  \"seo.propertyType.apartment\": {\n    en: \"Apartment\",\n    ar: \"شقة\",\n    kur: \"شوقە\",\n  },\n  \"seo.propertyType.house\": {\n    en: \"House\",\n    ar: \"منزل\", \n    kur: \"ماڵ\",\n  },\n  \"seo.propertyType.villa\": {\n    en: \"Villa\",\n    ar: \"فيلا\",\n    kur: \"ڤیلا\",\n  },\n  \"seo.propertyType.land\": {\n    en: \"Land\",\n    ar: \"أرض\",\n    kur: \"زەوی\",\n  },\n  \n  // Listing type translations for SEO\n  \"seo.listingType.sale\": {\n    en: \"Sale\",\n    ar: \"البيع\",\n    kur: \"فرۆشتن\",\n  },\n  \"seo.listingType.rent\": {\n    en: \"Rent\", \n    ar: \"الإيجار\",\n    kur: \"کرێ\",\n  },\n\n  // Map\n  \"map.loadingTitle\": {\n    en: \"Loading Interactive Map\",\n    ar: \"تحميل الخريطة التفاعلية\",\n    kur: \"بارکردنی نەخشەی کارلێکەر\",\n  },\n  \"map.loadingDescription\": {\n    en: \"Discovering amazing properties for you...\",\n    ar: \"نكتشف عقارات مذهلة لك...\",\n    kur: \"خانووبەرە نایابەکان بۆت دەدۆزینەوە...\",\n  },\n  \"map.poweredBy\": {\n    en: \"🗺️ Powered by OpenStreetMap & Leaflet.js\",\n    ar: \"🗺️ مدعوم بواسطة OpenStreetMap و Leaflet.js\",\n    kur: \"🗺️ پشتگیری لەلایەن OpenStreetMap و Leaflet.js\",\n  },\n  \"map.propertiesIn\": {\n    en: \"Properties in\",\n    ar: \"العقارات في\",\n    kur: \"خانووبەرە لە\",\n  },\n  \"map.propertiesInThisArea\": {\n    en: \"Properties in this area\",\n    ar: \"العقارات في هذه المنطقة\",\n    kur: \"خانووبەرە لەم ناوچەیەدا\",\n  },\n};\n\n// Global language change event system\nconst LANGUAGE_CHANGE_EVENT = \"languageChange\";\n\n// Global function to change language and notify all components\n// Debouncing mechanism for language changes\nlet languageChangeTimeout: NodeJS.Timeout | null = null;\nlet pendingLanguageChange: { lang: Language; persist: boolean } | null = null;\n\nfunction applyLanguageChanges(lang: Language, persist: boolean) {\n  // Batch DOM updates using requestAnimationFrame for smoother performance\n  requestAnimationFrame(() => {\n    // Update localStorage first\n    if (persist) {\n      localStorage.setItem(\"language\", lang);\n    }\n\n    // Batch all DOM updates together to prevent layout thrashing\n    const isRTL = lang === \"ar\" || lang === \"kur\";\n\n    // Update document attributes\n    document.documentElement.dir = isRTL ? \"rtl\" : \"ltr\";\n    document.documentElement.lang = lang;\n\n    // Apply font changes\n    const body = document.body;\n    body.classList.remove(\"arabic-font\", \"kurdish-font\");\n\n    if (lang === \"ar\") {\n      body.classList.add(\"arabic-font\");\n      body.style.fontFamily = \"var(--font-arabic)\";\n    } else if (lang === \"kur\") {\n      body.classList.add(\"kurdish-font\");\n      body.style.fontFamily = \"var(--font-kurdish)\";\n    } else {\n      body.style.fontFamily = \"var(--font-sans)\";\n    }\n\n    // Dispatch event after DOM updates are complete\n    requestAnimationFrame(() => {\n      window.dispatchEvent(\n        new CustomEvent(LANGUAGE_CHANGE_EVENT, { detail: { language: lang } }),\n      );\n    });\n  });\n}\n\nexport function globalChangeLanguage(lang: Language, persist: boolean = true) {\n  // Clear any pending language change\n  if (languageChangeTimeout) {\n    clearTimeout(languageChangeTimeout);\n  }\n\n  // Store the pending change\n  pendingLanguageChange = { lang, persist };\n\n  // Debounce rapid language changes (useful during initialization)\n  languageChangeTimeout = setTimeout(() => {\n    if (pendingLanguageChange) {\n      applyLanguageChanges(\n        pendingLanguageChange.lang,\n        pendingLanguageChange.persist,\n      );\n      pendingLanguageChange = null;\n    }\n    languageChangeTimeout = null;\n  }, 50); // Small delay to batch rapid changes\n}\n\nexport function useTranslation() {\n  const [language, setLanguage] = useState<Language>(() => {\n    // Initialize from localStorage\n    const savedLanguage = localStorage.getItem(\"language\") as Language;\n    return savedLanguage && [\"en\", \"ar\", \"kur\"].includes(savedLanguage)\n      ? savedLanguage\n      : \"en\";\n  });\n\n  // Only apply DOM changes on initial load, not on subsequent state changes\n  // to prevent conflicts with globalChangeLanguage function\n  const initialLanguageRef = useRef<Language | null>(null);\n\n  useEffect(() => {\n    // Only apply DOM changes on the first render\n    if (initialLanguageRef.current === null) {\n      initialLanguageRef.current = language;\n\n      document.documentElement.dir =\n        language === \"ar\" || language === \"kur\" ? \"rtl\" : \"ltr\";\n      document.documentElement.lang = language;\n\n      // Apply appropriate font based on language\n      if (language === \"ar\") {\n        document.body.classList.add(\"arabic-font\");\n        document.body.classList.remove(\"kurdish-font\");\n        document.body.style.fontFamily = \"var(--font-arabic)\";\n      } else if (language === \"kur\") {\n        document.body.classList.add(\"kurdish-font\");\n        document.body.classList.remove(\"arabic-font\");\n        document.body.style.fontFamily = \"var(--font-kurdish)\";\n      } else {\n        document.body.classList.remove(\"arabic-font\", \"kurdish-font\");\n        document.body.style.fontFamily = \"var(--font-sans)\";\n      }\n    }\n  }, [language]);\n\n  useEffect(() => {\n    // Listen for global language change events\n    const handleLanguageChange = (event: CustomEvent) => {\n      setLanguage(event.detail.language);\n    };\n\n    window.addEventListener(\n      LANGUAGE_CHANGE_EVENT,\n      handleLanguageChange as EventListener,\n    );\n\n    return () => {\n      window.removeEventListener(\n        LANGUAGE_CHANGE_EVENT,\n        handleLanguageChange as EventListener,\n      );\n    };\n  }, []);\n\n  const changeLanguage = (lang: Language, persist: boolean = true) => {\n    globalChangeLanguage(lang, persist);\n  };\n\n  const t = (key: string): string => {\n    return translations[key]?.[language] || key;\n  };\n\n  // Localization fallback helper for property content\n  const getLocalized = (content: any, fallback: string = \"\") => {\n    if (!content) return fallback;\n\n    // If content is already a string, return it\n    if (typeof content === \"string\") return content;\n\n    // If content is an object with language keys, use fallback logic\n    if (typeof content === \"object\") {\n      return (\n        content[language] || content.en || content.ar || content.kur || fallback\n      );\n    }\n\n    return fallback;\n  };\n\n  return {\n    language,\n    changeLanguage,\n    t,\n    getLocalized,\n    isRTL: language === \"ar\" || language === \"kur\",\n  };\n}\n\n// Hook to get current language state\nexport function useLanguage() {\n  const [language, setLanguage] = useState<Language>(() => {\n    if (typeof window === 'undefined') return 'en';\n    return (localStorage.getItem(\"language\") as Language) || 'en';\n  });\n\n  useEffect(() => {\n    const handleLanguageChange = (event: CustomEvent) => {\n      setLanguage(event.detail.language);\n    };\n    \n    window.addEventListener(LANGUAGE_CHANGE_EVENT, handleLanguageChange as EventListener);\n    return () => window.removeEventListener(LANGUAGE_CHANGE_EVENT, handleLanguageChange as EventListener);\n  }, []);\n\n  return { language };\n}\n\n// Detect language from URL path\nexport function detectLanguageFromUrl(url: string): Language | null {\n  const path = url.startsWith('/') ? url : '/' + url;\n  const segments = path.split('/').filter(Boolean);\n  \n  if (segments.length === 0) return null;\n  \n  const firstSegment = segments[0];\n  if (firstSegment === 'en' || firstSegment === 'ar' || firstSegment === 'kur') {\n    return firstSegment as Language;\n  }\n  \n  return null;\n}\n\n// Detect language from URL query parameters\nexport function detectLanguageFromQuery(url: string): Language | null {\n  try {\n    const urlObj = new URL(url, window.location.origin);\n    const langParam = urlObj.searchParams.get('lang');\n    \n    if (langParam && (langParam === 'en' || langParam === 'ar' || langParam === 'kur')) {\n      return langParam as Language;\n    }\n  } catch (error) {\n    // If URL parsing fails, try simple string parsing\n    const match = url.match(/[?&]lang=([^&#]*)/i);\n    if (match && match[1]) {\n      const lang = match[1].toLowerCase();\n      if (lang === 'en' || lang === 'ar' || lang === 'kur') {\n        return lang as Language;\n      }\n    }\n  }\n  \n  return null;\n}\n\n// Enhanced language detection that checks both path and query parameters\nexport function detectLanguageFromUrlEnhanced(url: string): { language: Language | null, source: 'path' | 'query' | null } {\n  // First check path parameters (higher priority)\n  const pathLang = detectLanguageFromUrl(url);\n  if (pathLang) {\n    return { language: pathLang, source: 'path' };\n  }\n  \n  // Then check query parameters\n  const queryLang = detectLanguageFromQuery(url);\n  if (queryLang) {\n    return { language: queryLang, source: 'query' };\n  }\n  \n  return { language: null, source: null };\n}\n\n// Redirect to language-prefixed URL\nexport function redirectToLanguage(language: Language, currentPath: string, setLocation: (path: string) => void) {\n  // Remove existing language prefix if present\n  const cleanPath = currentPath.replace(/^\\/(en|ar|kur)/, '') || '/';\n  \n  // Add new language prefix - always include trailing slash for home route\n  const newPath = `/${language}${cleanPath}`;\n  \n  setLocation(newPath);\n}\n\n// Convert query parameter language URL to path-based URL for SEO\nexport function convertQueryToPathLanguage(url: string, language: Language): string {\n  try {\n    const urlObj = new URL(url, window.location.origin);\n    \n    // Remove language query parameter\n    urlObj.searchParams.delete('lang');\n    \n    // Get clean path without existing language prefix\n    let pathname = urlObj.pathname;\n    const cleanPath = pathname.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n    \n    // Create new path with language prefix\n    const newPath = `/${language}${cleanPath}`;\n    \n    // Reconstruct URL with new path and remaining query parameters\n    urlObj.pathname = newPath;\n    \n    return urlObj.toString();\n  } catch (error) {\n    // Fallback for malformed URLs\n    const fallbackPath = url.split('?')[0].replace(/^\\/(en|ar|kur)/, '') || '/';\n    return `/${language}${fallbackPath}`;\n  }\n}\n\n// Enhanced redirect function that handles both path and query parameter detection\nexport function redirectToLanguageEnhanced(currentUrl: string, setLocation: (path: string) => void, updateUrl: boolean = true) {\n  const { language, source } = detectLanguageFromUrlEnhanced(currentUrl);\n  \n  if (language) {\n    if (source === 'query' && updateUrl) {\n      // Convert query parameter to path-based URL for better SEO\n      const newUrl = convertQueryToPathLanguage(currentUrl, language);\n      const newPath = new URL(newUrl, window.location.origin).pathname + new URL(newUrl, window.location.origin).search;\n      setLocation(newPath);\n      \n      // Update global language\n      globalChangeLanguage(language);\n    } else if (source === 'path') {\n      // Update global language for path-based detection\n      globalChangeLanguage(language);\n    }\n    \n    return language;\n  }\n  \n  // No language detected, use browser language and redirect\n  const browserLang = detectBrowserLanguage();\n  redirectToLanguage(browserLang, currentUrl, setLocation);\n  return browserLang;\n}\n\n// Get localized path for a given route (idempotent)\nexport function getLocalizedPath(path: string, language: Language): string {\n  // Ensure path starts with a leading slash\n  let cleanPath = path.startsWith('/') ? path : `/${path}`;\n  // Remove existing language prefix if present to ensure idempotency\n  cleanPath = cleanPath.replace(/^\\/(en|ar|kur)(?=\\/|$)/, '') || '/';\n  \n  // Add language prefix - always maintain leading slash\n  return `/${language}${cleanPath}`;\n}\n","size_bytes":49634},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nclass APIError extends Error {\n  constructor(public status: number, message: string, public response?: Response) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage: string;\n    try {\n      const errorData = await res.json();\n      errorMessage = errorData.message || errorData.error || res.statusText;\n    } catch {\n      // If response is not JSON, fall back to text\n      try {\n        errorMessage = (await res.text()) || res.statusText;\n      } catch {\n        errorMessage = res.statusText;\n      }\n    }\n\n    // Provide more user-friendly error messages\n    switch (res.status) {\n      case 400:\n        throw new APIError(res.status, `Bad request: ${errorMessage}`, res);\n      case 401:\n        throw new APIError(res.status, 'Please log in to continue', res);\n      case 403:\n        throw new APIError(res.status, 'You do not have permission to perform this action', res);\n      case 404:\n        throw new APIError(res.status, 'The requested resource was not found', res);\n      case 500:\n        throw new APIError(res.status, 'Server error. Please try again later', res);\n      case 503:\n        throw new APIError(res.status, 'Service temporarily unavailable. Please try again later', res);\n      default:\n        throw new APIError(res.status, errorMessage || 'An unexpected error occurred', res);\n    }\n  }\n}\n\n// Get API base URL - use environment variable or default to relative URLs\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '';\n\nfunction getFullApiUrl(url: string): string {\n  // If URL already starts with http/https, return as-is\n  if (url.startsWith('http')) {\n    return url;\n  }\n  // If we have a base URL, prepend it\n  if (API_BASE_URL) {\n    return `${API_BASE_URL.replace(/\\/$/, '')}${url}`;\n  }\n  // Otherwise return relative URL\n  return url;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  try {\n    const fullUrl = getFullApiUrl(url);\n    const res = await fetch(fullUrl, {\n      method,\n      headers: data ? { \"Content-Type\": \"application/json\" } : {},\n      body: data ? JSON.stringify(data) : undefined,\n      credentials: \"include\",\n    });\n\n    await throwIfResNotOk(res);\n    return res;\n  } catch (error) {\n    // Handle network errors\n    if (error instanceof TypeError) {\n      throw new APIError(0, 'Network error. Please check your internet connection and try again');\n    }\n    // Re-throw APIError and other errors as-is\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    try {\n      let url = queryKey[0] as string;\n      \n      // Handle query parameters if the second element is an object\n      if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n        const params = queryKey[1] as Record<string, unknown>;\n        const searchParams = new URLSearchParams();\n        \n        Object.entries(params).forEach(([key, value]) => {\n          if (value !== undefined && value !== null && value !== '') {\n            searchParams.append(key, String(value));\n          }\n        });\n        \n        const queryString = searchParams.toString();\n        if (queryString) {\n          url += `?${queryString}`;\n        }\n      } else if (queryKey.length > 1) {\n        // Fallback to joining for backward compatibility\n        url = queryKey.join(\"/\") as string;\n      }\n      \n      const fullUrl = getFullApiUrl(url);\n      const res = await fetch(fullUrl, {\n        credentials: \"include\",\n      });\n\n      if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n        return null;\n      }\n\n      await throwIfResNotOk(res);\n      return await res.json();\n    } catch (error) {\n      // Handle network errors\n      if (error instanceof TypeError) {\n        throw new APIError(0, 'Network error. Please check your internet connection and try again');\n      }\n      // Re-throw APIError and other errors as-is\n      throw error;\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes cache for better performance\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors except for network errors\n        if (error instanceof APIError && error.status >= 400 && error.status < 500 && error.status !== 0) {\n          return false;\n        }\n        // Retry up to 2 times for network errors and 5xx errors\n        return failureCount < 2;\n      },\n      gcTime: 10 * 60 * 1000, // Keep unused data for 10 minutes\n    },\n    mutations: {\n      retry: (failureCount, error) => {\n        // Don't retry mutations on 4xx errors except for network errors\n        if (error instanceof APIError && error.status >= 400 && error.status < 500 && error.status !== 0) {\n          return false;\n        }\n        // Retry once for network errors and 5xx errors\n        return failureCount < 1;\n      },\n    },\n  },\n});\n\n// Export APIError for use in components\nexport { APIError };\n","size_bytes":5414},"server/import-sql.ts":{"content":"import mysql from 'mysql2/promise';\nimport { getValidatedDatabaseConfig } from './config/dbConfig';\nimport fs from 'fs';\nimport path from 'path';\n\nasync function importSqlFile(sqlFilePath: string) {\n  let connection: mysql.Connection | null = null;\n  \n  try {\n    // Get database configuration\n    const config = getValidatedDatabaseConfig();\n    \n    console.log(\"🔗 Connecting to MySQL VPS...\");\n    console.log(`   Host: ${config.host}:${config.port}`);\n    console.log(`   Database: ${config.database}`);\n    \n    // Create connection\n    connection = await mysql.createConnection({\n      host: config.host,\n      port: config.port,\n      user: config.user,\n      password: config.password,\n      database: config.database,\n      multipleStatements: true, // Allow multiple SQL statements\n    });\n    \n    console.log(\"✅ Connected to MySQL VPS\");\n    \n    // Check if SQL file exists\n    if (!fs.existsSync(sqlFilePath)) {\n      throw new Error(`SQL file not found: ${sqlFilePath}`);\n    }\n    \n    // Read SQL file\n    console.log(`📂 Reading SQL file: ${sqlFilePath}`);\n    const sqlContent = fs.readFileSync(sqlFilePath, 'utf-8');\n    \n    if (!sqlContent.trim()) {\n      throw new Error(\"SQL file is empty\");\n    }\n    \n    // Split SQL content by semicolons to execute statements one by one\n    const statements = sqlContent\n      .split(';')\n      .map(stmt => stmt.trim())\n      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--') && !stmt.startsWith('/*'));\n    \n    console.log(`📊 Found ${statements.length} SQL statements to execute`);\n    \n    // Execute each statement\n    let successCount = 0;\n    let errorCount = 0;\n    \n    for (let i = 0; i < statements.length; i++) {\n      try {\n        const statement = statements[i];\n        if (statement) {\n          await connection.query(statement);\n          successCount++;\n          console.log(`✅ Executed statement ${i + 1}/${statements.length}`);\n        }\n      } catch (stmtError: any) {\n        errorCount++;\n        console.error(`❌ Error in statement ${i + 1}:`, stmtError.message);\n        console.error(`   Statement: ${statements[i].substring(0, 100)}...`);\n      }\n    }\n    \n    console.log(\"\\n📈 Import Summary:\");\n    console.log(`   ✅ Successful: ${successCount}`);\n    console.log(`   ❌ Failed: ${errorCount}`);\n    console.log(`   📊 Total: ${statements.length}`);\n    \n    if (errorCount === 0) {\n      console.log(\"\\n🎉 SQL import completed successfully!\");\n    } else {\n      console.log(\"\\n⚠️ SQL import completed with errors\");\n    }\n    \n  } catch (error: any) {\n    console.error(\"\\n❌ SQL Import Failed:\");\n    console.error(`   Error: ${error.message}`);\n    throw error;\n  } finally {\n    // Close connection\n    if (connection) {\n      await connection.end();\n      console.log(\"🔌 Database connection closed\");\n    }\n  }\n}\n\n// Main execution\nconst args = process.argv.slice(2);\n\nif (args.length === 0) {\n  console.log(\"\\n📖 Usage:\");\n  console.log(\"   tsx server/import-sql.ts <path-to-sql-file>\");\n  console.log(\"\\n📝 Example:\");\n  console.log(\"   tsx server/import-sql.ts ./backup.sql\");\n  console.log(\"   tsx server/import-sql.ts ./database-export.sql\");\n  process.exit(1);\n}\n\nconst sqlFilePath = path.resolve(args[0]);\n\nimportSqlFile(sqlFilePath)\n  .then(() => {\n    console.log(\"\\n✅ Import process completed\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"\\n❌ Import process failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":3487},"client/src/pages/customer-dashboard.tsx":{"content":"import { useState, useEffect, Suspense, lazy } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport ImageUpload from '@/components/image-upload';\nimport ProfilePhotoUpload from '@/components/profile-photo-upload';\nimport { OptimizedImage } from '@/components/ui/optimized-image';\n\n// Lazy load heavy components for better performance\nconst PropertyMap = lazy(() => import('@/components/property-map'));\nconst LocationSelectionMap = lazy(() => import('@/components/location-selection-map'));\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { usePropertyEvents } from '@/hooks/usePropertyEvents';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { PropertyWithDetails, PropertyFilters } from '@shared/schema';\nimport { SUPPORTED_LANGUAGES, LANGUAGE_NAMES, type Language } from '@shared/schema';\nimport { \n  Heart, Search, Filter, LogOut, MapPin, DollarSign,\n  Home, Eye, Bed, Bath, Maximize, Phone, Mail, Calendar,\n  Star, Bookmark, MessageSquare, User, Settings, Plus,\n  Building, University, Mountain, Tag, Key, Edit, Trash2,\n  EyeOff, ToggleLeft, ToggleRight, BarChart3, PieChart as PieChartIcon,\n  TrendingUp, Activity, Clock, Users, AlertTriangle, Globe\n} from 'lucide-react';\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from '@/components/ui/chart';\nimport { BarChart, Bar, PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from 'recharts';\n\n// Type definitions\ninterface WaveBalance {\n  hasUnlimited: boolean;\n  totalBalance: number;\n  currentUsage: number;\n  remainingWaves: number;\n}\n\n// Multi-language support\nconst translations = {\n  en: {\n    // Form Labels\n    propertyTitle: 'Property Title',\n    propertyType: 'Property Type',\n    listingType: 'Listing Type',\n    price: 'Price (USD)',\n    area: 'Area (M²)',\n    address: 'Address',\n    selectLanguage: 'Select Language',\n    \n    // Placeholders\n    titlePlaceholder: 'e.g., Beautiful 3-bedroom villa',\n    descriptionPlaceholder: 'Describe your property in detail...',\n    pricePlaceholder: 'e.g., 150000',\n    areaPlaceholder: 'e.g., 1200',\n    bedroomsPlaceholder: 'e.g., 3',\n    bathroomsPlaceholder: 'e.g., 2',\n    addressPlaceholder: 'e.g., 123 Main Street',\n    phonePlaceholder: 'e.g., +964 750 123 4567',\n    \n    // Property Types\n    house: 'House',\n    apartment: 'Apartment',\n    villa: 'Villa',\n    land: 'Land',\n    \n    // Listing Types\n    sale: 'For Sale',\n    rent: 'For Rent',\n    \n    // Additional Form Labels\n    bedrooms: 'Bedrooms',\n    bathrooms: 'Bathrooms', \n    city: 'City',\n    country: 'Country',\n    contactPhone: 'Contact Phone',\n    propertyWave: 'Property Wave',\n    amenities: 'Amenities',\n    features: 'Features',\n    description: 'Description',\n    propertyImages: 'Property Images',\n    propertyLocation: 'Select Property Location',\n    propertyVisibility: 'Property Visibility',\n    \n    // Additional Placeholders\n    contactPhonePlaceholder: 'e.g., +964 750 123 4567',\n    cityPlaceholder: 'e.g., Erbil',\n    countryPlaceholder: 'e.g., Iraq',\n    selectWavePlaceholder: 'Select a wave for this property',\n    \n    // Form Text\n    addNewProperty: 'Add New Property',\n    updateProperty: 'Update Property',\n    sharePropertyText: 'Share your property with others by adding it to our platform',\n    updatePropertyText: 'Update your property details',\n    selectPropertyLanguage: 'Select Property Language',\n    languageDescription: 'Choose the language for your property listing. This will change the form to that language and set the property\\'s display language.',\n    language: 'Language',\n    change: 'Change',\n    \n    // Location Section\n    selectLocationTitle: '📍 Select Property Location',\n    selectLocationDesc: 'Click on the map to pinpoint your property\\'s exact location. We\\'ll automatically fill in the address, city, and country fields for you!',\n    smartAutoFill: 'Smart Auto-Fill Enabled',\n    autoFillDesc: 'Address details will be automatically detected and filled when you click on the map',\n    locationSelected: 'Location Selected',\n    coordinates: 'Coordinates',\n    \n    // Images Section\n    propertyImagesTitle: '📷 Property Images',\n    propertyImagesDesc: 'Upload high-quality images of your property. The first image will be used as the main photo.',\n    \n    // Visibility Section\n    propertyVisibilityTitle: '👁️ Property Visibility',\n    propertyVisibilityDesc: 'Control whether your property appears on the public map and search results.',\n    visibleOnMap: 'Visible on Map',\n    hiddenFromMap: 'Hidden from Map',\n    visibleDesc: 'Your property will be visible to other users on the map and in search results',\n    hiddenDesc: 'Your property will be hidden from the public map and search results',\n    visible: 'Visible',\n    hidden: 'Hidden',\n    \n    // Wave Section\n    waveBalance: 'Property Wave',\n    remaining: 'remaining',\n    unlimited: 'Unlimited',\n    noWavesRemaining: 'No Waves Remaining',\n    waveBalanceWarning: 'You have used all {total} of your wave assignments. You must buy balance to continue assigning properties to waves.',\n    noWave: 'No Wave',\n    premiumWave: 'Premium Wave',\n    noWavesAvailable: 'No waves available',\n    waveDescription: 'Assign your property to a wave to organize it with similar properties. This helps with map viewing and property management.',\n    \n    // Contact Info\n    contactPhoneNote: 'This phone number will be shown to interested buyers for WhatsApp and calls',\n    \n    // Amenities\n    swimmingPool: 'Swimming Pool',\n    garden: 'Garden',\n    parking: 'Parking',\n    securitySystem: 'Security System',\n    elevator: 'Elevator',\n    gym: 'Gym',\n    balcony: 'Balcony',\n    terrace: 'Terrace',\n    \n    // Features\n    airConditioning: 'Air Conditioning',\n    heating: 'Heating',\n    furnished: 'Furnished',\n    petFriendly: 'Pet Friendly',\n    fireplace: 'Fireplace',\n    highCeilings: 'High Ceilings',\n    modernKitchen: 'Modern Kitchen',\n    storageRoom: 'Storage Room',\n    \n    // UI Text\n    required: 'required',\n    optional: 'optional',\n    selectPropertyType: 'Select property type',\n    selectListingType: 'Select listing type',\n    selectLanguageFirst: 'Please select a language to continue',\n  },\n  ar: {\n    // Form Labels\n    propertyTitle: 'عنوان العقار',\n    propertyType: 'نوع العقار',\n    listingType: 'نوع الإعلان',\n    price: 'السعر (دولار أمريكي)',\n    area: 'المساحة (قدم مربع)',\n    address: 'العنوان',\n    selectLanguage: 'اختر اللغة',\n    \n    // Placeholders\n    titlePlaceholder: 'مثال: فيلا جميلة من 3 غرف نوم',\n    descriptionPlaceholder: 'صف عقارك بالتفصيل...',\n    pricePlaceholder: 'مثال: 150000',\n    areaPlaceholder: 'مثال: 1200',\n    bedroomsPlaceholder: 'مثال: 3',\n    bathroomsPlaceholder: 'مثال: 2',\n    addressPlaceholder: 'مثال: 123 الشارع الرئيسي',\n    phonePlaceholder: 'مثال: +964 750 123 4567',\n    \n    // Property Types\n    house: 'منزل',\n    apartment: 'شقة',\n    villa: 'فيلا',\n    land: 'أرض',\n    \n    // Listing Types\n    sale: 'للبيع',\n    rent: 'للإيجار',\n    \n    // Additional Form Labels\n    bedrooms: 'غرف النوم',\n    bathrooms: 'دورات المياه',\n    city: 'المدينة',\n    country: 'البلد',\n    contactPhone: 'رقم الاتصال',\n    propertyWave: 'موجة العقار',\n    amenities: 'المرافق',\n    features: 'المميزات',\n    description: 'الوصف',\n    propertyImages: 'صور العقار',\n    propertyLocation: 'اختر موقع العقار',\n    propertyVisibility: 'ظهور العقار',\n    \n    // Additional Placeholders\n    contactPhonePlaceholder: 'مثال: +964 750 123 4567',\n    cityPlaceholder: 'مثال: أربيل',\n    countryPlaceholder: 'مثال: العراق',\n    selectWavePlaceholder: 'اختر موجة لهذا العقار',\n    \n    // Form Text\n    addNewProperty: 'إضافة عقار جديد',\n    updateProperty: 'تحديث العقار',\n    sharePropertyText: 'شارك عقارك مع الآخرين عن طريق إضافته إلى منصتنا',\n    updatePropertyText: 'تحديث تفاصيل عقارك',\n    selectPropertyLanguage: 'اختر لغة العقار',\n    languageDescription: 'اختر لغة قائمة العقار الخاص بك. سيؤدي هذا إلى تغيير النموذج إلى تلك اللغة وتعيين لغة عرض العقار.',\n    language: 'اللغة',\n    change: 'تغيير',\n    \n    // Location Section\n    selectLocationTitle: '📍 اختر موقع العقار',\n    selectLocationDesc: 'انقر على الخريطة لتحديد الموقع الدقيق لعقارك. سنقوم بتعبئة العنوان والمدينة والبلد تلقائياً!',\n    smartAutoFill: 'التعبئة التلقائية الذكية مفعلة',\n    autoFillDesc: 'سيتم اكتشاف تفاصيل العنوان وتعبئتها تلقائياً عند النقر على الخريطة',\n    locationSelected: 'تم اختيار الموقع',\n    coordinates: 'الإحداثيات',\n    \n    // Images Section\n    propertyImagesTitle: '📷 صور العقار',\n    propertyImagesDesc: 'ارفع صوراً عالية الجودة لعقارك. ستُستخدم الصورة الأولى كصورة رئيسية.',\n    \n    // Visibility Section\n    propertyVisibilityTitle: '👁️ ظهور العقار',\n    propertyVisibilityDesc: 'تحكم في ظهور عقارك على الخريطة العامة ونتائج البحث.',\n    visibleOnMap: 'ظاهر على الخريطة',\n    hiddenFromMap: 'مخفي من الخريطة',\n    visibleDesc: 'سيكون عقارك ظاهراً للمستخدمين الآخرين على الخريطة وفي نتائج البحث',\n    hiddenDesc: 'سيكون عقارك مخفياً من الخريطة العامة ونتائج البحث',\n    visible: 'ظاهر',\n    hidden: 'مخفي',\n    \n    // Wave Section\n    waveBalance: 'موجة العقار',\n    remaining: 'متبقي',\n    unlimited: 'غير محدود',\n    noWavesRemaining: 'لا توجد موجات متبقية',\n    waveBalanceWarning: 'لقد استخدمت جميع مهام الموجة البالغة {total}. يجب عليك شراء رصيد للمتابعة في تعيين العقارات للموجات.',\n    noWave: 'بدون موجة',\n    premiumWave: 'موجة مميزة',\n    noWavesAvailable: 'لا توجد موجات متاحة',\n    waveDescription: 'عين عقارك إلى موجة لتنظيمه مع عقارات مماثلة. هذا يساعد في عرض الخريطة وإدارة العقارات.',\n    \n    // Contact Info\n    contactPhoneNote: 'سيظهر رقم الهاتف هذا للمشترين المهتمين للواتساب والمكالمات',\n    \n    // Amenities\n    swimmingPool: 'مسبح',\n    garden: 'حديقة',\n    parking: 'موقف سيارات',\n    securitySystem: 'نظام أمني',\n    elevator: 'مصعد',\n    gym: 'صالة رياضية',\n    balcony: 'شرفة',\n    terrace: 'تراس',\n    \n    // Features\n    airConditioning: 'تكييف الهواء',\n    heating: 'تدفئة',\n    furnished: 'مفروش',\n    petFriendly: 'مناسب للحيوانات الأليفة',\n    fireplace: 'مدفأة',\n    highCeilings: 'أسقف عالية',\n    modernKitchen: 'مطبخ عصري',\n    storageRoom: 'غرفة تخزين',\n    \n    // UI Text\n    required: 'مطلوب',\n    optional: 'اختياري',\n    selectPropertyType: 'اختر نوع العقار',\n    selectListingType: 'اختر نوع الإعلان',\n    selectLanguageFirst: 'يرجى اختيار لغة للمتابعة',\n  },\n  kur: {\n    // Form Labels\n    propertyTitle: 'ناونیشانی موڵک',\n    propertyType: 'جۆری موڵک',\n    listingType: 'جۆری ڕیکلام',\n    price: 'نرخ (دۆلاری ئەمریکی)',\n    area: 'ڕووبەر (پێ چوارگۆشە)',\n    bedrooms: 'ژووری نوستن',\n    bathrooms: 'ژووری ئاو',\n    address: 'ناونیشان',\n    city: 'شار',\n    country: 'وڵات',\n    contactPhone: 'ژمارەی پەیوەندی',\n    propertyWave: 'شەپۆلی موڵک',\n    selectLanguage: 'زمان هەڵبژێرە',\n    \n    // Placeholders\n    titlePlaceholder: 'نموونە: ڤیلایەکی جوان بە 3 ژووری نوستن',\n    descriptionPlaceholder: 'موڵکەکەت بە ورووژی وەسف بکە...',\n    pricePlaceholder: 'نموونە: 150000',\n    areaPlaceholder: 'نموونە: 1200',\n    bedroomsPlaceholder: 'نموونە: 3',\n    bathroomsPlaceholder: 'نموونە: 2',\n    addressPlaceholder: 'نموونە: 123 شەقامی سەرەکی',\n    cityPlaceholder: 'نموونە: هەولێر',\n    countryPlaceholder: 'نموونە: عێراق',\n    phonePlaceholder: 'نموونە: +964 750 123 4567',\n    \n    // Property Types\n    house: 'ماڵ',\n    apartment: 'شوقە',\n    villa: 'ڤیلا',\n    land: 'زەوی',\n    \n    // Listing Types\n    sale: 'بۆ فرۆشتن',\n    rent: 'بۆ کرێ',\n    \n    // Additional Form Labels\n    amenities: 'گەرەکیەکان',\n    features: 'تایبەتمەندیەکان',\n    description: 'وەسف',\n    propertyImages: 'وێنەکانی موڵک',\n    propertyLocation: 'شوێنی موڵک هەڵبژێرە',\n    propertyVisibility: 'دیارکردنی موڵک',\n    \n    // Additional Placeholders\n    contactPhonePlaceholder: 'نموونە: +964 750 123 4567',\n    selectWavePlaceholder: 'شەپۆلێک بۆ ئەم موڵکە هەڵبژێرە',\n    \n    // Form Text\n    addNewProperty: 'موڵکی نوێ زیاد بکە',\n    updateProperty: 'موڵک نوێ بکەرەوە',\n    sharePropertyText: 'موڵکەکەت لەگەڵ کەسانی دیکە هاوبەش بکە بە زیادکردنی بۆ سەکۆمان',\n    updatePropertyText: 'وردەکارییەکانی موڵکەکەت نوێ بکەرەوە',\n    selectPropertyLanguage: 'زمانی موڵک هەڵبژێرە',\n    languageDescription: 'زمانێک بۆ لیستی موڵکەکەت هەڵبژێرە. ئەمە فۆڕمەکە دەگۆڕێت بۆ ئەو زمانە و زمانی پیشاندانی موڵکەکە دادەنێت.',\n    language: 'زمان',\n    change: 'گۆڕین',\n    \n    // Location Section\n    selectLocationTitle: '📍 شوێنی موڵک هەڵبژێرە',\n    selectLocationDesc: 'لەسەر نەخشەکە کلیک بکە بۆ دیاریکردنی شوێنی وردی موڵکەکەت. ئێمە بە شێوەیەکی خۆکارانە ناونیشان و شار و وڵات پڕ دەکەینەوە!',\n    smartAutoFill: 'پڕکردنەوەی زیرەکانەی خۆکارانە چالاککراوە',\n    autoFillDesc: 'وردەکارییەکانی ناونیشان بە شێوەیەکی خۆکارانە دەدۆزرێنەوە و پڕ دەکرێنەوە کاتێک لەسەر نەخشەکە کلیک دەکەیت',\n    locationSelected: 'شوێن هەڵبژێردرا',\n    coordinates: 'هاوپەیمانیەکان',\n    \n    // Images Section\n    propertyImagesTitle: '📷 وێنەکانی موڵک',\n    propertyImagesDesc: 'وێنەی بەرزی کوالیتی بۆ موڵکەکەت بارپێچ بکە. یەکەم وێنە وەک وێنەی سەرەکی بەکار دەهێنرێت.',\n    \n    // Visibility Section\n    propertyVisibilityTitle: '👁️ دیارکردنی موڵک',\n    propertyVisibilityDesc: 'کۆنترۆڵی ئەوە بکە کە موڵکەکەت لەسەر نەخشەی گشتی و ئەنجامەکانی گەڕان دەردەکەوێت.',\n    visibleOnMap: 'لەسەر نەخشە دیارە',\n    hiddenFromMap: 'لە نەخشە شاراوەیە',\n    visibleDesc: 'موڵکەکەت بۆ بەکارهێنەرانی دیکە لەسەر نەخشە و لە ئەنجامەکانی گەڕان دیار دەبێت',\n    hiddenDesc: 'موڵکەکەت لە نەخشەی گشتی و ئەنجامەکانی گەڕان شاردراوە دەبێت',\n    visible: 'دیار',\n    hidden: 'شاراوە',\n    \n    // Wave Section\n    waveBalance: 'شەپۆلی موڵک',\n    remaining: 'ماوە',\n    unlimited: 'سنووردار نییە',\n    noWavesRemaining: 'هیچ شەپۆلێک نەماوە',\n    waveBalanceWarning: 'تۆ هەموو {total} ئەرکەکانی شەپۆڵت بەکارهێناوە. دەبێت بڕی پارە بکڕیت بۆ بەردەوامبوون لە دانانی موڵکەکان بۆ شەپۆلەکان.',\n    noWave: 'بێ شەپۆل',\n    premiumWave: 'شەپۆلی تایبەت',\n    noWavesAvailable: 'هیچ شەپۆلێک بەردەست نییە',\n    waveDescription: 'موڵکەکەت بۆ شەپۆلێک دابنێ بۆ ڕێکخستنی لەگەڵ موڵکە هاوشێوەکان. ئەمە یارمەتی پیشاندانی نەخشە و بەڕێوەبردنی موڵکەکان دەدات.',\n    \n    // Contact Info\n    contactPhoneNote: 'ئەم ژمارە تەلەفۆنە بۆ کڕیارە ئارەزووبەکان پیشان دەدرێت بۆ واتساپ و پەیوەندیکردن',\n    \n    // Amenities\n    swimmingPool: 'مەلەوانی مەلە',\n    garden: 'باغچە',\n    parking: 'شوێنی ئۆتۆمبێل',\n    securitySystem: 'سیستەمی ئەمنی',\n    elevator: 'ئاسانسۆر',\n    gym: 'زیمی ریازی',\n    balcony: 'ئەیوان',\n    terrace: 'تەراس',\n    \n    // Features\n    airConditioning: 'کولەرکەر',\n    heating: 'گەرمکەر',\n    furnished: 'بە کەلوپەل',\n    petFriendly: 'گونجاو بۆ ئاژەڵەکان',\n    fireplace: 'بخاری با',\n    highCeilings: 'بانی بەرز',\n    modernKitchen: 'مەٹبەخی سەردەم',\n    storageRoom: 'ژووری کۆگاکراوە',\n    \n    // UI Text\n    required: 'پێویست',\n    optional: 'ئیختیاری',\n    selectPropertyType: 'جۆری موڵک هەڵبژێرە',\n    selectListingType: 'جۆری ڕیکلام هەڵبژێرە',\n    selectLanguageFirst: 'تکایە زمانێک هەڵبژێرە بۆ بەردەوامبوون',\n  }\n} as const;\n\n// Property form schema for validation\nconst propertyFormSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(10, 'Description must be at least 10 characters'),\n  type: z.enum(['house', 'apartment', 'villa', 'land']),\n  listingType: z.enum(['sale', 'rent']),\n  price: z.string().min(1, 'Price is required').refine((val) => !isNaN(Number(val)) && Number(val) > 0, 'Price must be a valid positive number'),\n  currency: z.string().default('USD'),\n  bedrooms: z.number().min(0).optional(),\n  bathrooms: z.number().min(0).optional(),\n  area: z.number().min(1, 'Area is required'),\n  address: z.string().min(1, 'Address is required'),\n  city: z.string().min(1, 'City is required'),\n  country: z.string().min(1, 'Country is required').default('Iraq'),\n  latitude: z.number().optional(),\n  longitude: z.number().optional(),\n  images: z.array(z.string()).default([]),\n  amenities: z.array(z.string()).default([]),\n  features: z.array(z.string()).default([]),\n  contactPhone: z.string().optional(),\n  waveId: z.string().optional(),\n  status: z.enum(['active', 'inactive']).default('active'),\n  language: z.enum(SUPPORTED_LANGUAGES).default('en'),\n});\n\n// Profile form schema for validation\nconst profileFormSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  phone: z.string().optional(),\n  avatar: z.string().optional(),\n});\n\ntype PropertyFormValues = z.infer<typeof propertyFormSchema>;\ntype ProfileFormValues = z.infer<typeof profileFormSchema>;\n\n// Helper functions for expiration\nconst calculateDaysUntilExpiration = (expiresAt: string | Date | null | undefined): number | null => {\n  if (!expiresAt) return null;\n  const now = new Date();\n  const expiration = expiresAt instanceof Date ? expiresAt : new Date(expiresAt);\n  const diffInMs = expiration.getTime() - now.getTime();\n  return Math.ceil(diffInMs / (1000 * 60 * 60 * 24));\n};\n\nconst getExpirationStatus = (daysUntilExpiration: number | null): { \n  status: string; \n  color: string; \n  bgColor: string;\n  icon: string;\n  title: string;\n  description: string;\n} => {\n  if (daysUntilExpiration === null) {\n    return { \n      status: 'Active', \n      color: 'text-green-600', \n      bgColor: 'bg-green-100',\n      icon: '✓',\n      title: 'Account Active',\n      description: 'Your account has no expiration date.'\n    };\n  }\n  \n  if (daysUntilExpiration < 0) {\n    return { \n      status: 'Expired', \n      color: 'text-red-600', \n      bgColor: 'bg-red-100',\n      icon: '⚠️',\n      title: 'Account Expired',\n      description: 'Your account has expired. Please contact support to renew.'\n    };\n  }\n  \n  if (daysUntilExpiration <= 3) {\n    return { \n      status: `${daysUntilExpiration} days left`, \n      color: 'text-red-600', \n      bgColor: 'bg-red-100',\n      icon: '🚨',\n      title: 'Account Expiring Soon',\n      description: `Your account expires in ${daysUntilExpiration} day${daysUntilExpiration === 1 ? '' : 's'}. Please contact support to extend it.`\n    };\n  }\n  \n  if (daysUntilExpiration <= 7) {\n    return { \n      status: `${daysUntilExpiration} days left`, \n      color: 'text-yellow-600', \n      bgColor: 'bg-yellow-100',\n      icon: '⚡',\n      title: 'Account Expiring',\n      description: `Your account expires in ${daysUntilExpiration} days. Consider contacting support to extend it.`\n    };\n  }\n  \n  return { \n    status: `${daysUntilExpiration} days left`, \n    color: 'text-green-600', \n    bgColor: 'bg-green-100',\n    icon: '✓',\n    title: 'Account Active',\n    description: `Your account expires in ${daysUntilExpiration} days.`\n  };\n};\n\n// Helper function to get text direction for language\nconst getTextDirection = (language: Language | string): 'ltr' | 'rtl' => {\n  return language === 'ar' || language === 'kur' || language === 'ku' ? 'rtl' : 'ltr';\n};\n\n// Helper function to get language-specific CSS classes\nconst getLanguageClasses = (language: Language, baseClasses: string = ''): string => {\n  const direction = getTextDirection(language);\n  const directionClasses = direction === 'rtl' ? 'text-right' : 'text-left';\n  return `${baseClasses} ${directionClasses}`.trim();\n};\n\nexport default function CustomerDashboard() {\n  const { user, logout } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [mapFilters, setMapFilters] = useState<PropertyFilters>({ limit: 100 });\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedLocation, setSelectedLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [editingProperty, setEditingProperty] = useState<PropertyWithDetails | null>(null);\n  const [showBalanceModal, setShowBalanceModal] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState<Language>('en');\n  const [showLanguageSelection, setShowLanguageSelection] = useState(true);\n\n  // Listen for real-time property updates\n  usePropertyEvents({\n    onPropertyCreated: (property) => {\n      console.log('New property created in dashboard:', property.title);\n    }\n  });\n\n  // Property form\n  const propertyForm = useForm<PropertyFormValues>({\n    resolver: zodResolver(propertyFormSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      type: 'house',\n      listingType: 'sale',\n      price: '',\n      currency: 'USD',\n      bedrooms: 1,\n      bathrooms: 1,\n      area: 1,\n      address: '',\n      city: '',\n      country: 'Iraq',\n      latitude: undefined,\n      longitude: undefined,\n      images: [],\n      amenities: [],\n      features: [],\n      contactPhone: user?.phone || '',\n      waveId: '',\n      status: 'active',\n      language: 'en',\n    },\n  });\n\n  // Profile form\n  const profileForm = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      firstName: user?.firstName || '',\n      lastName: user?.lastName || '',\n      phone: user?.phone || '',\n      avatar: user?.avatar || '',\n    },\n  });\n\n  // Update profile form when user data changes\n  useEffect(() => {\n    if (user) {\n      profileForm.reset({\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        phone: user.phone || '',\n        avatar: user.avatar || '',\n      });\n    }\n  }, [user, profileForm]);\n\n  // Update property form contact phone when user data changes\n  useEffect(() => {\n    if (user?.phone && propertyForm.getValues('contactPhone') !== user.phone) {\n      propertyForm.setValue('contactPhone', user.phone);\n    }\n  }, [user, propertyForm]);\n\n  // Get user's allowed languages\n  const userAllowedLanguages = user?.allowedLanguages || ['en'];\n  \n  // Filter translations to only include allowed languages\n  const availableLanguages = SUPPORTED_LANGUAGES.filter(lang => \n    userAllowedLanguages.includes(lang)\n  );\n\n  // Reset language selection when switching to add-property tab\n  useEffect(() => {\n    if (activeTab === 'add-property' && !editingProperty) {\n      setShowLanguageSelection(true);\n      setSelectedLanguage('en');\n      propertyForm.setValue('language', 'en');\n    }\n  }, [activeTab, editingProperty, propertyForm]);\n\n  // Update form language when language changes\n  useEffect(() => {\n    propertyForm.setValue('language', selectedLanguage);\n  }, [selectedLanguage, propertyForm]);\n\n  // Get current translations\n  const t = translations[selectedLanguage];\n\n  // Fetch all properties\n  const { data: allProperties = [], isLoading: propertiesLoading } = useQuery<PropertyWithDetails[]>({\n    queryKey: ['/api/properties', mapFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      Object.entries(mapFilters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          params.append(key, value.toString());\n        }\n      });\n      \n      const response = await fetch(`/api/properties?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch properties');\n      return response.json();\n    },\n  });\n\n  // Fetch user's favorites\n  const { data: favorites = [] } = useQuery<PropertyWithDetails[]>({\n    queryKey: ['/api/users', user?.id, 'favorites'],\n    enabled: !!user?.id,\n  });\n\n  // Fetch dashboard analytics data\n  const { data: analyticsData, isLoading: analyticsLoading } = useQuery({\n    queryKey: [`/api/customers/${user?.id}/analytics`],\n    enabled: !!user?.id,\n  });\n\n  // Fetch user's wave balance information\n  const { data: waveBalance, isLoading: waveBalanceLoading } = useQuery<WaveBalance>({\n    queryKey: ['/api/auth/wave-balance'],\n    enabled: !!user?.id,\n    refetchOnWindowFocus: true,\n  });\n\n  // Fetch property statistics for charts\n  const { data: propertyStats } = useQuery({\n    queryKey: ['/api/properties', { limit: 1000 }],\n    select: (data: PropertyWithDetails[]) => {\n      const byType = data?.reduce((acc, prop) => {\n        acc[prop.type] = (acc[prop.type] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>) || {};\n      \n      const byListingType = data?.reduce((acc, prop) => {\n        acc[prop.listingType] = (acc[prop.listingType] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>) || {};\n      \n      const byStatus = data?.reduce((acc, prop) => {\n        if (prop.status) {\n          acc[prop.status] = (acc[prop.status] || 0) + 1;\n        }\n        return acc;\n      }, {} as Record<string, number>) || {};\n      \n      return {\n        total: data?.length || 0,\n        byType: Object.entries(byType).map(([name, value]) => ({ name, value })),\n        byListingType: Object.entries(byListingType).map(([name, value]) => ({ name, value })),\n        byStatus: Object.entries(byStatus).map(([name, value]) => ({ name, value }))\n      };\n    }\n  });\n\n  // Fetch user's own properties\n  const { data: userProperties = [], isLoading: userPropertiesLoading } = useQuery<PropertyWithDetails[]>({\n    queryKey: ['/api/users', user?.id, 'properties'],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await fetch(`/api/users/${user.id}/properties`);\n      if (!response.ok) throw new Error('Failed to fetch user properties');\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Note: Wave selection simplified to only show \"Premium Wave\" and \"No Wave\" options\n\n  // Add to favorites mutation\n  const addToFavoritesMutation = useMutation({\n    mutationFn: async (propertyId: string) => {\n      const response = await apiRequest('POST', '/api/favorites', {\n        userId: user?.id,\n        propertyId,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'favorites'] });\n      toast({\n        title: 'Success',\n        description: 'Property added to favorites',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add to favorites',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Remove from favorites mutation\n  const removeFromFavoritesMutation = useMutation({\n    mutationFn: async (propertyId: string) => {\n      const response = await apiRequest('DELETE', '/api/favorites', {\n        userId: user?.id,\n        propertyId,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'favorites'] });\n      toast({\n        title: 'Success',\n        description: 'Property removed from favorites',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to remove from favorites',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Create property mutation for customers\n  const createPropertyMutation = useMutation({\n    mutationFn: async (propertyData: PropertyFormValues) => {\n      const response = await apiRequest('POST', '/api/properties', {\n        ...propertyData,\n        agentId: user?.id, // Customer becomes the owner/contact person\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Force fresh cache invalidation\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'properties'] });\n      queryClient.refetchQueries({ queryKey: ['/api/users', user?.id, 'properties'] });\n      propertyForm.reset();\n      setSelectedLocation(null);\n      toast({\n        title: 'Success',\n        description: 'Property added successfully! Check the \"My Properties\" tab to see it.',\n      });\n      setActiveTab('my-properties'); // Switch to properties view to see the new property\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add property',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Edit property mutation\n  const editPropertyMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: PropertyFormValues }) => {\n      const response = await apiRequest('PUT', `/api/properties/${id}`, data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'properties'] });\n      setEditingProperty(null);\n      propertyForm.reset();\n      setSelectedLocation(null);\n      toast({\n        title: 'Success',\n        description: 'Property updated successfully',\n      });\n      setActiveTab('my-properties');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update property',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete property mutation\n  const deletePropertyMutation = useMutation({\n    mutationFn: async (propertyId: string) => {\n      const response = await apiRequest('DELETE', `/api/properties/${propertyId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'properties'] });\n      toast({\n        title: 'Success',\n        description: 'Property deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete property',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Toggle property visibility mutation\n  const toggleVisibilityMutation = useMutation({\n    mutationFn: async ({ propertyId, newStatus }: { propertyId: string; newStatus: 'active' | 'inactive' }) => {\n      const response = await apiRequest('PUT', `/api/properties/${propertyId}`, { status: newStatus });\n      return await response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'properties'] });\n      toast({\n        title: 'Success',\n        description: variables.newStatus === 'active' \n          ? 'Property is now visible on the map' \n          : 'Property is now hidden from the map',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update property visibility',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (profileData: ProfileFormValues) => {\n      const response = await apiRequest('PUT', '/api/profile', profileData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setIsEditingProfile(false);\n      toast({\n        title: 'Success',\n        description: 'Profile updated successfully!',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update profile',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/admin/login');\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Logout failed',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleAddToFavorites = (propertyId: string) => {\n    addToFavoritesMutation.mutate(propertyId);\n  };\n\n  const handleRemoveFromFavorites = (propertyId: string) => {\n    removeFromFavoritesMutation.mutate(propertyId);\n  };\n\n  const isPropertyFavorite = (propertyId: string) => {\n    return favorites.some(fav => fav.id === propertyId);\n  };\n\n  const handleMapFilterChange = (filters: PropertyFilters) => {\n    setMapFilters(filters);\n  };\n\n  const handlePropertyInquiry = (property: PropertyWithDetails) => {\n    // Open inquiry modal or navigate to property detail\n    const identifier = property.slug || property.id;\n    navigate(`/property/${identifier}`);\n  };\n\n  const onSubmitProperty = (data: PropertyFormValues) => {\n    // Convert data to match backend expectations (InsertProperty type)\n    const submitData: any = {\n      ...data,\n      price: data.price, // Keep as string since backend expects decimal strings\n      latitude: data.latitude ? data.latitude.toString() : undefined, // Convert to string if provided\n      longitude: data.longitude ? data.longitude.toString() : undefined, // Convert to string if provided\n      // Handle waveId - convert \"no-wave\" or empty string to null for backend\n      waveId: data.waveId === \"no-wave\" || !data.waveId ? null : data.waveId,\n      // Ensure required fields are not empty\n      country: data.country || 'Iraq',\n      currency: data.currency || 'USD',\n      images: data.images || [],\n      amenities: data.amenities || [],\n      features: data.features || [],\n    };\n    \n    if (editingProperty) {\n      editPropertyMutation.mutate({ id: editingProperty.id, data: submitData });\n    } else {\n      createPropertyMutation.mutate(submitData);\n    }\n  };\n\n  const onSubmitProfile = (data: ProfileFormValues) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleEditProperty = (property: PropertyWithDetails) => {\n    setEditingProperty(property);\n    \n    // Set the language to match the property's language\n    const propertyLanguage = (property.language as Language) || 'en';\n    setSelectedLanguage(propertyLanguage);\n    setShowLanguageSelection(false); // Hide language selection when editing\n    \n    propertyForm.reset({\n      title: property.title,\n      description: property.description || '',\n      type: property.type as 'house' | 'apartment' | 'villa' | 'land',\n      listingType: property.listingType as 'sale' | 'rent',\n      price: property.price.toString(),\n      currency: property.currency || 'USD',\n      bedrooms: property.bedrooms || 0,\n      bathrooms: property.bathrooms || 0,\n      area: property.area || 0,\n      address: property.address,\n      city: property.city,\n      country: property.country,\n      contactPhone: (property as any).contactPhone || user?.phone || '',\n      amenities: property.amenities?.map(a => typeof a === 'string' ? a : a.amenity) || [],\n      features: property.features?.map(f => typeof f === 'string' ? f : f.feature) || [],\n      images: property.images?.map(img => typeof img === 'string' ? img : img.imageUrl) || [],\n      status: property.status === 'active' ? 'active' : 'inactive',\n      language: propertyLanguage, // Preserve original language\n    });\n    if (property.latitude && property.longitude) {\n      setSelectedLocation({\n        lat: parseFloat(property.latitude),\n        lng: parseFloat(property.longitude),\n      });\n    }\n    setActiveTab('add-property');\n  };\n\n  const handleDeleteProperty = async (propertyId: string, title: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${title}\"?`)) {\n      deletePropertyMutation.mutate(propertyId);\n    }\n  };\n\n  const handleToggleVisibility = (propertyId: string, currentStatus: string) => {\n    const newStatus = currentStatus === 'active' ? 'inactive' : 'active';\n    toggleVisibilityMutation.mutate({ propertyId, newStatus });\n  };\n\n  const handleCancelPropertyEdit = () => {\n    setEditingProperty(null);\n    // Reset form to completely empty values\n    propertyForm.reset({\n      title: '',\n      description: '',\n      type: 'house',\n      listingType: 'sale',\n      price: '',\n      currency: 'USD',\n      bedrooms: 1,\n      bathrooms: 1,\n      area: 1,\n      address: '',\n      city: '',\n      country: 'Iraq',\n      latitude: undefined,\n      longitude: undefined,\n      images: [],\n      amenities: [],\n      features: [],\n      contactPhone: user?.phone || '',\n      waveId: '',\n      status: 'active',\n    });\n    setSelectedLocation(null);\n    setActiveTab('my-properties'); // Navigate back to properties list\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditingProfile(false);\n    // Reset form to current user data\n    profileForm.reset({\n      firstName: user?.firstName || '',\n      lastName: user?.lastName || '',\n      phone: user?.phone || '',\n      avatar: user?.avatar || '',\n    });\n  };\n\n  const handleLocationSelect = (locationData: { lat: number; lng: number; address?: string; city?: string; country?: string }) => {\n    const { lat, lng, address, city, country } = locationData;\n    \n    setSelectedLocation({ lat, lng });\n    propertyForm.setValue('latitude', lat);\n    propertyForm.setValue('longitude', lng);\n    \n    // Auto-fill address fields from reverse geocoding\n    if (address && address.trim()) {\n      propertyForm.setValue('address', address.trim());\n      toast({\n        title: 'Address Auto-filled',\n        description: `Address set to: ${address}`,\n      });\n    }\n    \n    if (city && city.trim()) {\n      propertyForm.setValue('city', city.trim());\n    }\n    \n    if (country && country.trim()) {\n      propertyForm.setValue('country', country.trim());\n    }\n    \n    // Show success message if we got location data\n    if (address || city || country) {\n      toast({\n        title: 'Location Details Found',\n        description: 'Address fields have been automatically filled from the selected location.',\n      });\n    } else {\n      // Fallback for areas where geocoding might not work well\n      if (lat > 35.0 && lat < 37.5 && lng > 43.0 && lng < 46.0) {\n        if (!propertyForm.getValues('city')) {\n          propertyForm.setValue('city', 'Erbil');\n        }\n        if (!propertyForm.getValues('country')) {\n          propertyForm.setValue('country', 'Iraq');\n        }\n      }\n    }\n  };\n\n  // Filter properties based on search\n  const filteredProperties = allProperties.filter(property => {\n    if (!searchTerm) return true;\n    \n    const searchLower = searchTerm.toLowerCase();\n    return (\n      property.title.toLowerCase().includes(searchLower) ||\n      property.description?.toLowerCase().includes(searchLower) ||\n      property.address.toLowerCase().includes(searchLower) ||\n      property.city.toLowerCase().includes(searchLower) ||\n      property.type.toLowerCase().includes(searchLower)\n    );\n  });\n\n  return (\n    <ProtectedRoute requiredRole={['user', 'admin']}>\n      <div className=\"min-h-screen bg-slate-50 dark:bg-gray-900\">\n        {/* Header */}\n        <header className=\"bg-gradient-to-r from-orange-600 to-orange-700 dark:from-orange-800 dark:to-orange-900 shadow-lg border-b border-orange-800\">\n          <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n            <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center py-4 sm:py-6 space-y-3 sm:space-y-0\">\n              <div className=\"flex items-center justify-center sm:justify-start space-x-2 sm:space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"p-2 bg-white/10 rounded-lg\">\n                    <Home className=\"h-6 w-6 sm:h-8 sm:w-8 text-white\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-xl sm:text-2xl font-bold text-white\">\n                      Property Portal\n                    </h1>\n                    <p className=\"text-xs sm:text-sm text-orange-100 hidden sm:block\">Find Your Dream Home</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-center sm:justify-end space-x-2 sm:space-x-4\">\n                <div className=\"flex items-center space-x-2 sm:space-x-3 bg-white/10 rounded-lg px-2 sm:px-3 py-1 sm:py-2\">\n                  <Avatar className=\"h-8 w-8 sm:h-10 sm:w-10\">\n                    <AvatarImage src={user?.avatar || ''} alt=\"Profile photo\" />\n                    <AvatarFallback className=\"bg-white text-orange-600 font-medium\">\n                      {user?.firstName?.[0]}{user?.lastName?.[0] || user?.username[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"hidden sm:block\">\n                    <p className=\"text-sm font-medium text-white\">\n                      {user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.username}\n                    </p>\n                    <p className=\"text-xs text-orange-100\">Customer</p>\n                  </div>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleLogout}\n                  className=\"bg-white/10 border-white/20 text-white hover:bg-white hover:text-orange-600 transition-all duration-200\"\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"h-4 w-4 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Logout</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-8\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4 sm:space-y-6\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-slate-200 dark:border-gray-700\">\n              <TabsList className=\"grid w-full grid-cols-2 xs:grid-cols-3 sm:grid-cols-4 md:grid-cols-7 h-auto bg-transparent gap-1 p-1 sm:p-2\">\n                <TabsTrigger \n                  value=\"overview\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem]\"\n                  data-testid=\"tab-overview\"\n                >\n                  <BarChart3 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"text-[10px] sm:text-xs md:text-sm\">Overview</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"browse\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem]\"\n                >\n                  <Search className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"text-[10px] sm:text-xs md:text-sm\">Browse</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"map\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem] col-span-1 sm:col-span-1\"\n                >\n                  <MapPin className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"text-[10px] sm:text-xs md:text-sm\">Map</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"add-property\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem] col-span-1 sm:col-span-1\"\n                >\n                  <Plus className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"text-[10px] sm:text-xs md:text-sm\">Add</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"my-properties\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem] col-span-1 sm:col-span-1\"\n                >\n                  <Building className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"text-[10px] sm:text-xs md:text-sm hidden xs:inline sm:hidden md:inline\">My Properties</span>\n                  <span className=\"text-[10px] sm:text-xs md:text-sm xs:hidden sm:inline md:hidden\">Mine</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"favorites\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem] col-span-1 sm:col-span-1\"\n                >\n                  <div className=\"flex items-center gap-1\">\n                    <Heart className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"text-[8px] xs:text-[10px] sm:text-xs bg-orange-100 text-orange-700 px-1 rounded-full min-w-[1rem] h-4 flex items-center justify-center\">{favorites.length}</span>\n                  </div>\n                  <span className=\"text-[10px] sm:text-xs md:text-sm hidden xs:inline sm:hidden md:inline\">Favorites</span>\n                  <span className=\"text-[10px] sm:text-xs md:text-sm xs:hidden sm:inline md:hidden\">Fav</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"profile\" \n                  className=\"text-xs sm:text-sm py-1.5 sm:py-2 px-1 sm:px-2 md:px-4 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 hover:bg-slate-100 transition-all duration-200 flex flex-col sm:flex-row items-center justify-center gap-0.5 sm:gap-1 min-h-[2.5rem] sm:min-h-[2.75rem] col-span-1 sm:col-span-1\"\n                >\n                  <User className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                  <span className=\"text-[10px] sm:text-xs md:text-sm\">Profile</span>\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"overview\" className=\"space-y-3 sm:space-y-4 md:space-y-6\">\n              {/* Account Status and Expiration Dashboard */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3 sm:gap-4 md:gap-6\">\n                {/* Account Status Card */}\n                <Card className=\"md:col-span-1 xl:col-span-1 shadow-lg border-0 bg-white dark:bg-gray-800\">\n                  <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-white dark:from-gray-800 dark:to-gray-800\">\n                    <CardTitle className=\"text-base sm:text-lg font-bold text-blue-800 dark:text-blue-200 flex items-center\">\n                      <User className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2\" />\n                      Account Status\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                    {(() => {\n                      const daysUntilExpiration = calculateDaysUntilExpiration(user?.expiresAt);\n                      const status = getExpirationStatus(daysUntilExpiration);\n                      return (\n                        <div className=\"space-y-4\">\n                          <div className={`p-4 rounded-lg ${status.bgColor} border border-opacity-30`}>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <span className=\"text-lg\">{status.icon}</span>\n                              <Badge variant=\"secondary\" className={`${status.color} font-medium`}>\n                                {status.status}\n                              </Badge>\n                            </div>\n                            <h3 className={`font-semibold ${status.color} mb-1`}>{status.title}</h3>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">{status.description}</p>\n                          </div>\n                          \n                          {daysUntilExpiration !== null && daysUntilExpiration > 0 && (\n                            <div className=\"relative\">\n                              <div className=\"flex items-center justify-between text-sm mb-2\">\n                                <span className=\"text-gray-600 dark:text-gray-400\">Days Remaining</span>\n                                <span className=\"font-medium\">{daysUntilExpiration}</span>\n                              </div>\n                              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                                <div \n                                  className={`h-2 rounded-full transition-all duration-300 ${\n                                    daysUntilExpiration <= 3 ? 'bg-red-500' : \n                                    daysUntilExpiration <= 7 ? 'bg-yellow-500' : 'bg-green-500'\n                                  }`}\n                                  style={{ width: `${Math.min(100, (daysUntilExpiration / 30) * 100)}%` }}\n                                ></div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })()}\n                  </CardContent>\n                </Card>\n\n                {/* Property Statistics Overview */}\n                <Card className=\"md:col-span-1 xl:col-span-2 shadow-lg border-0 bg-white dark:bg-gray-800\">\n                  <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 bg-gradient-to-r from-orange-50 to-white dark:from-gray-800 dark:to-gray-800\">\n                    <CardTitle className=\"text-base sm:text-lg font-bold text-orange-800 dark:text-orange-200 flex items-center\">\n                      <BarChart3 className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2\" />\n                      Property Overview\n                    </CardTitle>\n                    <CardDescription className=\"text-sm sm:text-base text-orange-600 dark:text-orange-300\">\n                      Your property portfolio statistics\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 sm:gap-3 md:gap-4 mb-3 sm:mb-4 md:mb-6\">\n                      <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-blue-600 dark:text-blue-300\">{userProperties.length}</div>\n                        <div className=\"text-xs sm:text-sm text-blue-500 dark:text-blue-400\">My Properties</div>\n                      </div>\n                      <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-pink-50 to-pink-100 dark:from-pink-900 dark:to-pink-800 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-pink-600 dark:text-pink-300\">{favorites.length}</div>\n                        <div className=\"text-xs sm:text-sm text-pink-500 dark:text-pink-400\">Favorites</div>\n                      </div>\n                      <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900 dark:to-green-800 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-green-600 dark:text-green-300\">\n                          {userProperties.filter(p => p.status === 'active').length}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-green-500 dark:text-green-400\">Active</div>\n                      </div>\n                      {/* Balance Information in Overview */}\n                      {!waveBalanceLoading && waveBalance && (\n                        <>\n                          <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-indigo-50 to-indigo-100 dark:from-indigo-900 dark:to-indigo-800 rounded-lg\">\n                            <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-indigo-600 dark:text-indigo-300\">\n                              {waveBalance.hasUnlimited ? '∞' : waveBalance.totalBalance || 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-indigo-500 dark:text-indigo-400\">Total Balance</div>\n                          </div>\n                          <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900 dark:to-orange-800 rounded-lg\">\n                            <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-orange-600 dark:text-orange-300\">\n                              {Array.isArray(waveBalance.currentUsage) ? waveBalance.currentUsage.reduce((sum, wave) => sum + (wave.used || 0), 0) : 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-orange-500 dark:text-orange-400\">In Use</div>\n                          </div>\n                          <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-emerald-50 to-emerald-100 dark:from-emerald-900 dark:to-emerald-800 rounded-lg\">\n                            <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-emerald-600 dark:text-emerald-300\">\n                              {waveBalance.hasUnlimited ? '∞' : waveBalance.remainingWaves || 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-emerald-500 dark:text-emerald-400\">Remaining</div>\n                          </div>\n                        </>\n                      )}\n                      \n                      <div className=\"text-center p-2 sm:p-3 md:p-4 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900 dark:to-purple-800 rounded-lg\">\n                        <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-purple-600 dark:text-purple-300\">\n                          {propertyStats?.total || 0}\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-purple-500 dark:text-purple-400\">Total Market</div>\n                      </div>\n                    </div>\n\n                    {/* Wave Balance Information */}\n                    {!waveBalanceLoading && waveBalance && (\n                      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900 dark:to-indigo-900 p-4 rounded-lg border border-blue-200 dark:border-blue-700 mb-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h3 className=\"text-lg font-semibold text-blue-800 dark:text-blue-200 flex items-center\">\n                            <Activity className=\"h-5 w-5 mr-2\" />\n                            Wave Balance\n                          </h3>\n                          {waveBalance.hasUnlimited && (\n                            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-800 dark:text-blue-200\">\n                              Unlimited\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-300\">\n                              {waveBalance.hasUnlimited ? '∞' : waveBalance.totalBalance}\n                            </div>\n                            <div className=\"text-sm text-blue-500 dark:text-blue-400\">Total Balance</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-300\">\n                              {Array.isArray(waveBalance.currentUsage) ? waveBalance.currentUsage.reduce((sum, wave) => sum + (wave.used || 0), 0) : 0}\n                            </div>\n                            <div className=\"text-sm text-orange-500 dark:text-orange-400\">In Use</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"text-2xl font-bold text-green-600 dark:text-green-300\">\n                              {waveBalance.hasUnlimited ? '∞' : waveBalance.remainingWaves}\n                            </div>\n                            <div className=\"text-sm text-green-500 dark:text-green-400\">Remaining</div>\n                          </div>\n                        </div>\n\n                        {!waveBalance.hasUnlimited && waveBalance.totalBalance > 0 && (\n                          <div className=\"mt-4\">\n                            <div className=\"flex items-center justify-between text-sm mb-2\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Wave Usage</span>\n                              <span className=\"font-medium\">{Array.isArray(waveBalance.currentUsage) ? waveBalance.currentUsage.reduce((sum, wave) => sum + (wave.used || 0), 0) : 0} / {waveBalance.totalBalance}</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                              <div \n                                className={`h-2 rounded-full transition-all duration-300 ${\n                                  waveBalance.remainingWaves <= 0 ? 'bg-red-500' : \n                                  waveBalance.remainingWaves <= 2 ? 'bg-yellow-500' : 'bg-green-500'\n                                }`}\n                                style={{ width: `${Math.min(100, ((Array.isArray(waveBalance.currentUsage) ? waveBalance.currentUsage.reduce((sum, wave) => sum + (wave.used || 0), 0) : 0) / waveBalance.totalBalance) * 100)}%` }}\n                              ></div>\n                            </div>\n                            {waveBalance.remainingWaves <= 0 && (\n                              <p className=\"text-sm text-red-600 dark:text-red-400 mt-2\">\n                                ⚠️ Balance not available. You must buy balance to continue using wave assignments.\n                              </p>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Charts Section */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 md:gap-6\">\n                {/* Property Type Distribution Chart */}\n                <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800\">\n                  <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 p-3 sm:p-4 md:p-6\">\n                    <CardTitle className=\"text-base sm:text-lg font-bold flex items-center\">\n                      <PieChartIcon className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 text-orange-600\" />\n                      Market by Property Type\n                    </CardTitle>\n                    <CardDescription className=\"text-sm sm:text-base\">Distribution of properties in the market</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                    {propertyStats?.byType && propertyStats.byType.length > 0 ? (\n                      <ChartContainer\n                        config={{\n                          house: { label: \"House\", color: \"#3b82f6\" },\n                          apartment: { label: \"Apartment\", color: \"#ef4444\" },\n                          villa: { label: \"Villa\", color: \"#10b981\" },\n                          land: { label: \"Land\", color: \"#f59e0b\" }\n                        }}\n                        className=\"h-[200px] sm:h-[250px] md:h-[300px]\"\n                      >\n                        <PieChart>\n                          <ChartTooltip content={<ChartTooltipContent />} />\n                          <ChartLegend content={<ChartLegendContent />} />\n                          <Pie\n                            dataKey=\"value\"\n                            data={propertyStats.byType}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            outerRadius={80}\n                            label={({ name, value }: { name: string; value: number }) => `${name}: ${value}`}\n                          >\n                            {propertyStats.byType.map((entry: { name: string; value: number }, index: number) => (\n                              <Cell key={`cell-${index}`} fill={\n                                entry.name === 'house' ? '#3b82f6' :\n                                entry.name === 'apartment' ? '#ef4444' :\n                                entry.name === 'villa' ? '#10b981' : '#f59e0b'\n                              } />\n                            ))}\n                          </Pie>\n                        </PieChart>\n                      </ChartContainer>\n                    ) : (\n                      <div className=\"h-[200px] sm:h-[250px] md:h-[300px] flex items-center justify-center text-gray-500\">\n                        <div className=\"text-center\">\n                          <PieChartIcon className=\"h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12 mx-auto mb-2 opacity-50\" />\n                          <p className=\"text-sm sm:text-base\">No property data available</p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Listing Type Chart */}\n                <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800\">\n                  <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 p-3 sm:p-4 md:p-6\">\n                    <CardTitle className=\"text-base sm:text-lg font-bold flex items-center\">\n                      <TrendingUp className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 text-green-600\" />\n                      Sale vs Rent Distribution\n                    </CardTitle>\n                    <CardDescription className=\"text-sm sm:text-base\">Market distribution by listing type</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                    {propertyStats?.byListingType && propertyStats.byListingType.length > 0 ? (\n                      <ChartContainer\n                        config={{\n                          sale: { label: \"For Sale\", color: \"#3b82f6\" },\n                          rent: { label: \"For Rent\", color: \"#10b981\" }\n                        }}\n                        className=\"h-[200px] sm:h-[250px] md:h-[300px]\"\n                      >\n                        <BarChart data={propertyStats.byListingType}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <ChartTooltip content={<ChartTooltipContent />} />\n                          <ChartLegend content={<ChartLegendContent />} />\n                          <Bar dataKey=\"value\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                        </BarChart>\n                      </ChartContainer>\n                    ) : (\n                      <div className=\"h-[200px] sm:h-[250px] md:h-[300px] flex items-center justify-center text-gray-500\">\n                        <div className=\"text-center\">\n                          <BarChart3 className=\"h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12 mx-auto mb-2 opacity-50\" />\n                          <p className=\"text-sm sm:text-base\">No listing data available</p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Activity and Quick Actions */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 md:gap-6\">\n                {/* Recent Activity */}\n                <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800\">\n                  <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 p-3 sm:p-4 md:p-6\">\n                    <CardTitle className=\"text-base sm:text-lg font-bold flex items-center\">\n                      <Activity className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 text-blue-600\" />\n                      Recent Activity\n                    </CardTitle>\n                    <CardDescription className=\"text-sm sm:text-base\">Your latest actions and updates</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                    <div className=\"space-y-2 sm:space-y-3 md:space-y-4\">\n                      {userProperties.slice(0, 3).map((property) => (\n                        <div key={property.id} className=\"flex items-center space-x-2 sm:space-x-3 p-2 sm:p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                          <div className=\"h-8 w-8 sm:h-10 sm:w-10 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                            <Home className=\"h-3 w-3 sm:h-4 sm:w-4 md:h-5 md:w-5 text-orange-600 dark:text-orange-400\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-xs sm:text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                              {property.title}\n                            </p>\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              Listed as {property.listingType} • {property.status}\n                            </p>\n                          </div>\n                          <Badge variant={property.status === 'active' ? 'default' : 'secondary'} className=\"text-xs flex-shrink-0\">\n                            {property.status}\n                          </Badge>\n                        </div>\n                      ))}\n                      {userProperties.length === 0 && (\n                        <div className=\"text-center py-4 sm:py-6 md:py-8\">\n                          <Home className=\"h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12 mx-auto mb-2 sm:mb-3 text-gray-400\" />\n                          <p className=\"text-sm sm:text-base text-gray-500 dark:text-gray-400\">No properties listed yet</p>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"mt-2 text-xs sm:text-sm\"\n                            onClick={() => setActiveTab('add-property')}\n                          >\n                            Add Your First Property\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Quick Actions */}\n                <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800\">\n                  <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 p-3 sm:p-4 md:p-6\">\n                    <CardTitle className=\"text-base sm:text-lg font-bold flex items-center\">\n                      <Settings className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 text-purple-600\" />\n                      Quick Actions\n                    </CardTitle>\n                    <CardDescription className=\"text-sm sm:text-base\">Manage your account and properties</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                    <div className=\"grid grid-cols-2 gap-2 sm:gap-3 md:gap-4\">\n                      <Button \n                        variant=\"outline\" \n                        className=\"h-16 sm:h-18 md:h-20 flex flex-col items-center justify-center space-y-1 sm:space-y-2 hover:bg-orange-50 hover:border-orange-200 transition-all duration-200\"\n                        onClick={() => setActiveTab('add-property')}\n                        data-testid=\"button-add-property\"\n                      >\n                        <Plus className=\"h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6 text-orange-600\" />\n                        <span className=\"text-xs sm:text-sm font-medium text-center leading-tight\">Add Property</span>\n                      </Button>\n                      \n                      <Button \n                        variant=\"outline\" \n                        className=\"h-16 sm:h-18 md:h-20 flex flex-col items-center justify-center space-y-1 sm:space-y-2 hover:bg-blue-50 hover:border-blue-200 transition-all duration-200\"\n                        onClick={() => setActiveTab('browse')}\n                        data-testid=\"button-browse-properties\"\n                      >\n                        <Search className=\"h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6 text-blue-600\" />\n                        <span className=\"text-xs sm:text-sm font-medium text-center leading-tight\">Browse Properties</span>\n                      </Button>\n                      \n                      <Button \n                        variant=\"outline\" \n                        className=\"h-16 sm:h-18 md:h-20 flex flex-col items-center justify-center space-y-1 sm:space-y-2 hover:bg-green-50 hover:border-green-200 transition-all duration-200\"\n                        onClick={() => setActiveTab('favorites')}\n                        data-testid=\"button-view-favorites\"\n                      >\n                        <Heart className=\"h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6 text-green-600\" />\n                        <span className=\"text-xs sm:text-sm font-medium text-center leading-tight\">View Favorites</span>\n                      </Button>\n                      \n                      <Button \n                        variant=\"outline\" \n                        className=\"h-16 sm:h-18 md:h-20 flex flex-col items-center justify-center space-y-1 sm:space-y-2 hover:bg-purple-50 hover:border-purple-200 transition-all duration-200\"\n                        onClick={() => setActiveTab('profile')}\n                        data-testid=\"button-edit-profile\"\n                      >\n                        <User className=\"h-4 w-4 sm:h-5 sm:w-5 md:h-6 md:w-6 text-purple-600\" />\n                        <span className=\"text-xs sm:text-sm font-medium text-center leading-tight\">Edit Profile</span>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"browse\" className=\"space-y-4 sm:space-y-6\">\n              {/* Search and Filter */}\n              <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800\">\n                <CardHeader className=\"border-b border-slate-200 dark:border-gray-700 bg-gradient-to-r from-orange-50 to-white dark:from-gray-800 dark:to-gray-800\">\n                  <CardTitle className=\"text-lg sm:text-xl text-orange-800 dark:text-orange-200 font-bold\">Find Your Perfect Property</CardTitle>\n                  <CardDescription className=\"text-orange-600 dark:text-orange-300\">\n                    Search through our extensive property listings\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-4 sm:p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-orange-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search properties, locations, or keywords...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 border-orange-200 focus:border-orange-500 focus:ring-orange-500 h-12 text-base\"\n                        data-testid=\"input-search\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                      <Select \n                        value={mapFilters.type || 'all'} \n                        onValueChange={(value) => \n                          setMapFilters(prev => ({ ...prev, type: value === 'all' ? undefined : value }))\n                        }\n                      >\n                        <SelectTrigger className=\"border-orange-200 focus:border-orange-500 focus:ring-orange-500 h-11\" data-testid=\"select-type-filter\">\n                          <SelectValue placeholder=\"Property Type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Types</SelectItem>\n                          <SelectItem value=\"house\">House</SelectItem>\n                          <SelectItem value=\"apartment\">Apartment</SelectItem>\n                          <SelectItem value=\"villa\">Villa</SelectItem>\n                          <SelectItem value=\"land\">Land</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      \n                      <Select \n                        value={mapFilters.listingType || 'all'} \n                        onValueChange={(value) => \n                          setMapFilters(prev => ({ ...prev, listingType: value === 'all' ? undefined : value as 'sale' | 'rent' }))\n                        }\n                      >\n                        <SelectTrigger className=\"border-orange-200 focus:border-orange-500 focus:ring-orange-500 h-11\" data-testid=\"select-listing-filter\">\n                          <SelectValue placeholder=\"Listing Type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Listings</SelectItem>\n                          <SelectItem value=\"sale\">For Sale</SelectItem>\n                          <SelectItem value=\"rent\">For Rent</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Properties Grid */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\">\n                {propertiesLoading ? (\n                  Array.from({ length: 8 }).map((_, i) => (\n                    <Card key={i} className=\"animate-pulse shadow-lg\">\n                      <div className=\"aspect-[4/3] bg-gradient-to-br from-slate-200 to-slate-300 dark:from-gray-700 dark:to-gray-600 rounded-t-lg\"></div>\n                      <CardContent className=\"p-3 sm:p-4\">\n                        <div className=\"h-4 bg-slate-200 dark:bg-gray-700 rounded mb-2\"></div>\n                        <div className=\"h-3 bg-slate-200 dark:bg-gray-700 rounded mb-2 w-3/4\"></div>\n                        <div className=\"h-3 bg-slate-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                        <div className=\"flex justify-between items-center mt-3\">\n                          <div className=\"h-4 bg-slate-200 dark:bg-gray-700 rounded w-20\"></div>\n                          <div className=\"h-6 bg-slate-200 dark:bg-gray-700 rounded w-16\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : filteredProperties.length === 0 ? (\n                  <div className=\"col-span-full p-8 sm:p-12 text-center\">\n                    <div className=\"max-w-md mx-auto\">\n                      <div className=\"w-20 h-20 mx-auto mb-6 bg-orange-100 dark:bg-orange-900 rounded-full flex items-center justify-center\">\n                        <Home className=\"h-10 w-10 text-orange-600 dark:text-orange-400\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                        {searchTerm ? 'No Properties Found' : 'No Properties Available'}\n                      </h3>\n                      <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                        {searchTerm \n                          ? `No properties match your search for \"${searchTerm}\". Try adjusting your filters.`\n                          : 'There are no properties available at the moment. Check back later for new listings.'\n                        }\n                      </p>\n                      {searchTerm && (\n                        <Button \n                          variant=\"outline\" \n                          className=\"border-orange-200 text-orange-600 hover:bg-orange-50 transition-all duration-200\"\n                          onClick={() => setSearchTerm('')}\n                        >\n                          <Search className=\"h-4 w-4 mr-2\" />\n                          Clear Search\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  filteredProperties.map((property) => (\n                    <PropertyCard\n                      key={property.id}\n                      property={property}\n                      isFavorite={isPropertyFavorite(property.id)}\n                      onToggleFavorite={(isFav) => \n                        isFav ? handleRemoveFromFavorites(property.id) : handleAddToFavorites(property.id)\n                      }\n                      onInquiry={handlePropertyInquiry}\n                    />\n                  ))\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"map\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Property Map</CardTitle>\n                  <CardDescription>\n                    Explore properties on the interactive map\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[600px] w-full\">\n                    <Suspense fallback={\n                      <div className=\"h-full w-full flex items-center justify-center bg-muted rounded-lg\">\n                        <div className=\"text-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                          <p className=\"text-muted-foreground\">Loading map...</p>\n                        </div>\n                      </div>\n                    }>\n                      <PropertyMap \n                        properties={allProperties}\n                        filters={mapFilters}\n                        onFilterChange={handleMapFilterChange}\n                        onPropertyClick={handlePropertyInquiry}\n                        className=\"h-full w-full rounded-lg\"\n                      />\n                    </Suspense>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"add-property\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className={getLanguageClasses(selectedLanguage)} dir={getTextDirection(selectedLanguage)}>\n                    {editingProperty ? t.updateProperty : t.addNewProperty}\n                  </CardTitle>\n                  <CardDescription className={getLanguageClasses(selectedLanguage)} dir={getTextDirection(selectedLanguage)}>\n                    {editingProperty ? t.updatePropertyText : t.sharePropertyText}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...propertyForm}>\n                    <form \n                      onSubmit={propertyForm.handleSubmit(onSubmitProperty)} \n                      className=\"space-y-6\"\n                      dir={getTextDirection(selectedLanguage)}\n                    >\n                      {/* Language Selection Section */}\n                      {showLanguageSelection && (\n                        <div className=\"mb-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                          <div className=\"flex items-center gap-3 mb-3\">\n                            <Globe className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                            <h3 className=\"text-lg font-semibold text-blue-800 dark:text-blue-200\">{t.selectPropertyLanguage}</h3>\n                          </div>\n                          <p className=\"text-sm text-blue-700 dark:text-blue-300 mb-4\">\n                            {t.languageDescription}\n                          </p>\n                          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3\">\n                            {availableLanguages.map((lang) => (\n                              <Button\n                                key={lang}\n                                type=\"button\"\n                                variant={selectedLanguage === lang ? 'default' : 'outline'}\n                                className={`p-4 h-auto justify-start ${selectedLanguage === lang \n                                  ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600' \n                                  : 'border-blue-300 hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/30'\n                                } ${getTextDirection(lang) === 'rtl' ? 'text-right' : 'text-left'}`}\n                                onClick={() => {\n                                  setSelectedLanguage(lang);\n                                  setShowLanguageSelection(false);\n                                }}\n                                data-testid={`button-language-${lang}`}\n                              >\n                                <div className=\"flex flex-col items-start w-full\">\n                                  <span className=\"text-sm font-medium\">\n                                    {LANGUAGE_NAMES[lang]}\n                                  </span>\n                                  <span className=\"text-xs opacity-75\">\n                                    {lang.toUpperCase()}\n                                  </span>\n                                </div>\n                              </Button>\n                            ))}\n                          </div>\n                          {availableLanguages.length === 1 && (\n                            <p className=\"text-xs text-muted-foreground mt-3\">\n                              Only {LANGUAGE_NAMES[availableLanguages[0]]} is available for your account.\n                            </p>\n                          )}\n                        </div>\n                      )}\n\n                      {/* Form Fields - Show only after language selection */}\n                      {!showLanguageSelection && (\n                        <>\n                          {/* Language indicator and change option */}\n                          <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border\" dir={getTextDirection(selectedLanguage)}>\n                            <div className=\"flex items-center gap-2\">\n                              <Globe className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                              <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                {getTextDirection(selectedLanguage) === 'rtl' ? (\n                                  <>بلغة: {LANGUAGE_NAMES[selectedLanguage]}</>\n                                ) : (\n                                  <>{t.language}: {LANGUAGE_NAMES[selectedLanguage]}</>\n                                )}\n                              </span>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setShowLanguageSelection(true)}\n                              className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/30\"\n                              data-testid=\"button-change-language\"\n                            >\n                              {getTextDirection(selectedLanguage) === 'rtl' ? 'تغيير' : t.change}\n                            </Button>\n                          </div>\n\n                          <div \n                            className=\"grid grid-cols-1 md:grid-cols-2 gap-6\" \n                            dir={getTextDirection(selectedLanguage)}\n                          >\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.propertyTitle} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.titlePlaceholder} \n                                  {...field} \n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  data-testid=\"input-property-title\" \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.propertyType} *\n                              </FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger \n                                    data-testid=\"select-property-type\"\n                                    className={getLanguageClasses(selectedLanguage)}\n                                    dir={getTextDirection(selectedLanguage)}\n                                  >\n                                    <SelectValue placeholder={t.selectPropertyType} />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"house\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <Home className=\"h-4 w-4 text-orange-600\" />\n                                      {t.house}\n                                    </span>\n                                  </SelectItem>\n                                  <SelectItem value=\"apartment\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <Building className=\"h-4 w-4 text-orange-600\" />\n                                      {t.apartment}\n                                    </span>\n                                  </SelectItem>\n                                  <SelectItem value=\"villa\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <University className=\"h-4 w-4 text-orange-600\" />\n                                      {t.villa}\n                                    </span>\n                                  </SelectItem>\n                                  <SelectItem value=\"land\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <Mountain className=\"h-4 w-4 text-orange-600\" />\n                                      {t.land}\n                                    </span>\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"listingType\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.listingType} *\n                              </FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger \n                                    data-testid=\"select-listing-type\"\n                                    className={getLanguageClasses(selectedLanguage)}\n                                    dir={getTextDirection(selectedLanguage)}\n                                  >\n                                    <SelectValue placeholder={t.selectListingType} />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"sale\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <Tag className=\"h-4 w-4 text-green-600\" />\n                                      {t.sale}\n                                    </span>\n                                  </SelectItem>\n                                  <SelectItem value=\"rent\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <Key className=\"h-4 w-4 text-orange-600\" />\n                                      {t.rent}\n                                    </span>\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"price\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.price} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.pricePlaceholder} \n                                  type=\"number\" \n                                  {...field}\n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  onChange={(e) => field.onChange(e.target.value)}\n                                  data-testid=\"input-price\" \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"area\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.area} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.areaPlaceholder} \n                                  type=\"number\" \n                                  min=\"1\"\n                                  {...field}\n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  data-testid=\"input-area\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"bedrooms\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.bedrooms} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.bedroomsPlaceholder} \n                                  type=\"number\" \n                                  min=\"1\"\n                                  {...field}\n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  data-testid=\"input-bedrooms\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"bathrooms\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.bathrooms} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.bathroomsPlaceholder} \n                                  type=\"number\" \n                                  min=\"1\"\n                                  {...field}\n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  data-testid=\"input-bathrooms\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.address} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.addressPlaceholder} \n                                  {...field} \n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  data-testid=\"input-address\" \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"city\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.city} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.cityPlaceholder} \n                                  {...field} \n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  data-testid=\"input-city\" \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.country} *\n                              </FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder={t.countryPlaceholder} \n                                  {...field} \n                                  className={getLanguageClasses(selectedLanguage)}\n                                  dir={getTextDirection(selectedLanguage)}\n                                  data-testid=\"input-country\" \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"contactPhone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.contactPhone}\n                              </FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Phone className={`absolute ${getTextDirection(selectedLanguage) === 'rtl' ? 'right-3' : 'left-3'} top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400`} />\n                                  <Input \n                                    placeholder={t.contactPhonePlaceholder} \n                                    {...field} \n                                    className={`${getTextDirection(selectedLanguage) === 'rtl' ? 'pr-10' : 'pl-10'} ${getLanguageClasses(selectedLanguage)}`}\n                                    dir={getTextDirection(selectedLanguage)}\n                                    data-testid=\"input-contact-phone\" \n                                  />\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                              <p className={`text-xs text-muted-foreground ${getLanguageClasses(selectedLanguage)}`}>\n                                {t.contactPhoneNote}\n                              </p>\n                            </FormItem>\n                          )}\n                        />\n\n                        {/* Wave Selection */}\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"waveId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={`flex items-center gap-2 ${getLanguageClasses(selectedLanguage)}`}>\n                                <Activity className=\"h-4 w-4 text-blue-500\" />\n                                {t.waveBalance}\n                                {waveBalance && !(waveBalance as any).hasUnlimited && (\n                                  <span className={`text-xs px-2 py-1 rounded-full ${\n                                    (waveBalance as any).remainingWaves <= 0 ? 'bg-red-100 text-red-700' :\n                                    (waveBalance as any).remainingWaves <= 2 ? 'bg-yellow-100 text-yellow-700' :\n                                    'bg-green-100 text-green-700'\n                                  }`}>\n                                    {(waveBalance as any).remainingWaves} {t.remaining}\n                                  </span>\n                                )}\n                                {waveBalance?.hasUnlimited && (\n                                  <span className=\"text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700\">\n                                    {t.unlimited}\n                                  </span>\n                                )}\n                              </FormLabel>\n                              \n                              {waveBalance && !(waveBalance as any).hasUnlimited && (waveBalance as any).remainingWaves <= 0 && (\n                                <div className=\"bg-red-50 border border-red-200 p-3 rounded-lg mb-3\" dir={getTextDirection(selectedLanguage)}>\n                                  <div className=\"flex items-center gap-2 text-red-700 mb-1\">\n                                    <AlertTriangle className=\"h-4 w-4\" />\n                                    <span className={`font-medium ${getLanguageClasses(selectedLanguage)}`}>{t.noWavesRemaining}</span>\n                                  </div>\n                                  <p className={`text-sm text-red-600 ${getLanguageClasses(selectedLanguage)}`}>\n                                    {t.waveBalanceWarning.replace('{total}', (waveBalance as any).totalBalance)}\n                                  </p>\n                                </div>\n                              )}\n                              \n                              <Select \n                                onValueChange={(value) => {\n                                  // Validate wave assignment before allowing change\n                                  if (value !== \"no-wave\" && waveBalance && !(waveBalance as any).hasUnlimited && (waveBalance as any).remainingWaves <= 0) {\n                                    // Show modal when trying to assign wave without balance\n                                    setShowBalanceModal(true);\n                                    return;\n                                  }\n                                  field.onChange(value);\n                                }} \n                                defaultValue={field.value}\n                                disabled={waveBalance && !(waveBalance as any).hasUnlimited && (waveBalance as any).remainingWaves <= 0}\n                              >\n                                <FormControl>\n                                  <SelectTrigger \n                                    data-testid=\"select-wave\"\n                                    className={waveBalance && !(waveBalance as any).hasUnlimited && (waveBalance as any).remainingWaves <= 0 ? 'opacity-50 cursor-not-allowed' : ''}\n                                  >\n                                    <SelectValue placeholder={\n                                      waveBalance && !(waveBalance as any).hasUnlimited && (waveBalance as any).remainingWaves <= 0 \n                                        ? t.noWavesAvailable \n                                        : t.selectWavePlaceholder\n                                    } />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"no-wave\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <span className=\"text-muted-foreground\">{t.noWave}</span>\n                                    </span>\n                                  </SelectItem>\n                                  <SelectItem value=\"wave-default-12345\">\n                                    <span className=\"flex items-center gap-2\">\n                                      <span className=\"text-muted-foreground\">{t.premiumWave}</span>\n                                    </span>\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                              <p className={`text-xs text-muted-foreground ${getLanguageClasses(selectedLanguage)}`}>\n                                {t.waveDescription}\n                              </p>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Location Selection Map */}\n                      <div className=\"space-y-4\">\n                        <div dir={getTextDirection(selectedLanguage)}>\n                          <h3 className={`text-lg font-medium mb-2 ${getLanguageClasses(selectedLanguage)}`}>\n                            {t.selectLocationTitle}\n                          </h3>\n                          <p className={`text-sm text-muted-foreground mb-4 ${getLanguageClasses(selectedLanguage)}`}>\n                            {t.selectLocationDesc}\n                          </p>\n                          <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg border border-orange-200 dark:border-orange-800 mb-4\">\n                            <div className={`flex items-center ${getTextDirection(selectedLanguage) === 'rtl' ? 'space-x-reverse space-x-2' : 'space-x-2'}`}>\n                              <div className=\"h-2 w-2 bg-orange-500 rounded-full animate-pulse\"></div>\n                              <span className={`text-sm font-medium text-orange-700 dark:text-orange-300 ${getLanguageClasses(selectedLanguage)}`}>\n                                {t.smartAutoFill}\n                              </span>\n                            </div>\n                            <p className={`text-xs text-orange-600 dark:text-orange-400 mt-1 ${getLanguageClasses(selectedLanguage)}`}>\n                              {t.autoFillDesc}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"border rounded-lg overflow-hidden\">\n                          <LocationSelectionMap \n                            onLocationSelect={handleLocationSelect}\n                            selectedLocation={selectedLocation}\n                            className=\"h-[400px] w-full\"\n                          />\n                        </div>\n                        \n                        {selectedLocation && (\n                          <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800\">\n                            <div className={`flex items-center ${getTextDirection(selectedLanguage) === 'rtl' ? 'space-x-reverse space-x-2' : 'space-x-2'}`}>\n                              <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n                              <span className={`text-sm font-medium text-green-700 dark:text-green-300 ${getLanguageClasses(selectedLanguage)}`}>\n                                {t.locationSelected}\n                              </span>\n                            </div>\n                            <p className={`text-xs text-green-600 dark:text-green-400 mt-1 ${getLanguageClasses(selectedLanguage)}`}>\n                              {t.coordinates}: {selectedLocation.lat.toFixed(6)}, {selectedLocation.lng.toFixed(6)}\n                            </p>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Property Images Upload */}\n                      <div className=\"space-y-4\">\n                        <div dir={getTextDirection(selectedLanguage)}>\n                          <h3 className={`text-lg font-medium mb-2 ${getLanguageClasses(selectedLanguage)}`}>\n                            {t.propertyImagesTitle}\n                          </h3>\n                          <p className={`text-sm text-muted-foreground mb-4 ${getLanguageClasses(selectedLanguage)}`}>\n                            {t.propertyImagesDesc}\n                          </p>\n                        </div>\n                        \n                        <FormField\n                          control={propertyForm.control}\n                          name=\"images\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormControl>\n                                <ImageUpload\n                                  value={field.value || []}\n                                  onChange={field.onChange}\n                                  maxFiles={10}\n                                  maxSize={5}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Amenities and Features */}\n                      <div className=\"grid md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"amenities\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.amenities}\n                              </FormLabel>\n                              <div className=\"grid grid-cols-2 gap-2 mt-2\" dir={getTextDirection(selectedLanguage)}>\n                                {[\n                                  { key: 'swimmingPool', label: t.swimmingPool },\n                                  { key: 'garden', label: t.garden },\n                                  { key: 'parking', label: t.parking },\n                                  { key: 'securitySystem', label: t.securitySystem },\n                                  { key: 'elevator', label: t.elevator },\n                                  { key: 'gym', label: t.gym },\n                                  { key: 'balcony', label: t.balcony },\n                                  { key: 'terrace', label: t.terrace }\n                                ].map((amenity) => (\n                                  <label \n                                    key={amenity.key} \n                                    className={`flex items-center cursor-pointer ${getTextDirection(selectedLanguage) === 'rtl' ? 'space-x-reverse space-x-2' : 'space-x-2'}`}\n                                  >\n                                    <input\n                                      type=\"checkbox\"\n                                      checked={field.value?.includes(amenity.key) || false}\n                                      onChange={(e) => {\n                                        const current = field.value || [];\n                                        if (e.target.checked) {\n                                          field.onChange([...current, amenity.key]);\n                                        } else {\n                                          field.onChange(current.filter(item => item !== amenity.key));\n                                        }\n                                      }}\n                                      className=\"rounded border-gray-300\"\n                                    />\n                                    <span className={`text-sm ${getLanguageClasses(selectedLanguage)}`}>{amenity.label}</span>\n                                  </label>\n                                ))}\n                              </div>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={propertyForm.control}\n                          name=\"features\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                                {t.features}\n                              </FormLabel>\n                              <div className=\"grid grid-cols-2 gap-2 mt-2\" dir={getTextDirection(selectedLanguage)}>\n                                {[\n                                  { key: 'airConditioning', label: t.airConditioning },\n                                  { key: 'heating', label: t.heating },\n                                  { key: 'furnished', label: t.furnished },\n                                  { key: 'petFriendly', label: t.petFriendly },\n                                  { key: 'fireplace', label: t.fireplace },\n                                  { key: 'highCeilings', label: t.highCeilings },\n                                  { key: 'modernKitchen', label: t.modernKitchen },\n                                  { key: 'storageRoom', label: t.storageRoom }\n                                ].map((feature) => (\n                                  <label \n                                    key={feature.key} \n                                    className={`flex items-center cursor-pointer ${getTextDirection(selectedLanguage) === 'rtl' ? 'space-x-reverse space-x-2' : 'space-x-2'}`}\n                                  >\n                                    <input\n                                      type=\"checkbox\"\n                                      checked={field.value?.includes(feature.key) || false}\n                                      onChange={(e) => {\n                                        const current = field.value || [];\n                                        if (e.target.checked) {\n                                          field.onChange([...current, feature.key]);\n                                        } else {\n                                          field.onChange(current.filter(item => item !== feature.key));\n                                        }\n                                      }}\n                                      className=\"rounded border-gray-300\"\n                                    />\n                                    <span className={`text-sm ${getLanguageClasses(selectedLanguage)}`}>{feature.label}</span>\n                                  </label>\n                                ))}\n                              </div>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={propertyForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className={getLanguageClasses(selectedLanguage)}>\n                              {t.description} *\n                            </FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder={t.descriptionPlaceholder}\n                                className={`min-h-[100px] ${getLanguageClasses(selectedLanguage)}`}\n                                dir={getTextDirection(selectedLanguage)}\n                                {...field}\n                                data-testid=\"textarea-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Property Visibility Control */}\n                      <div className=\"space-y-4\">\n                        <div dir={getTextDirection(selectedLanguage)}>\n                          <h3 className={`text-lg font-medium mb-2 ${getLanguageClasses(selectedLanguage)}`}>\n                            {t.propertyVisibilityTitle}\n                          </h3>\n                          <p className={`text-sm text-muted-foreground mb-4 ${getLanguageClasses(selectedLanguage)}`}>\n                            {t.propertyVisibilityDesc}\n                          </p>\n                        </div>\n                        \n                        <FormField\n                          control={propertyForm.control}\n                          name=\"status\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <div className=\"flex items-center justify-between p-4 border rounded-lg bg-slate-50 dark:bg-gray-800\">\n                                <div className=\"flex-1\">\n                                  <FormLabel className={`text-base font-medium ${getLanguageClasses(selectedLanguage)}`}>\n                                    {field.value === 'active' ? t.visibleOnMap : t.hiddenFromMap}\n                                  </FormLabel>\n                                  <p className={`text-sm text-muted-foreground mt-1 ${getLanguageClasses(selectedLanguage)}`}>\n                                    {field.value === 'active' \n                                      ? t.visibleDesc\n                                      : t.hiddenDesc\n                                    }\n                                  </p>\n                                </div>\n                                <div className=\"flex items-center space-x-3 ml-4\">\n                                  <FormControl>\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => field.onChange(field.value === 'active' ? 'inactive' : 'active')}\n                                      className={`transition-all ${field.value === 'active' ? 'bg-green-100 text-green-700 border-green-300' : 'bg-gray-100 text-gray-700 border-gray-300'}`}\n                                      data-testid=\"button-toggle-property-visibility\"\n                                    >\n                                      {field.value === 'active' ? (\n                                        <>\n                                          <Eye className={`h-4 w-4 ${getTextDirection(selectedLanguage) === 'rtl' ? 'ml-2' : 'mr-2'}`} />\n                                          {t.visible}\n                                        </>\n                                      ) : (\n                                        <>\n                                          <EyeOff className={`h-4 w-4 ${getTextDirection(selectedLanguage) === 'rtl' ? 'ml-2' : 'mr-2'}`} />\n                                          {t.hidden}\n                                        </>\n                                      )}\n                                    </Button>\n                                  </FormControl>\n                                </div>\n                              </div>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                          <div className=\"flex justify-end space-x-4\">\n                            {editingProperty && (\n                              <Button \n                                type=\"button\" \n                                variant=\"outline\" \n                                onClick={handleCancelPropertyEdit}\n                                data-testid=\"button-cancel-edit\"\n                              >\n                                Cancel\n                              </Button>\n                            )}\n                            <Button \n                              type=\"button\" \n                              variant=\"outline\" \n                              onClick={() => propertyForm.reset()}\n                              data-testid=\"button-reset\"\n                            >\n                              Reset Form\n                            </Button>\n                            <Button \n                              type=\"submit\" \n                              disabled={createPropertyMutation.isPending || editPropertyMutation.isPending}\n                              data-testid=\"button-submit-property\"\n                            >\n                              {editingProperty ? \n                                (editPropertyMutation.isPending ? 'Updating Property...' : 'Update Property') : \n                                (createPropertyMutation.isPending ? 'Adding Property...' : 'Add Property')\n                              }\n                            </Button>\n                          </div>\n                        </>\n                      )}\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"my-properties\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>My Properties</CardTitle>\n                  <CardDescription>\n                    Manage the properties you've posted ({userProperties.length} total)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {userPropertiesLoading ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {Array.from({ length: 3 }).map((_, i) => (\n                        <Card key={i} className=\"animate-pulse\">\n                          <div className=\"aspect-video bg-gray-200 dark:bg-gray-700 rounded-t-lg\"></div>\n                          <CardContent className=\"p-4\">\n                            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                            <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n                            <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : userProperties.length === 0 ? (\n                    <div className=\"p-8 text-center text-gray-500\">\n                      <Building className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>You haven't posted any properties yet.</p>\n                      <Button \n                        variant=\"outline\" \n                        className=\"mt-4\"\n                        onClick={() => setActiveTab('add-property')}\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Your First Property\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {userProperties.map((property) => (\n                        <Card key={property.id} className=\"group relative\">\n                          <CardContent className=\"p-0\">\n                            <div className=\"aspect-video bg-gray-200 dark:bg-gray-700 rounded-t-lg relative overflow-hidden\">\n                              {property.images && property.images.length > 0 ? (\n                                <OptimizedImage \n                                  src={property.images[0].imageUrl || property.images[0]} \n                                  alt={property.title}\n                                  className=\"w-full h-full object-cover\"\n                                  aspectRatio=\"16/9\"\n                                  fallbackSrc=\"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                                  data-testid={`img-property-${property.id}`}\n                                />\n                              ) : (\n                                <div className=\"w-full h-full flex items-center justify-center\">\n                                  <Home className=\"h-12 w-12 text-gray-400\" />\n                                </div>\n                              )}\n                              <div className=\"absolute top-2 right-2 flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                <Button\n                                  size=\"sm\"\n                                  variant={property.status === 'active' ? 'default' : 'secondary'}\n                                  onClick={() => handleToggleVisibility(property.id, property.status || 'inactive')}\n                                  className={property.status === 'active' ? 'bg-green-600 hover:bg-green-700 text-white' : 'bg-gray-600 hover:bg-gray-700 text-white'}\n                                  data-testid={`button-toggle-visibility-${property.id}`}\n                                  title={property.status === 'active' ? 'Hide from map' : 'Show on map'}\n                                >\n                                  {property.status === 'active' ? <Eye className=\"h-3 w-3\" /> : <EyeOff className=\"h-3 w-3\" />}\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"secondary\"\n                                  onClick={() => handleEditProperty(property)}\n                                  className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                                  data-testid={`button-edit-${property.id}`}\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleDeleteProperty(property.id, property.title)}\n                                  data-testid={`button-delete-${property.id}`}\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                              <div className=\"absolute top-2 left-2\">\n                                <Badge variant={property.listingType === 'sale' ? 'default' : 'secondary'}>\n                                  {property.listingType === 'sale' ? 'For Sale' : 'For Rent'}\n                                </Badge>\n                              </div>\n                              <div className=\"absolute bottom-2 left-2 flex space-x-1\">\n                                <Badge \n                                  variant={property.status === 'active' ? 'default' : 'secondary'} \n                                  className={`text-xs ${property.status === 'active' ? 'bg-green-100 text-green-700 border-green-300' : 'bg-gray-100 text-gray-700 border-gray-300'}`}\n                                >\n                                  {property.status === 'active' ? (\n                                    <><Eye className=\"h-3 w-3 mr-1\" />Visible</>\n                                  ) : (\n                                    <><EyeOff className=\"h-3 w-3 mr-1\" />Hidden</>\n                                  )}\n                                </Badge>\n                              </div>\n                            </div>\n                            <div className=\"p-4\">\n                              <div className=\"flex items-start justify-between mb-2\">\n                                <h3 className=\"font-semibold text-lg line-clamp-1\">{property.title}</h3>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {property.type}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                                {property.description}\n                              </p>\n                              <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-3\">\n                                <span className=\"flex items-center\">\n                                  <MapPin className=\"h-3 w-3 mr-1\" />\n                                  {property.city}, {property.country}\n                                </span>\n                                <span className=\"flex items-center\">\n                                  <Eye className=\"h-3 w-3 mr-1\" />\n                                  {property.views || 0} views\n                                </span>\n                              </div>\n                              <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n                                {property.bedrooms && (\n                                  <span className=\"flex items-center\">\n                                    <Bed className=\"h-3 w-3 mr-1\" />\n                                    {property.bedrooms}\n                                  </span>\n                                )}\n                                {property.bathrooms && (\n                                  <span className=\"flex items-center\">\n                                    <Bath className=\"h-3 w-3 mr-1\" />\n                                    {property.bathrooms}\n                                  </span>\n                                )}\n                                {property.area && (\n                                  <span className=\"flex items-center\">\n                                    <Maximize className=\"h-3 w-3 mr-1\" />\n                                    {property.area} ft²\n                                  </span>\n                                )}\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"text-left\">\n                                  <p className=\"text-lg font-bold text-green-600\">\n                                    ${parseFloat(property.price).toLocaleString()}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">\n                                    Posted {new Date(property.createdAt || '').toLocaleDateString()}\n                                  </p>\n                                </div>\n                                <Button \n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => navigate(`/property/${property.slug || property.id}`)}\n                                  data-testid={`button-view-${property.id}`}\n                                >\n                                  <Eye className=\"h-3 w-3 mr-1\" />\n                                  View\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"favorites\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Your Favorite Properties</CardTitle>\n                  <CardDescription>\n                    Properties you've saved for later\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {favorites.length === 0 ? (\n                    <div className=\"p-8 text-center text-gray-500\">\n                      <Heart className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>You haven't saved any properties yet.</p>\n                      <Button \n                        variant=\"outline\" \n                        className=\"mt-4\"\n                        onClick={() => setActiveTab('browse')}\n                      >\n                        Browse Properties\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {favorites.map((property) => (\n                        <PropertyCard\n                          key={property.id}\n                          property={property}\n                          isFavorite={true}\n                          onToggleFavorite={() => handleRemoveFromFavorites(property.id)}\n                          onInquiry={handlePropertyInquiry}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"profile\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Profile Settings</CardTitle>\n                  <CardDescription>\n                    Manage your account information\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {/* Profile Picture and Basic Info */}\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"h-20 w-20\">\n                        <AvatarImage src={user?.avatar || ''} alt=\"Profile photo\" />\n                        <AvatarFallback className=\"text-lg\">\n                          {user?.firstName?.[0]}{user?.lastName?.[0] || user?.username[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold\">\n                          {user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.username}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n                        <Badge variant=\"secondary\" className=\"mt-1\">Customer</Badge>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        {!isEditingProfile ? (\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => setIsEditingProfile(true)}\n                            data-testid=\"button-edit-profile\"\n                          >\n                            <Settings className=\"h-4 w-4 mr-2\" />\n                            Edit Profile\n                          </Button>\n                        ) : (\n                          <>\n                            <Button \n                              variant=\"outline\" \n                              onClick={handleCancelEdit}\n                              data-testid=\"button-cancel-edit\"\n                            >\n                              Cancel\n                            </Button>\n                            <Button \n                              form=\"profile-form\"\n                              type=\"submit\" \n                              disabled={updateProfileMutation.isPending}\n                              data-testid=\"button-save-profile\"\n                            >\n                              {updateProfileMutation.isPending ? 'Saving...' : 'Save Changes'}\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Account Expiration Notice */}\n                    {(() => {\n                      const daysUntilExpiration = calculateDaysUntilExpiration(user?.expiresAt);\n                      const { status, color, bgColor, icon, title, description } = getExpirationStatus(daysUntilExpiration);\n                      \n                      return (\n                        <div className={`rounded-lg border p-4 ${bgColor} border-opacity-50`}>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"text-2xl\">{icon}</div>\n                              <div>\n                                <h4 className={`font-semibold ${color}`}>{title}</h4>\n                                <p className=\"text-sm text-gray-600\">{description}</p>\n                              </div>\n                            </div>\n                            <Badge \n                              className={`${color} ${bgColor} border-0 font-medium`}\n                              data-testid=\"badge-user-expiration\"\n                            >\n                              {status}\n                            </Badge>\n                          </div>\n                        </div>\n                      );\n                    })()}\n\n                    {/* Profile Form */}\n                    {isEditingProfile ? (\n                      <Form {...profileForm}>\n                        <form \n                          id=\"profile-form\"\n                          onSubmit={profileForm.handleSubmit(onSubmitProfile)} \n                          className=\"space-y-6\"\n                        >\n                          {/* Profile Photo Upload */}\n                          <FormField\n                            control={profileForm.control}\n                            name=\"avatar\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <ProfilePhotoUpload\n                                    value={field.value || ''}\n                                    onChange={field.onChange}\n                                    currentUser={user || undefined}\n                                    maxSize={2}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            {/* Editable Fields */}\n                            <FormField\n                              control={profileForm.control}\n                              name=\"firstName\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>First Name *</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      placeholder=\"Enter your first name\" \n                                      {...field} \n                                      data-testid=\"input-first-name\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={profileForm.control}\n                              name=\"lastName\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Last Name *</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      placeholder=\"Enter your last name\" \n                                      {...field} \n                                      data-testid=\"input-last-name\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={profileForm.control}\n                              name=\"phone\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Phone Number</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      placeholder=\"Enter your phone number\" \n                                      {...field} \n                                      data-testid=\"input-phone\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          {/* Read-only Fields */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 pt-6 border-t\">\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Username</label>\n                              <Input value={user?.username || ''} disabled />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Email</label>\n                              <Input value={user?.email || ''} disabled />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Member Since</label>\n                              <Input value={user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : ''} disabled />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label className=\"text-sm font-medium\">Account Type</label>\n                              <Input value=\"Customer\" disabled />\n                            </div>\n                          </div>\n                        </form>\n                      </Form>\n                    ) : (\n                      /* Read-only View */\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">First Name</label>\n                          <Input value={user?.firstName || 'Not provided'} disabled />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Last Name</label>\n                          <Input value={user?.lastName || 'Not provided'} disabled />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Phone</label>\n                          <Input value={user?.phone || 'Not provided'} disabled />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Username</label>\n                          <Input value={user?.username || ''} disabled />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Email</label>\n                          <Input value={user?.email || ''} disabled />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Member Since</label>\n                          <Input value={user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : ''} disabled />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Loading Modal for Property Creation */}\n      <Dialog open={createPropertyMutation.isPending || editPropertyMutation.isPending} onOpenChange={() => {}}>\n        <DialogContent className=\"sm:max-w-md\">\n          <div className=\"flex flex-col items-center justify-center p-6 text-center\">\n            <div className=\"mb-4\">\n              <div className=\"animate-spin h-12 w-12 border-4 border-orange-600 border-t-transparent rounded-full mx-auto\"></div>\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n              {editingProperty ? 'Updating Property...' : 'Adding Property...'}\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n              {editingProperty \n                ? 'Please wait while we update your property details.'\n                : 'Please wait while we add your property to our platform.'\n              }\n            </p>\n            <div className=\"flex items-center justify-center space-x-2 text-xs text-gray-500\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-orange-600 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                <div className=\"w-2 h-2 bg-orange-600 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n                <div className=\"w-2 h-2 bg-orange-600 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n              </div>\n              <span>Processing your request</span>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Insufficient Balance Modal */}\n      <Dialog open={showBalanceModal} onOpenChange={setShowBalanceModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Balance Not Available\n            </DialogTitle>\n            <DialogDescription>\n              You don't have balance for this premium wave!\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 p-4 rounded-lg\">\n              <p className=\"text-sm text-red-700 dark:text-red-300\">\n                You have used all your wave assignments. To assign properties to premium waves, you must buy balance.\n              </p>\n            </div>\n            {!waveBalanceLoading && waveBalance && (\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <div className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\n                    {(waveBalance as any).totalBalance || 0}\n                  </div>\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">Total Balance</div>\n                </div>\n                <div className=\"p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                  <div className=\"text-lg font-bold text-orange-600 dark:text-orange-400\">\n                    {Array.isArray((waveBalance as any).currentUsage) ? (waveBalance as any).currentUsage.reduce((sum: number, wave: any) => sum + (wave.used || 0), 0) : 0}\n                  </div>\n                  <div className=\"text-xs text-orange-600 dark:text-orange-400\">In Use</div>\n                </div>\n                <div className=\"p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                  <div className=\"text-lg font-bold text-red-600 dark:text-red-400\">\n                    {(waveBalance as any).remainingWaves || 0}\n                  </div>\n                  <div className=\"text-xs text-red-600 dark:text-red-400\">Remaining</div>\n                </div>\n              </div>\n            )}\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setShowBalanceModal(false)}>\n                Close\n              </Button>\n              <Button \n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                onClick={() => {\n                  setShowBalanceModal(false);\n                  toast({\n                    title: \"Contact Support\",\n                    description: \"Please contact support to purchase additional balance.\",\n                    variant: \"default\",\n                  });\n                }}\n              >\n                Buy Balance\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </ProtectedRoute>\n  );\n}\n\n// Property Card Component for Customers\nfunction PropertyCard({ \n  property, \n  isFavorite,\n  onToggleFavorite,\n  onInquiry\n}: { \n  property: PropertyWithDetails;\n  isFavorite: boolean;\n  onToggleFavorite: (isFavorite: boolean) => void;\n  onInquiry: (property: PropertyWithDetails) => void;\n}) {\n  return (\n    <Card className=\"group hover:shadow-lg transition-shadow\">\n      <CardContent className=\"p-0\">\n        <div className=\"aspect-video bg-gray-200 dark:bg-gray-700 rounded-t-lg relative overflow-hidden\">\n          {property.images && property.images.length > 0 ? (\n            <OptimizedImage \n              src={property.images[0].imageUrl || property.images[0]} \n              alt={property.title}\n              className=\"w-full h-full object-cover\"\n              aspectRatio=\"16/9\"\n              fallbackSrc=\"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n              data-testid={`img-property-card-${property.id}`}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <Home className=\"h-12 w-12 text-gray-400\" />\n            </div>\n          )}\n          <div className=\"absolute top-2 right-2 flex space-x-1\">\n            <Button\n              size=\"sm\"\n              variant={isFavorite ? \"default\" : \"secondary\"}\n              onClick={() => onToggleFavorite(isFavorite)}\n              className={`transition-all ${isFavorite ? 'text-white' : ''}`}\n              data-testid={`button-favorite-${property.id}`}\n            >\n              <Heart className={`h-3 w-3 ${isFavorite ? 'fill-current' : ''}`} />\n            </Button>\n          </div>\n          <div className=\"absolute top-2 left-2\">\n            <Badge variant={property.listingType === 'sale' ? 'default' : 'secondary'}>\n              {property.listingType === 'sale' ? 'For Sale' : 'For Rent'}\n            </Badge>\n          </div>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <h3 className=\"font-semibold text-lg line-clamp-1\">{property.title}</h3>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {property.type}\n            </Badge>\n          </div>\n          <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n            {property.description}\n          </p>\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-3\">\n            <span className=\"flex items-center\">\n              <MapPin className=\"h-3 w-3 mr-1\" />\n              {property.city}, {property.country}\n            </span>\n            <span className=\"flex items-center\">\n              <Eye className=\"h-3 w-3 mr-1\" />\n              {property.views || 0} views\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n            {property.bedrooms && (\n              <span className=\"flex items-center\">\n                <Bed className=\"h-3 w-3 mr-1\" />\n                {property.bedrooms}\n              </span>\n            )}\n            {property.bathrooms && (\n              <span className=\"flex items-center\">\n                <Bath className=\"h-3 w-3 mr-1\" />\n                {property.bathrooms}\n              </span>\n            )}\n            {property.area && (\n              <span className=\"flex items-center\">\n                <Maximize className=\"h-3 w-3 mr-1\" />\n                {property.area} ft²\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-left\">\n              <p className=\"text-lg font-bold text-green-600\">\n                ${parseFloat(property.price).toLocaleString()}\n              </p>\n              {property.agent && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Agent: {property.agent.firstName} {property.agent.lastName}\n                </p>\n              )}\n            </div>\n            <Button \n              size=\"sm\"\n              onClick={() => onInquiry(property)}\n              data-testid={`button-inquire-${property.id}`}\n            >\n              <MessageSquare className=\"h-3 w-3 mr-1\" />\n              Inquire\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":159134},"client/src/types/index.ts":{"content":"export interface Property {\n  id: string;\n  title: string;\n  description?: string;\n  type: string;\n  listingType: \"sale\" | \"rent\";\n  price: string;\n  currency: string;\n  bedrooms?: number;\n  bathrooms?: number;\n  area?: number;\n  address: string;\n  city: string;\n  country: string;\n  latitude?: string;\n  longitude?: string;\n  images: string[];\n  amenities: string[];\n  features: string[];\n  status: string;\n  language: string;\n  agentId?: string;\n  views: number;\n  isFeatured: boolean;\n  slug?: string;\n  createdAt: string;\n  updatedAt: string;\n  agent?: User;\n}\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  avatar?: string;\n  isVerified: boolean;\n  createdAt: string;\n}\n\nexport interface Inquiry {\n  id: string;\n  propertyId: string;\n  userId?: string;\n  name: string;\n  email: string;\n  phone?: string;\n  message: string;\n  status: string;\n  createdAt: string;\n}\n\nexport interface PropertyFilters {\n  type?: string;\n  listingType?: \"sale\" | \"rent\";\n  minPrice?: number;\n  maxPrice?: number;\n  bedrooms?: number;\n  bathrooms?: number;\n  city?: string;\n  country?: string;\n  language?: \"en\" | \"ar\" | \"kur\";\n  features?: string[];\n  search?: string;\n  sortBy?: \"price\" | \"date\" | \"views\";\n  sortOrder?: \"asc\" | \"desc\";\n  limit?: number;\n  offset?: number;\n}\n\nexport interface AISearchResponse {\n  query: string;\n  filters: Record<string, any>;\n  results: Property[];\n  count: number;\n}\n","size_bytes":1497},"server/show-all-images.ts":{"content":"import { db, initializeDb } from \"./db\";\nimport { propertyImages, properties, users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\ninterface ImageInfo {\n  id: number;\n  propertyId: string;\n  propertyTitle: string;\n  imageUrl: string;\n  sortOrder: number;\n  altText: string | null;\n  fileExists: boolean;\n  filePath: string;\n  fileSize?: string;\n}\n\nasync function showAllImages() {\n  try {\n    console.log(\"🔧 Initializing MySQL VPS connection...\");\n    await initializeDb();\n    \n    console.log(\"📊 Fetching all images from database...\\n\");\n    \n    // Get all property images with property details\n    const images = await db()\n      .select({\n        id: propertyImages.id,\n        propertyId: propertyImages.propertyId,\n        imageUrl: propertyImages.imageUrl,\n        sortOrder: propertyImages.sortOrder,\n        altText: propertyImages.altText,\n        propertyTitle: properties.title,\n      })\n      .from(propertyImages)\n      .leftJoin(properties, eq(propertyImages.propertyId, properties.id))\n      .orderBy(propertyImages.propertyId, propertyImages.sortOrder);\n    \n    if (images.length === 0) {\n      console.log(\"⚠️ No images found in database\");\n      return;\n    }\n    \n    console.log(`✅ Found ${images.length} images in database\\n`);\n    console.log(\"=\"  .repeat(100));\n    \n    // Determine the uploads directory path\n    const uploadsPath = path.join(__dirname, \"../server/uploads\");\n    \n    const imageDetails: ImageInfo[] = [];\n    \n    // Check each image file\n    for (const img of images) {\n      let filePath = \"\";\n      let fileExists = false;\n      let fileSize = \"\";\n      \n      // Parse image URL to get file path\n      const imageUrl = img.imageUrl || \"\";\n      \n      if (imageUrl.startsWith(\"http://\") || imageUrl.startsWith(\"https://\")) {\n        // External URL\n        filePath = imageUrl;\n        fileExists = true; // Assume external URLs exist\n      } else {\n        // Local file - check if it exists\n        const localPath = imageUrl.startsWith(\"/\") ? imageUrl.substring(1) : imageUrl;\n        filePath = path.join(__dirname, \"..\", localPath);\n        \n        try {\n          const stats = fs.statSync(filePath);\n          fileExists = true;\n          const sizeInKB = (stats.size / 1024).toFixed(2);\n          fileSize = `${sizeInKB} KB`;\n        } catch (error) {\n          fileExists = false;\n        }\n      }\n      \n      imageDetails.push({\n        id: img.id,\n        propertyId: img.propertyId,\n        propertyTitle: img.propertyTitle || \"Unknown Property\",\n        imageUrl: img.imageUrl,\n        sortOrder: img.sortOrder || 0,\n        altText: img.altText,\n        fileExists,\n        filePath,\n        fileSize,\n      });\n    }\n    \n    // Group images by property\n    const imagesByProperty = imageDetails.reduce((acc, img) => {\n      if (!acc[img.propertyId]) {\n        acc[img.propertyId] = [];\n      }\n      acc[img.propertyId].push(img);\n      return acc;\n    }, {} as Record<string, ImageInfo[]>);\n    \n    // Display images grouped by property\n    let propertyCount = 0;\n    let existingCount = 0;\n    let missingCount = 0;\n    \n    for (const [propertyId, propertyImages] of Object.entries(imagesByProperty)) {\n      propertyCount++;\n      const firstImage = propertyImages[0];\n      \n      console.log(`\\n📦 Property ${propertyCount}: ${firstImage.propertyTitle}`);\n      console.log(`   Property ID: ${propertyId}`);\n      console.log(`   Total Images: ${propertyImages.length}`);\n      console.log(`   ${\"-\".repeat(90)}`);\n      \n      propertyImages.forEach((img, index) => {\n        const status = img.fileExists ? \"✅\" : \"❌\";\n        const sizeInfo = img.fileSize ? ` (${img.fileSize})` : \"\";\n        \n        if (img.fileExists) {\n          existingCount++;\n        } else {\n          missingCount++;\n        }\n        \n        console.log(`   ${status} Image ${index + 1}:`);\n        console.log(`      ID: ${img.id}`);\n        console.log(`      URL: ${img.imageUrl}`);\n        console.log(`      Sort Order: ${img.sortOrder}`);\n        console.log(`      Alt Text: ${img.altText || \"N/A\"}`);\n        console.log(`      File Path: ${img.filePath}${sizeInfo}`);\n        console.log(`      Status: ${img.fileExists ? \"File Exists\" : \"File Missing\"}`);\n        console.log(\"\");\n      });\n    }\n    \n    // Summary\n    console.log(\"=\" .repeat(100));\n    console.log(\"\\n📈 Summary:\");\n    console.log(`   Total Properties with Images: ${propertyCount}`);\n    console.log(`   Total Images in Database: ${images.length}`);\n    console.log(`   ✅ Existing Files: ${existingCount}`);\n    console.log(`   ❌ Missing Files: ${missingCount}`);\n    \n    if (missingCount > 0) {\n      console.log(`\\n⚠️ Warning: ${missingCount} image(s) are in the database but files are missing!`);\n    } else {\n      console.log(\"\\n🎉 All images in database have corresponding files!\");\n    }\n    \n  } catch (error: any) {\n    console.error(\"\\n❌ Error showing images:\", error.message);\n    throw error;\n  }\n}\n\n// Run the script\nshowAllImages()\n  .then(() => {\n    console.log(\"\\n✅ Script completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"\\n❌ Script failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":5376},"server/middleware/performance.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport type { User } from \"@shared/schema\";\nimport { createHash } from 'node:crypto';\n\n// Performance metrics storage (in-memory for development)\ninterface PerformanceMetric {\n  endpoint: string;\n  method: string;\n  responseTime: number;\n  timestamp: Date;\n  statusCode: number;\n  userId?: string;\n  userAgent?: string;\n  ip: string;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private readonly MAX_METRICS = 1000; // Keep last 1000 metrics\n  \n  addMetric(metric: PerformanceMetric) {\n    this.metrics.push(metric);\n    \n    // Keep only the latest metrics to prevent memory issues\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics = this.metrics.slice(-this.MAX_METRICS);\n    }\n  }\n  \n  getMetrics(hours = 1): PerformanceMetric[] {\n    const cutoff = new Date(Date.now() - (hours * 60 * 60 * 1000));\n    return this.metrics.filter(metric => metric.timestamp >= cutoff);\n  }\n  \n  getAverageResponseTime(endpoint?: string, hours = 1): number {\n    const metrics = this.getMetrics(hours);\n    const filtered = endpoint \n      ? metrics.filter(m => m.endpoint === endpoint)\n      : metrics;\n    \n    if (filtered.length === 0) return 0;\n    \n    const total = filtered.reduce((sum, metric) => sum + metric.responseTime, 0);\n    return Math.round(total / filtered.length);\n  }\n  \n  getSlowRequests(thresholdMs = 1000, hours = 1): PerformanceMetric[] {\n    return this.getMetrics(hours)\n      .filter(metric => metric.responseTime > thresholdMs)\n      .sort((a, b) => b.responseTime - a.responseTime);\n  }\n  \n  getEndpointStats(hours = 1): Record<string, {\n    count: number;\n    avgResponseTime: number;\n    slowRequests: number;\n  }> {\n    const metrics = this.getMetrics(hours);\n    const stats: Record<string, {\n      count: number;\n      totalTime: number;\n      slowRequests: number;\n    }> = {};\n    \n    metrics.forEach(metric => {\n      const key = `${metric.method} ${metric.endpoint}`;\n      if (!stats[key]) {\n        stats[key] = { count: 0, totalTime: 0, slowRequests: 0 };\n      }\n      \n      stats[key].count++;\n      stats[key].totalTime += metric.responseTime;\n      if (metric.responseTime > 1000) {\n        stats[key].slowRequests++;\n      }\n    });\n    \n    // Convert to final format\n    return Object.entries(stats).reduce((result, [key, data]) => {\n      result[key] = {\n        count: data.count,\n        avgResponseTime: Math.round(data.totalTime / data.count),\n        slowRequests: data.slowRequests\n      };\n      return result;\n    }, {} as Record<string, { count: number; avgResponseTime: number; slowRequests: number; }>);\n  }\n}\n\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Enhanced performance logging middleware\nexport function performanceLogger(req: Request, res: Response, next: NextFunction) {\n  const start = Date.now();\n  const path = req.path;\n  \n  // Skip non-API routes for performance tracking\n  if (!path.startsWith(\"/api\")) {\n    return next();\n  }\n  \n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    const user = (req as any).user as User | undefined;\n    \n    // Store detailed performance metrics\n    performanceMonitor.addMetric({\n      endpoint: path,\n      method: req.method,\n      responseTime: duration,\n      timestamp: new Date(),\n      statusCode: res.statusCode,\n      userId: user?.id,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip || req.connection.remoteAddress || 'unknown'\n    });\n    \n    // Create log line\n    let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n    if (capturedJsonResponse) {\n      logLine += ` : ${JSON.stringify(capturedJsonResponse)}`;\n    }\n\n    if (logLine.length > 80) {\n      logLine = logLine.slice(0, 79) + \"…\";\n    }\n\n    // Color code based on response time\n    if (duration > 2000) {\n      console.log(`🔴 SLOW: ${logLine}`);\n    } else if (duration > 1000) {\n      console.log(`🟡 WARN: ${logLine}`);\n    } else {\n      console.log(logLine);\n    }\n    \n    // Log warning for slow requests\n    if (duration > 2000) {\n      console.warn(`⚠️ Slow API request detected: ${req.method} ${path} took ${duration}ms`);\n    }\n  });\n\n  next();\n}\n\n// Cache control middleware for different types of content\nexport function cacheControl(options: {\n  maxAge?: number;\n  sMaxAge?: number;\n  noCache?: boolean;\n  noStore?: boolean;\n  mustRevalidate?: boolean;\n  immutable?: boolean;\n}) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const cacheDirectives: string[] = [];\n    \n    if (options.noCache) {\n      cacheDirectives.push('no-cache');\n    }\n    \n    if (options.noStore) {\n      cacheDirectives.push('no-store');\n    }\n    \n    if (options.mustRevalidate) {\n      cacheDirectives.push('must-revalidate');\n    }\n    \n    if (options.maxAge !== undefined) {\n      cacheDirectives.push(`max-age=${options.maxAge}`);\n    }\n    \n    if (options.sMaxAge !== undefined) {\n      cacheDirectives.push(`s-maxage=${options.sMaxAge}`);\n    }\n    \n    if (options.immutable) {\n      cacheDirectives.push('immutable');\n    }\n    \n    if (cacheDirectives.length > 0) {\n      res.set('Cache-Control', cacheDirectives.join(', '));\n    }\n    \n    next();\n  };\n}\n\n// ETag generation for cacheable content with stable hashing\nexport function generateETag(data: any): string {\n  try {\n    // Stable JSON serialization with sorted keys\n    const stableStringify = (obj: any): string => {\n      if (obj === null || typeof obj !== 'object') {\n        if (obj instanceof Date) {\n          return obj.toISOString();\n        }\n        if (typeof obj === 'bigint') {\n          return obj.toString();\n        }\n        return String(obj);\n      }\n      \n      if (Array.isArray(obj)) {\n        return '[' + obj.map(stableStringify).join(',') + ']';\n      }\n      \n      // Sort object keys for consistency\n      const sortedKeys = Object.keys(obj).sort();\n      const pairs = sortedKeys.map(key => \n        '\"' + key + '\":' + stableStringify(obj[key])\n      );\n      return '{' + pairs.join(',') + '}';\n    };\n    \n    const stableString = stableStringify(data);\n    return createHash('md5')\n      .update(stableString)\n      .digest('hex');\n  } catch (error) {\n    console.warn('ETag generation failed:', error);\n    // Fallback to a deterministic ETag based on error and data type\n    const fallbackData = `etag-error-fallback-${typeof data}-${String(data).slice(0, 100)}`;\n    return createHash('md5')\n      .update(fallbackData)\n      .digest('hex');\n  }\n}\n\n// Conditional request handling\nexport function handleConditionalRequest(req: Request, res: Response, data: any, lastModified?: Date): boolean {\n  const etag = generateETag(data);\n  \n  // Set ETag header\n  res.set('ETag', `\"${etag}\"`);\n  \n  // Set Last-Modified if provided\n  if (lastModified) {\n    res.set('Last-Modified', lastModified.toUTCString());\n  }\n  \n  // Check If-None-Match (ETag)\n  const ifNoneMatch = req.get('If-None-Match');\n  if (ifNoneMatch === `\"${etag}\"`) {\n    res.status(304).end();\n    return true;\n  }\n  \n  // Check If-Modified-Since\n  if (lastModified) {\n    const ifModifiedSince = req.get('If-Modified-Since');\n    if (ifModifiedSince) {\n      const ifModifiedSinceDate = new Date(ifModifiedSince);\n      if (lastModified <= ifModifiedSinceDate) {\n        res.status(304).end();\n        return true;\n      }\n    }\n  }\n  \n  return false;\n}\n\n// Request size monitoring\nexport function requestSizeMonitor(maxSizeMB = 10) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const contentLength = req.get('Content-Length');\n    if (contentLength) {\n      const sizeMB = parseInt(contentLength) / (1024 * 1024);\n      if (sizeMB > maxSizeMB) {\n        console.warn(`⚠️ Large request detected: ${req.method} ${req.path} - ${sizeMB.toFixed(2)}MB`);\n      }\n    }\n    next();\n  };\n}\n\n// Database query performance tracking\nexport function trackQueryPerformance<T>(\n  queryName: string,\n  queryFn: () => Promise<T>\n): Promise<T> {\n  return new Promise(async (resolve, reject) => {\n    const start = Date.now();\n    \n    try {\n      const result = await queryFn();\n      const duration = Date.now() - start;\n      \n      if (duration > 500) {\n        console.warn(`🐌 Slow database query: ${queryName} took ${duration}ms`);\n      } else if (duration > 100) {\n        console.log(`📊 Query: ${queryName} completed in ${duration}ms`);\n      }\n      \n      resolve(result);\n    } catch (error) {\n      const duration = Date.now() - start;\n      console.error(`❌ Query failed: ${queryName} after ${duration}ms:`, error);\n      reject(error);\n    }\n  });\n}","size_bytes":8896},"client/src/components/profile-photo-upload.tsx":{"content":"import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { Upload, X, Camera } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProfilePhotoUploadProps {\n  value: string;\n  onChange: (imageUrl: string) => void;\n  currentUser?: {\n    firstName?: string | null;\n    lastName?: string | null;\n    username: string;\n  };\n  maxSize?: number; // in MB\n  className?: string;\n}\n\nexport default function ProfilePhotoUpload({ \n  value = '', \n  onChange, \n  currentUser,\n  maxSize = 2,\n  className = '' \n}: ProfilePhotoUploadProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const { toast } = useToast();\n\n  const convertToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  };\n\n  const validateFile = (file: File): boolean => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please upload only image files (JPG, PNG, GIF, etc.)',\n        variant: 'destructive',\n      });\n      return false;\n    }\n\n    if (file.size > maxSize * 1024 * 1024) {\n      toast({\n        title: 'File too large',\n        description: `Please upload images smaller than ${maxSize}MB`,\n        variant: 'destructive',\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleFileUpload = useCallback(async (files: FileList) => {\n    if (files.length === 0) return;\n\n    const file = files[0]; // Only take the first file for profile photo\n    if (!validateFile(file)) return;\n\n    setUploading(true);\n\n    try {\n      const base64 = await convertToBase64(file);\n      onChange(base64);\n      toast({\n        title: 'Profile photo uploaded',\n        description: 'Your profile photo has been updated successfully',\n      });\n    } catch (error) {\n      toast({\n        title: 'Upload failed',\n        description: 'Failed to process the image. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setUploading(false);\n    }\n  }, [onChange, maxSize, toast]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileUpload(files);\n    }\n  }, [handleFileUpload]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileUpload(files);\n    }\n    e.target.value = ''; // Reset input\n  }, [handleFileUpload]);\n\n  const removePhoto = useCallback(() => {\n    onChange('');\n    toast({\n      title: 'Profile photo removed',\n      description: 'Your profile photo has been removed',\n    });\n  }, [onChange, toast]);\n\n  const getInitials = () => {\n    if (currentUser?.firstName && currentUser?.lastName) {\n      return `${currentUser.firstName[0]}${currentUser.lastName[0]}`;\n    }\n    return currentUser?.username?.[0] || 'U';\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Current Photo Display */}\n      <div className=\"flex items-center space-x-4\">\n        <Avatar className=\"h-20 w-20\">\n          <AvatarImage src={value} />\n          <AvatarFallback className=\"text-lg\">\n            {getInitials()}\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex flex-col space-y-2\">\n          <p className=\"text-sm font-medium\">Profile Photo</p>\n          <p className=\"text-xs text-muted-foreground\">\n            Upload a new photo or drag and drop\n          </p>\n        </div>\n      </div>\n\n      {/* Upload Area */}\n      <div\n        className={`\n          relative border-2 border-dashed rounded-lg p-6 text-center transition-colors\n          ${isDragging ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' : 'border-gray-300 dark:border-gray-600'}\n          ${uploading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:border-blue-400'}\n        `}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileInput}\n          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n          disabled={uploading}\n          data-testid=\"input-profile-photo\"\n        />\n        \n        <div className=\"space-y-2\">\n          <Camera className=\"h-8 w-8 mx-auto text-gray-400\" />\n          <div>\n            <p className=\"text-sm font-medium\">\n              {uploading ? 'Uploading...' : 'Click to upload or drag and drop'}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              PNG, JPG, GIF up to {maxSize}MB\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex space-x-2\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => (document.querySelector('input[data-testid=\"input-profile-photo\"]') as HTMLInputElement)?.click()}\n          disabled={uploading}\n          data-testid=\"button-choose-photo\"\n        >\n          <Upload className=\"h-4 w-4 mr-2\" />\n          Choose Photo\n        </Button>\n        \n        {value && (\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={removePhoto}\n            disabled={uploading}\n            data-testid=\"button-remove-photo\"\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            Remove\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6167},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useTranslation } from \"@/lib/i18n\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => {\n  const { isRTL } = useTranslation();\n  \n  return (\n    <SwitchPrimitives.Root\n      className={cn(\n        \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n        className\n      )}\n      {...props}\n      ref={ref}\n    >\n      <SwitchPrimitives.Thumb\n        className={cn(\n          \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform\",\n          isRTL \n            ? \"data-[state=checked]:-translate-x-5 data-[state=unchecked]:translate-x-0\"\n            : \"data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n        )}\n      />\n    </SwitchPrimitives.Root>\n  );\n})\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1391},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1374},"server/middleware/rateLimiting.ts":{"content":"import rateLimit from 'express-rate-limit';\nimport type { Request, Response } from 'express';\n\n// Different rate limits for different types of endpoints\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 requests per windowMs for auth endpoints\n  message: {\n    error: 'Too many authentication attempts, please try again later.',\n    retryAfter: '15 minutes'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: (req: Request, res: Response) => {\n    console.warn(`🚫 Rate limit exceeded for auth: ${req.ip} - ${req.get('User-Agent')}`);\n    res.status(429).json({\n      error: 'Too many authentication attempts, please try again later.',\n      retryAfter: '15 minutes'\n    });\n  }\n});\n\nexport const searchRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 20, // Limit each IP to 20 search requests per minute\n  message: {\n    error: 'Too many search requests, please slow down.',\n    retryAfter: '1 minute'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: (req: Request, res: Response) => {\n    console.warn(`🚫 Rate limit exceeded for search: ${req.ip} - ${req.method} ${req.path}`);\n    res.status(429).json({\n      error: 'Too many search requests, please slow down.',\n      retryAfter: '1 minute'\n    });\n  }\n});\n\nexport const apiRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 100, // Limit each IP to 100 requests per minute for general API\n  message: {\n    error: 'Too many requests, please try again later.',\n    retryAfter: '1 minute'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: (req: Request, res: Response) => {\n    console.warn(`🚫 Rate limit exceeded for API: ${req.ip} - ${req.method} ${req.path}`);\n    res.status(429).json({\n      error: 'Too many requests, please try again later.',\n      retryAfter: '1 minute'\n    });\n  }\n});\n\nexport const adminRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 50, // Limit admin operations\n  message: {\n    error: 'Too many admin requests, please slow down.',\n    retryAfter: '1 minute'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: (req: Request, res: Response) => {\n    console.warn(`🚫 Admin rate limit exceeded: ${req.ip} - ${req.method} ${req.path}`);\n    res.status(429).json({\n      error: 'Too many admin requests, please slow down.',\n      retryAfter: '1 minute'\n    });\n  }\n});\n\n// Stricter rate limit for resource-intensive operations\nexport const heavyOperationRateLimit = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  max: 10, // Only 10 heavy operations per 5 minutes\n  message: {\n    error: 'Too many resource-intensive requests, please wait before trying again.',\n    retryAfter: '5 minutes'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: (req: Request, res: Response) => {\n    console.warn(`🚫 Heavy operation rate limit exceeded: ${req.ip} - ${req.method} ${req.path}`);\n    res.status(429).json({\n      error: 'Too many resource-intensive requests, please wait before trying again.',\n      retryAfter: '5 minutes'\n    });\n  }\n});\n\n// Skip rate limiting for certain IPs (can be configured for development)\nexport function skipRateLimitForIPs(ips: string[]) {\n  return (req: Request) => {\n    return ips.includes(req.ip || '');\n  };\n}\n\n// Custom rate limit for file uploads\nexport const uploadRateLimit = rateLimit({\n  windowMs: 10 * 60 * 1000, // 10 minutes\n  max: 20, // 20 uploads per 10 minutes\n  message: {\n    error: 'Too many upload attempts, please wait before uploading again.',\n    retryAfter: '10 minutes'\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  handler: (req: Request, res: Response) => {\n    console.warn(`🚫 Upload rate limit exceeded: ${req.ip} - ${req.method} ${req.path}`);\n    res.status(429).json({\n      error: 'Too many upload attempts, please wait before uploading again.',\n      retryAfter: '10 minutes'\n    });\n  }\n});","size_bytes":3962},"client/src/components/LoadingSpinner.tsx":{"content":"import logoImage from \"@assets/logo_1757848527935.png\";\nimport { useTranslation } from \"@/lib/i18n\";\n\nexport function LoadingSpinner() {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"relative\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-2 border-transparent border-t-primary border-r-primary\"></div>\n          <img \n            src={logoImage} \n            alt=\"MapEstate Logo\" \n            title=\"MapEstate Loading\"\n            width=\"48\"\n            height=\"48\"\n            loading=\"eager\"\n            className=\"absolute inset-2 h-12 w-12 object-contain\"\n          />\n        </div>\n        <p className=\"text-muted-foreground text-sm\">{t('common.loading')}</p>\n      </div>\n    </div>\n  );\n}","size_bytes":890},"client/src/components/location-selection-map.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from '@/lib/i18n';\n\n// Reverse geocoding function using Nominatim (OpenStreetMap)\nconst reverseGeocode = async (lat: number, lng: number): Promise<LocationData> => {\n  try {\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Geocoding failed');\n    }\n    \n    const data = await response.json();\n    \n    // Extract address components\n    const address = data.display_name || '';\n    const addressParts = data.address || {};\n    \n    // Build a clean address string\n    const addressComponents = [];\n    if (addressParts.house_number) addressComponents.push(addressParts.house_number);\n    if (addressParts.road) addressComponents.push(addressParts.road);\n    if (addressParts.neighbourhood) addressComponents.push(addressParts.neighbourhood);\n    \n    const cleanAddress = addressComponents.length > 0 \n      ? addressComponents.join(' ')\n      : (addressParts.road || addressParts.suburb || address.split(',')[0] || '');\n    \n    const city = addressParts.city || \n                 addressParts.town || \n                 addressParts.village || \n                 addressParts.municipality || \n                 addressParts.state_district || '';\n    \n    const country = addressParts.country || '';\n    \n    return {\n      lat,\n      lng,\n      address: cleanAddress,\n      city,\n      country\n    };\n  } catch (error) {\n    console.warn('Reverse geocoding failed:', error);\n    return { lat, lng };\n  }\n};\n\ninterface LocationData {\n  lat: number;\n  lng: number;\n  address?: string;\n  city?: string;\n  country?: string;\n}\n\ninterface LocationSelectionMapProps {\n  onLocationSelect: (data: LocationData) => void;\n  selectedLocation?: { lat: number; lng: number } | null;\n  className?: string;\n}\n\nexport default function LocationSelectionMap({ \n  onLocationSelect, \n  selectedLocation, \n  className = '' \n}: LocationSelectionMapProps) {\n  const { t } = useTranslation();\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const markerRef = useRef<any>(null);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n\n  // Get user's location for auto-centering the map\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation({ lat: latitude, lng: longitude });\n        },\n        (error) => {\n          console.warn('Geolocation failed:', error.message);\n          // Will fall back to default location (Kurdistan)\n        },\n        {\n          enableHighAccuracy: false,\n          timeout: 10000,\n          maximumAge: 300000 // 5 minutes\n        }\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!mapRef.current || mapInstanceRef.current) return;\n\n    let checkLeafletInterval: NodeJS.Timeout | null = null;\n    let timeoutRef: NodeJS.Timeout | null = null;\n\n    // Initialize the map\n    const initMap = () => {\n      if (typeof window !== 'undefined' && (window as any).L && mapRef.current) {\n        const L = (window as any).L;\n        \n        try {\n          // Ensure container is ready\n          if (!mapRef.current.offsetParent) {\n            setTimeout(initMap, 100);\n            return;\n          }\n\n          // Center on user's location if available, otherwise Kurdistan/Iraq region\n          const defaultLocation = [36.1911, 44.0094]; // Kurdistan/Iraq fallback\n          const centerLocation = userLocation ? [userLocation.lat, userLocation.lng] : defaultLocation;\n          const zoomLevel = userLocation ? 10 : 8; // Closer zoom if we have user location\n          \n          const map = L.map(mapRef.current).setView(centerLocation, zoomLevel);\n\n          // Add OpenStreetMap tiles\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '© OpenStreetMap contributors'\n          }).addTo(map);\n\n          // Add click event to map\n          map.on('click', async (e: any) => {\n            try {\n              const { lat, lng } = e.latlng;\n              \n              // Remove existing marker\n              if (markerRef.current) {\n                map.removeLayer(markerRef.current);\n              }\n              \n              // Add new marker with loading popup\n              markerRef.current = L.marker([lat, lng]).addTo(map);\n              markerRef.current.bindPopup('Getting address...').openPopup();\n              \n              // Perform reverse geocoding\n              const locationData = await reverseGeocode(lat, lng);\n              \n              // Update marker popup with address\n              if (locationData.address) {\n                markerRef.current.setPopupContent(`📍 ${locationData.address}`);\n              }\n              \n              // Call the callback with full location data\n              onLocationSelect(locationData);\n            } catch (error) {\n              console.warn('Error handling map click:', error);\n              // Fallback: still call with basic location data\n              onLocationSelect({ lat: e.latlng.lat, lng: e.latlng.lng });\n            }\n          });\n\n          mapInstanceRef.current = map;\n          setIsMapLoaded(true);\n\n          // Invalidate size to ensure proper rendering\n          setTimeout(() => {\n            if (mapInstanceRef.current) {\n              mapInstanceRef.current.invalidateSize();\n            }\n          }, 100);\n\n        } catch (error) {\n          console.error('Error initializing location selection map:', error);\n          setIsMapLoaded(false);\n        }\n      }\n    };\n\n    // Check if Leaflet is already loaded\n    if ((window as any).L) {\n      initMap();\n    } else {\n      // Wait for Leaflet to load\n      checkLeafletInterval = setInterval(() => {\n        if ((window as any).L) {\n          if (checkLeafletInterval) {\n            clearInterval(checkLeafletInterval);\n            checkLeafletInterval = null;\n          }\n          initMap();\n        }\n      }, 100);\n\n      // Cleanup interval after 10 seconds\n      timeoutRef = setTimeout(() => {\n        if (checkLeafletInterval) {\n          clearInterval(checkLeafletInterval);\n          checkLeafletInterval = null;\n        }\n        console.warn('Leaflet failed to load within 10 seconds');\n      }, 10000);\n    }\n\n    // Cleanup function\n    return () => {\n      if (checkLeafletInterval) {\n        clearInterval(checkLeafletInterval);\n      }\n      if (timeoutRef) {\n        clearTimeout(timeoutRef);\n      }\n      \n      if (mapInstanceRef.current) {\n        try {\n          mapInstanceRef.current.remove();\n        } catch (error) {\n          console.warn('Error cleaning up location selection map:', error);\n        }\n        mapInstanceRef.current = null;\n      }\n      \n      if (markerRef.current) {\n        markerRef.current = null;\n      }\n    };\n  }, [onLocationSelect, userLocation]);\n\n  // Re-center map when user location is detected\n  useEffect(() => {\n    if (mapInstanceRef.current && userLocation && isMapLoaded) {\n      // Smoothly animate to user's location\n      mapInstanceRef.current.setView([userLocation.lat, userLocation.lng], 10, {\n        animate: true,\n        duration: 1.5\n      });\n    }\n  }, [userLocation, isMapLoaded]);\n\n  // Update marker when selectedLocation changes externally\n  useEffect(() => {\n    if (mapInstanceRef.current && selectedLocation && isMapLoaded) {\n      const L = (window as any).L;\n      \n      // Remove existing marker\n      if (markerRef.current) {\n        mapInstanceRef.current.removeLayer(markerRef.current);\n      }\n      \n      // Add new marker at selected location\n      markerRef.current = L.marker([selectedLocation.lat, selectedLocation.lng])\n        .addTo(mapInstanceRef.current);\n      \n      // Center map on the selected location\n      mapInstanceRef.current.setView([selectedLocation.lat, selectedLocation.lng], 13);\n    }\n  }, [selectedLocation, isMapLoaded]);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div \n        ref={mapRef} \n        className=\"w-full h-full rounded-lg\"\n        style={{ minHeight: '400px' }}\n      />\n      \n      {/* Overlay instructions */}\n      <div className=\"absolute top-4 left-4 bg-white dark:bg-gray-800 p-3 rounded-lg shadow-lg border z-10 max-w-xs\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <div className=\"h-2 w-2 bg-blue-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-sm font-medium\">Click to Select Location</span>\n        </div>\n        <p className=\"text-xs text-muted-foreground\">\n          Click anywhere on the map to mark your property's location\n        </p>\n      </div>\n\n      {/* Loading overlay */}\n      {!isMapLoaded && (\n        <div className=\"absolute inset-0 bg-gray-100 dark:bg-gray-800 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-2\"></div>\n            <p className=\"text-sm text-muted-foreground\">{t('common.loading')}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9404},"client/src/lib/image-preloader.ts":{"content":"// Image preloading utilities for critical performance\nimport type { Property } from '@/types';\n\ninterface PreloadOptions {\n  priority?: boolean;\n  sizes?: string;\n  format?: 'webp' | 'jpg' | 'auto';\n}\n\n// Preload critical images on page load\nexport class ImagePreloader {\n  private static preloadedUrls = new Set<string>();\n  \n  static preload(url: string, options: PreloadOptions = {}) {\n    if (this.preloadedUrls.has(url)) return;\n    \n    const { priority = false, sizes = \"100vw\", format = 'auto' } = options;\n    \n    // Create preload link\n    const link = document.createElement('link');\n    link.rel = priority ? 'preload' : 'prefetch';\n    link.as = 'image';\n    \n    // Optimize Unsplash URLs for better performance\n    let optimizedUrl = url;\n    if (url.includes('unsplash.com')) {\n      const webpUrl = `${url}&fm=webp&w=800&dpr=2`;\n      optimizedUrl = format === 'webp' ? webpUrl : url;\n    }\n    \n    link.href = optimizedUrl;\n    link.imageSizes = sizes;\n    \n    // Add to DOM\n    document.head.appendChild(link);\n    this.preloadedUrls.add(url);\n    \n    // Clean up after load\n    link.addEventListener('load', () => {\n      setTimeout(() => {\n        if (document.head.contains(link)) {\n          document.head.removeChild(link);\n        }\n      }, 100);\n    });\n  }\n  \n  static preloadHeroImages(properties: Property[], limit: number = 3) {\n    // Preload first images from featured properties\n    properties.slice(0, limit).forEach((property, index) => {\n      if (property.images && property.images.length > 0) {\n        this.preload(property.images[0], {\n          priority: index === 0, // First image has priority\n          sizes: \"(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw\",\n          format: 'webp'\n        });\n      }\n    });\n  }\n  \n  static preloadPropertyImages(property: Property) {\n    // Preload all images for a property detail page\n    if (property.images && property.images.length > 0) {\n      property.images.forEach((imageUrl, index) => {\n        this.preload(imageUrl, {\n          priority: index === 0, // First image is priority\n          sizes: \"(max-width: 768px) 100vw, 90vw\",\n          format: 'webp'\n        });\n      });\n    }\n  }\n  \n  static clear() {\n    this.preloadedUrls.clear();\n  }\n}\n\n// Hook for image preloading in React components\nexport function useImagePreloader() {\n  return {\n    preload: ImagePreloader.preload.bind(ImagePreloader),\n    preloadHeroImages: ImagePreloader.preloadHeroImages.bind(ImagePreloader),\n    preloadPropertyImages: ImagePreloader.preloadPropertyImages.bind(ImagePreloader),\n    clear: ImagePreloader.clear.bind(ImagePreloader)\n  };\n}\n\n// Intersection Observer for lazy loading optimization\nexport class LazyLoadObserver {\n  private static observer: IntersectionObserver | null = null;\n  private static imageElements = new WeakMap<Element, () => void>();\n  \n  static init() {\n    if (typeof window === 'undefined' || this.observer) return;\n    \n    this.observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          const callback = this.imageElements.get(entry.target);\n          if (callback) {\n            callback();\n            this.observer?.unobserve(entry.target);\n            this.imageElements.delete(entry.target);\n          }\n        }\n      });\n    }, {\n      rootMargin: '50px 0px', // Start loading 50px before visible\n      threshold: 0.1\n    });\n  }\n  \n  static observe(element: Element, callback: () => void) {\n    if (!this.observer) this.init();\n    \n    this.imageElements.set(element, callback);\n    this.observer?.observe(element);\n  }\n  \n  static unobserve(element: Element) {\n    this.observer?.unobserve(element);\n    this.imageElements.delete(element);\n  }\n  \n  static disconnect() {\n    this.observer?.disconnect();\n    this.observer = null;\n    this.imageElements = new WeakMap();\n  }\n}\n\n// Utility to generate responsive image URLs\nexport function generateResponsiveUrls(src: string) {\n  if (!src.includes('unsplash.com')) return null;\n  \n  return {\n    webp: {\n      small: `${src}&fm=webp&w=400&dpr=1`,\n      medium: `${src}&fm=webp&w=800&dpr=1`,\n      large: `${src}&fm=webp&w=1200&dpr=1`,\n      xlarge: `${src}&fm=webp&w=1600&dpr=1`\n    },\n    jpg: {\n      small: `${src}&fm=jpg&w=400&dpr=1`,\n      medium: `${src}&fm=jpg&w=800&dpr=1`, \n      large: `${src}&fm=jpg&w=1200&dpr=1`,\n      xlarge: `${src}&fm=jpg&w=1600&dpr=1`\n    }\n  };\n}","size_bytes":4442},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/lib/slug-utils.ts":{"content":"import type { Property } from '@shared/schema';\n\n// Common ID patterns used in the system\nconst LEGACY_ID_PATTERNS = [\n  /^prop-\\d+$/, // Pattern like \"prop-1000\"\n  /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i, // UUID pattern\n  /^\\d+$/ // Simple numeric IDs\n];\n\n// Arabic to Latin transliteration map\nconst arabicToLatin: { [key: string]: string } = {\n  'ا': 'a', 'أ': 'a', 'إ': 'i', 'آ': 'aa',\n  'ب': 'b', 'ت': 't', 'ث': 'th', 'ج': 'j',\n  'ح': 'h', 'خ': 'kh', 'د': 'd', 'ذ': 'dh',\n  'ر': 'r', 'ز': 'z', 'س': 's', 'ش': 'sh',\n  'ص': 's', 'ض': 'd', 'ط': 't', 'ظ': 'z',\n  'ع': 'a', 'غ': 'gh', 'ف': 'f', 'ق': 'q',\n  'ك': 'k', 'ل': 'l', 'م': 'm', 'ن': 'n',\n  'ه': 'h', 'و': 'w', 'ي': 'y', 'ة': 'a',\n  'ى': 'a', 'ئ': 'e', 'ء': ''\n};\n\n// Kurdish (Sorani) to Latin transliteration map\nconst kurdishToLatin: { [key: string]: string } = {\n  'ا': 'a', 'ب': 'b', 'پ': 'p', 'ت': 't',\n  'ج': 'j', 'چ': 'ch', 'ح': 'h', 'خ': 'kh',\n  'د': 'd', 'ر': 'r', 'ڕ': 'rr', 'ز': 'z',\n  'ژ': 'zh', 'س': 's', 'ش': 'sh', 'ع': 'a',\n  'غ': 'gh', 'ف': 'f', 'ڤ': 'v', 'ق': 'q',\n  'ک': 'k', 'گ': 'g', 'ل': 'l', 'ڵ': 'll',\n  'م': 'm', 'ن': 'n', 'ڶ': 'nn', 'ه': 'h',\n  'ھ': 'h', 'و': 'w', 'ی': 'y',\n  'ێ': 'e', 'ە': 'a', 'ۆ': 'o', 'ۇ': 'u'\n};\n\n// Unicode ranges for script detection\nconst ARABIC_RANGE = /[\\u0600-\\u06FF\\u0750-\\u077F]/;\nconst KURDISH_RANGE = /[\\u06C0-\\u06FF\\u0750-\\u077F]|[ڕژڤگڵە]/;\n\n/**\n * Detects if text contains Arabic script\n */\nfunction hasArabicScript(text: string): boolean {\n  return ARABIC_RANGE.test(text);\n}\n\n/**\n * Detects if text contains Kurdish script\n */\nfunction hasKurdishScript(text: string): boolean {\n  return KURDISH_RANGE.test(text);\n}\n\n/**\n * Transliterates Arabic text to Latin characters\n */\nfunction transliterateArabic(text: string): string {\n  // Normalize text first\n  const normalized = text.normalize('NFKD');\n  return normalized\n    .split('')\n    .map(char => arabicToLatin[char] || char)\n    .join('')\n    .replace(/[ًٌٍَُِّْ]/g, '') // Remove Arabic diacritics\n    .trim();\n}\n\n/**\n * Transliterates Kurdish text to Latin characters\n */\nfunction transliterateKurdish(text: string): string {\n  // Normalize text first\n  const normalized = text.normalize('NFKD');\n  return normalized\n    .split('')\n    .map(char => kurdishToLatin[char] || char)\n    .join('')\n    .trim();\n}\n\n/**\n * Smart transliteration based on script detection\n */\nfunction smartTransliterate(text: string): string {\n  if (hasKurdishScript(text)) {\n    return transliterateKurdish(text);\n  } else if (hasArabicScript(text)) {\n    return transliterateArabic(text);\n  }\n  return text;\n}\n\n/**\n * Cleans and formats text for URL slugs\n */\nfunction cleanSlugText(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Only allow letters, numbers, spaces, hyphens\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen\n    .replace(/^-|-$/g, '') // Remove leading/trailing hyphens\n    .trim()\n    .substring(0, 100); // Cap at 100 characters\n}\n\n/**\n * Generates a comprehensive SEO-friendly slug from property data\n */\nexport function generatePropertySlug(property: Property | Partial<Property>): string {\n  const parts: string[] = [];\n  \n  // Add city (smart transliterated)\n  if (property.city) {\n    const citySlug = smartTransliterate(property.city);\n    const cleanCity = cleanSlugText(citySlug);\n    if (cleanCity) {\n      parts.push(cleanCity);\n    }\n  }\n  \n  // Add bedroom count if available\n  if (property.bedrooms && property.bedrooms > 0) {\n    parts.push(`${property.bedrooms}-bedroom`);\n  }\n  \n  // Add property type (smart transliterated)\n  if (property.type) {\n    const typeSlug = smartTransliterate(property.type);\n    const cleanType = cleanSlugText(typeSlug);\n    if (cleanType) {\n      parts.push(cleanType);\n    }\n  }\n  \n  // Add listing type context\n  if (property.listingType) {\n    const listingTypeMap: { [key: string]: string } = {\n      'sale': 'for-sale',\n      'rent': 'for-rent'\n    };\n    parts.push(listingTypeMap[property.listingType] || property.listingType);\n  }\n  \n  // If we don't have enough parts, add a portion of the title\n  if (parts.length < 3 && property.title) {\n    const titleSlug = smartTransliterate(property.title);\n    \n    // Take first 3 meaningful words from title\n    const titleWords = cleanSlugText(titleSlug)\n      .split('-')\n      .filter(word => word.length > 2) // Filter out small words\n      .slice(0, 3);\n    \n    parts.push(...titleWords);\n  }\n  \n  // Ensure we have a fallback\n  if (parts.length === 0) {\n    parts.push('property');\n  }\n  \n  return parts.join('-');\n}\n\n/**\n * Generates a unique slug by appending a counter if needed\n */\nexport function generateUniqueSlug(\n  baseSlug: string, \n  checkSlugExists: (slug: string) => boolean,\n  currentPropertyId?: string\n): string {\n  let slug = baseSlug;\n  let counter = 1;\n  \n  // Check if the slug already exists (excluding current property)\n  while (checkSlugExists(slug)) {\n    slug = `${baseSlug}-${counter}`;\n    counter++;\n    // Prevent infinite loops\n    if (counter > 1000) {\n      slug = `${baseSlug}-${Date.now()}`;\n      break;\n    }\n  }\n  \n  return slug;\n}\n\n/**\n * Extracts property ID from a slug-based URL\n * Handles both new slug format and old ID format for backward compatibility\n */\nexport function extractPropertyIdentifier(urlParam: string): { \n  isSlug: boolean; \n  identifier: string; \n} {\n  // Check if it matches any known legacy ID patterns\n  for (const pattern of LEGACY_ID_PATTERNS) {\n    if (pattern.test(urlParam)) {\n      return { isSlug: false, identifier: urlParam };\n    }\n  }\n  \n  // It's a slug (new format)\n  return { isSlug: true, identifier: urlParam };\n}\n\n/**\n * Validates if a slug is well-formed\n */\nexport function isValidSlug(slug: string): boolean {\n  // Should not be empty, contain only letters, numbers, and hyphens\n  // Should not start or end with hyphen\n  const slugRegex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;\n  return slugRegex.test(slug) && slug.length >= 3 && slug.length <= 100;\n}\n\n/**\n * Checks if a string is a legacy ID format\n */\nexport function isLegacyId(identifier: string): boolean {\n  return LEGACY_ID_PATTERNS.some(pattern => pattern.test(identifier));\n}\n\n/**\n * Formats a slug for display (converts hyphens to spaces and capitalizes)\n */\nexport function formatSlugForDisplay(slug: string): string {\n  return slug\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Generates example SEO-friendly URLs for demonstration\n */\nexport function generateExampleUrls(): string[] {\n  return [\n    '/property/erbil-3-bedroom-apartment-for-sale',\n    '/property/baghdad-2-bedroom-house-for-rent',\n    '/property/sulaymaniyah-4-bedroom-villa-for-sale',\n    '/property/duhok-1-bedroom-apartment-for-rent',\n    '/property/zakho-commercial-land-for-sale'\n  ];\n}","size_bytes":6974},"client/src/hooks/use-local-favorites.ts":{"content":"import { useState, useEffect } from 'react';\n\nconst FAVORITES_STORAGE_KEY = 'guest_favorites';\n\nexport function useLocalFavorites() {\n  const [favorites, setFavorites] = useState<Set<string>>(() => {\n    try {\n      const stored = localStorage.getItem(FAVORITES_STORAGE_KEY);\n      return stored ? new Set(JSON.parse(stored)) : new Set();\n    } catch {\n      return new Set();\n    }\n  });\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(FAVORITES_STORAGE_KEY, JSON.stringify(Array.from(favorites)));\n    } catch (error) {\n      console.error('Failed to save favorites to localStorage:', error);\n    }\n  }, [favorites]);\n\n  const addFavorite = (propertyId: string) => {\n    setFavorites(prev => new Set(Array.from(prev).concat(propertyId)));\n  };\n\n  const removeFavorite = (propertyId: string) => {\n    setFavorites(prev => {\n      const newSet = new Set(prev);\n      newSet.delete(propertyId);\n      return newSet;\n    });\n  };\n\n  const isFavorite = (propertyId: string) => {\n    return favorites.has(propertyId);\n  };\n\n  const toggleFavorite = (propertyId: string) => {\n    if (favorites.has(propertyId)) {\n      removeFavorite(propertyId);\n    } else {\n      addFavorite(propertyId);\n    }\n  };\n\n  return {\n    favorites,\n    addFavorite,\n    removeFavorite,\n    isFavorite,\n    toggleFavorite,\n  };\n}\n","size_bytes":1314},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      fontSize: {\n        // Responsive typography system with fluid scaling\n        'xs': ['var(--text-xs)', { lineHeight: 'var(--leading-xs)' }],\n        'sm': ['var(--text-sm)', { lineHeight: 'var(--leading-sm)' }],\n        'base': ['var(--text-base)', { lineHeight: 'var(--leading-base)' }],\n        'lg': ['var(--text-lg)', { lineHeight: 'var(--leading-lg)' }],\n        'xl': ['var(--text-xl)', { lineHeight: 'var(--leading-xl)' }],\n        '2xl': ['var(--text-2xl)', { lineHeight: 'var(--leading-2xl)' }],\n        '3xl': ['var(--text-3xl)', { lineHeight: 'var(--leading-3xl)' }],\n        '4xl': ['var(--text-4xl)', { lineHeight: 'var(--leading-4xl)' }],\n        '5xl': ['var(--text-5xl)', { lineHeight: 'var(--leading-5xl)' }],\n        \n        // Responsive display sizes with fluid scaling\n        'display-sm': ['var(--text-display-sm)', { lineHeight: 'var(--leading-display-sm)' }],\n        'display-md': ['var(--text-display-md)', { lineHeight: 'var(--leading-display-md)' }],\n        'display-lg': ['var(--text-display-lg)', { lineHeight: 'var(--leading-display-lg)' }],\n        'display-xl': ['var(--text-display-xl)', { lineHeight: 'var(--leading-display-xl)' }],\n      },\n      lineHeight: {\n        'xs': 'var(--leading-xs)',\n        'sm': 'var(--leading-sm)',\n        'base': 'var(--leading-base)',\n        'lg': 'var(--leading-lg)',\n        'xl': 'var(--leading-xl)',\n        '2xl': 'var(--leading-2xl)',\n        '3xl': 'var(--leading-3xl)',\n        '4xl': 'var(--leading-4xl)',\n        '5xl': 'var(--leading-5xl)',\n        'display-sm': 'var(--leading-display-sm)',\n        'display-md': 'var(--leading-display-md)',\n        'display-lg': 'var(--leading-display-lg)',\n        'display-xl': 'var(--leading-display-xl)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4513},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport type { User, CurrencyRate, InsertCurrencyRate, UpdateCurrencyRate, ClientLocation } from '@shared/schema';\nimport { SUPPORTED_LANGUAGES, LANGUAGE_NAMES, insertCurrencyRateSchema, updateCurrencyRateSchema } from '@shared/schema';\nimport { \n  Shield, Users, Building2, Settings, Plus, Edit, Trash2, \n  LogOut, UserPlus, Key, BarChart3, Activity, Calendar,\n  Search, Filter, MoreVertical, AlertTriangle, Eye, MapPin,\n  Home, DollarSign, ImageIcon, Languages, CreditCard\n} from 'lucide-react';\nimport { CustomerAnalytics } from '@/components/CustomerAnalytics';\nimport { \n  useCurrencyRates, \n  useCreateCurrencyRate, \n  useUpdateCurrencyRate, \n  useDeleteCurrencyRate,\n  type CreateCurrencyRateForm,\n  type UpdateCurrencyRateForm\n} from '@/hooks/use-currency-rates';\nimport { useProperties, useDeleteProperty } from '@/hooks/use-properties';\nimport { normalizePropertyImageUrl } from '@/lib/utils';\nimport type { Property } from '@/types';\n\nconst createUserSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  email: z.string().email('Please enter a valid email'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  role: z.enum(['user', 'agent', 'admin', 'super_admin']),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phone: z.string().optional(),\n  avatar: z.string().optional(),\n  waveBalance: z.number().min(0, 'Wave balance must be 0 or greater').default(0),\n  expiresAt: z.string().optional(),\n  isVerified: z.boolean().default(false),\n  allowedLanguages: z.array(z.enum(SUPPORTED_LANGUAGES)).default(['en']).optional(),\n});\n\nconst editUserSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  email: z.string().email('Please enter a valid email'),\n  password: z.string().min(6, 'Password must be at least 6 characters').optional(),\n  role: z.enum(['user', 'agent', 'admin', 'super_admin']),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phone: z.string().optional(),\n  avatar: z.string().optional(),\n  waveBalance: z.number().min(0, 'Wave balance must be 0 or greater').default(0),\n  expiresAt: z.string().optional(),\n  isVerified: z.boolean().default(false),\n  allowedLanguages: z.array(z.enum(SUPPORTED_LANGUAGES)).optional(),\n});\n\ntype CreateUserForm = z.infer<typeof createUserSchema>;\ntype EditUserForm = z.infer<typeof editUserSchema>;\n\n// Extend shared schemas with form-specific validation\nconst createCurrencyRateFormSchema = insertCurrencyRateSchema.extend({\n  toCurrency: z.enum(['IQD', 'EUR', 'AED'], {\n    required_error: 'Please select a target currency',\n  }),\n  rate: z.coerce.number().positive('Exchange rate must be greater than 0'),\n});\n\nconst updateCurrencyRateFormSchema = updateCurrencyRateSchema.extend({\n  rate: z.coerce.number().positive('Exchange rate must be greater than 0'),\n});\n\ntype CreateCurrencyRateFormData = z.infer<typeof createCurrencyRateFormSchema>;\ntype UpdateCurrencyRateFormData = z.infer<typeof updateCurrencyRateFormSchema>;\n\n// Helper functions for expiration\nconst calculateDaysUntilExpiration = (expiresAt: string | Date | null): number | null => {\n  if (!expiresAt) return null;\n  const now = new Date();\n  const expiration = expiresAt instanceof Date ? expiresAt : new Date(expiresAt);\n  const diffInMs = expiration.getTime() - now.getTime();\n  return Math.ceil(diffInMs / (1000 * 60 * 60 * 24));\n};\n\nconst getExpirationStatus = (daysUntilExpiration: number | null): { status: string; color: string; bgColor: string } => {\n  if (daysUntilExpiration === null) {\n    return { status: 'No Expiration', color: 'text-green-600', bgColor: 'bg-green-100' };\n  }\n  \n  if (daysUntilExpiration < 0) {\n    return { status: 'Expired', color: 'text-red-600', bgColor: 'bg-red-100' };\n  }\n  \n  if (daysUntilExpiration <= 3) {\n    return { status: `${daysUntilExpiration} days left`, color: 'text-red-600', bgColor: 'bg-red-100' };\n  }\n  \n  if (daysUntilExpiration <= 7) {\n    return { status: `${daysUntilExpiration} days left`, color: 'text-yellow-600', bgColor: 'bg-yellow-100' };\n  }\n  \n  return { status: `${daysUntilExpiration} days left`, color: 'text-green-600', bgColor: 'bg-green-100' };\n};\n\n// Client Location Tracking Navigation Component\nconst ClientLocationTrackingCard = () => {\n  const [location] = useLocation();\n  const currentLang = location.split('/')[1] || 'en'; // Extract language from current path\n  \n  return (\n    <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800 mt-8\">\n      <CardHeader className=\"border-b border-orange-100 dark:border-gray-700 bg-gradient-to-r from-orange-50 to-white dark:from-gray-800 dark:to-gray-800\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n          <div>\n            <CardTitle className=\"text-lg sm:text-xl text-orange-800 dark:text-orange-200 font-bold flex items-center gap-2\">\n              <MapPin className=\"h-6 w-6\" />\n              Client Location Analytics\n            </CardTitle>\n            <CardDescription className=\"text-orange-600 dark:text-orange-300 mt-1\">\n              Comprehensive tracking and analytics for client location data with professional charts\n            </CardDescription>\n          </div>\n          <Link href={`/${currentLang}/admin/client-locations`}>\n            <Button className=\"bg-orange-600 hover:bg-orange-700 text-white\" data-testid=\"button-view-analytics\">\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\n              View Full Analytics\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-3 bg-blue-100 dark:bg-blue-900/20 rounded-lg\">\n              <Activity className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Real-time Tracking</p>\n              <p className=\"text-xs text-gray-500\">Monitor client locations as they happen</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-3 bg-green-100 dark:bg-green-900/20 rounded-lg\">\n              <BarChart3 className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Analytics Charts</p>\n              <p className=\"text-xs text-gray-500\">Professional charts and insights</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-3 bg-purple-100 dark:bg-purple-900/20 rounded-lg\">\n              <MapPin className=\"h-6 w-6 text-purple-600\" />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Interactive Maps</p>\n              <p className=\"text-xs text-gray-500\">View locations on detailed maps</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function AdminDashboard() {\n  const [, navigate] = useLocation();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\n  const [isEditUserOpen, setIsEditUserOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState<string>('all');\n  const [avatarFile, setAvatarFile] = useState<File | null>(null);\n  const [avatarPreview, setAvatarPreview] = useState<string>('');\n  const [showPasswords, setShowPasswords] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  const [selectedCustomer, setSelectedCustomer] = useState<User | null>(null);\n  const [isCustomerDetailsOpen, setIsCustomerDetailsOpen] = useState(false);\n  \n  // Currency rate management state\n  const [isCreateCurrencyRateOpen, setIsCreateCurrencyRateOpen] = useState(false);\n  const [isEditCurrencyRateOpen, setIsEditCurrencyRateOpen] = useState(false);\n  const [editingCurrencyRate, setEditingCurrencyRate] = useState<CurrencyRate | null>(null);\n  \n  // Properties management state\n  const [propertySearchTerm, setPropertySearchTerm] = useState('');\n  const [propertyTypeFilter, setPropertyTypeFilter] = useState<string>('all');\n\n  // Redirect if not admin or super admin\n  useEffect(() => {\n    if (user && user.role !== 'admin' && user.role !== 'super_admin') {\n      toast({\n        title: 'Access Denied',\n        description: 'You do not have permission to access this page.',\n        variant: 'destructive',\n      });\n      navigate('/');\n    }\n  }, [user, navigate, toast]);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!user) {\n      navigate('/admin/login?unauthorized=true');\n    }\n  }, [user, navigate]);\n\n  const form = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      role: 'user',\n      firstName: '',\n      lastName: '',\n      phone: '',\n      avatar: '',\n      waveBalance: 10,\n      expiresAt: '',\n      isVerified: false,\n      allowedLanguages: ['en'],\n    },\n  });\n\n  const editForm = useForm<EditUserForm>({\n    resolver: zodResolver(editUserSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      role: 'user',\n      firstName: '',\n      lastName: '',\n      phone: '',\n      avatar: '',\n      waveBalance: 0,\n      expiresAt: '',\n      isVerified: false,\n      allowedLanguages: ['en'],\n    },\n  });\n\n  // Currency rate forms\n  const currencyRateForm = useForm<CreateCurrencyRateFormData>({\n    resolver: zodResolver(createCurrencyRateFormSchema),\n    defaultValues: {\n      toCurrency: 'IQD',\n      rate: 0,\n      isActive: true,\n    },\n  });\n\n  const editCurrencyRateForm = useForm<UpdateCurrencyRateFormData>({\n    resolver: zodResolver(updateCurrencyRateFormSchema),\n    defaultValues: {\n      rate: 0,\n      isActive: true,\n    },\n  });\n\n  // Currency rate hooks\n  const { data: currencyRates = [], isLoading: currencyRatesLoading } = useCurrencyRates();\n  const createCurrencyRateMutation = useCreateCurrencyRate();\n  const updateCurrencyRateMutation = useUpdateCurrencyRate();\n  const deleteCurrencyRateMutation = useDeleteCurrencyRate();\n  \n  // Properties hooks\n  const { data: allProperties = [], isLoading: propertiesLoading } = useProperties();\n  const deletePropertyMutation = useDeleteProperty();\n\n  // Handle avatar file selection and upload to server\n  const handleAvatarChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Check file size (limit to 5MB)\n      const maxSize = 5 * 1024 * 1024; // 5MB in bytes\n      if (file.size > maxSize) {\n        toast({\n          title: 'File too large',\n          description: 'Please select an image smaller than 5MB',\n          variant: 'destructive',\n        });\n        event.target.value = ''; // Clear the input\n        return;\n      }\n\n      // Check file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: 'Invalid file type',\n          description: 'Please select an image file',\n          variant: 'destructive',\n        });\n        event.target.value = ''; // Clear the input\n        return;\n      }\n\n      setAvatarFile(file);\n      \n      // Create preview from file\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setAvatarPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n\n      // Upload file to server\n      try {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const response = await fetch('/api/upload/avatar', {\n          method: 'POST',\n          body: formData,\n          credentials: 'include',\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to upload avatar');\n        }\n\n        const data = await response.json();\n        \n        // Set the server URL in the form\n        form.setValue('avatar', data.url);\n        editForm.setValue('avatar', data.url);\n        \n        toast({\n          title: 'Avatar uploaded',\n          description: 'Avatar image uploaded successfully',\n        });\n      } catch (error) {\n        console.error('Avatar upload error:', error);\n        toast({\n          title: 'Upload failed',\n          description: 'Failed to upload avatar. Please try again.',\n          variant: 'destructive',\n        });\n        event.target.value = ''; // Clear the input\n        setAvatarFile(null);\n        setAvatarPreview('');\n      }\n    }\n  };\n\n  // Reset avatar when dialog closes\n  const resetAvatarUpload = () => {\n    setAvatarFile(null);\n    setAvatarPreview('');\n    form.setValue('avatar', '');\n    editForm.setValue('avatar', '');\n  };\n\n  // Fetch all users\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/admin/users'],\n    enabled: user?.role === 'admin' || user?.role === 'super_admin',\n  });\n\n  // Fetch users with passwords for admins\n  const { data: usersWithPasswords = [], isLoading: usersWithPasswordsLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/users/with-passwords'],\n    enabled: (user?.role === 'admin' || user?.role === 'super_admin') && showPasswords,\n    retry: false,\n  });\n\n  // Fetch customer properties when a customer is selected\n  const { data: customerProperties = [], isLoading: customerPropertiesLoading } = useQuery<any[]>({\n    queryKey: ['/api/users', selectedCustomer?.id, 'properties'],\n    enabled: !!selectedCustomer?.id,\n    retry: false,\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: CreateUserForm) => {\n      // Prepare data for backend - keep expiresAt as string or remove if empty\n      const transformedData: any = { ...userData };\n      \n      // Handle expiresAt field properly\n      if (userData.expiresAt && userData.expiresAt.trim() !== '') {\n        // Ensure it's a valid date string in ISO format\n        const dateObj = new Date(userData.expiresAt);\n        if (!isNaN(dateObj.getTime())) {\n          transformedData.expiresAt = userData.expiresAt; // Keep as string for backend processing\n        } else {\n          delete transformedData.expiresAt; // Invalid date, remove it\n        }\n      } else {\n        delete transformedData.expiresAt; // Empty or null, remove it\n      }\n      \n      // Only admins and super admins can set language permissions\n      if (user?.role !== 'admin' && user?.role !== 'super_admin') {\n        delete transformedData.allowedLanguages;\n      }\n      \n      const response = await apiRequest('POST', '/api/admin/users', transformedData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setIsCreateUserOpen(false);\n      form.reset();\n      resetAvatarUpload();\n      toast({\n        title: 'Success',\n        description: 'User created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create user',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Edit user mutation\n  const editUserMutation = useMutation({\n    mutationFn: async ({ id, userData }: { id: string; userData: EditUserForm }) => {\n      // Prepare data for backend - keep expiresAt as string or remove if empty\n      const transformedData: any = { ...userData };\n      \n      // Handle expiresAt field properly\n      if (userData.expiresAt && userData.expiresAt.trim() !== '') {\n        // Ensure it's a valid date string in ISO format\n        const dateObj = new Date(userData.expiresAt);\n        if (!isNaN(dateObj.getTime())) {\n          transformedData.expiresAt = userData.expiresAt; // Keep as string for backend processing\n        } else {\n          delete transformedData.expiresAt; // Invalid date, remove it\n        }\n      } else {\n        delete transformedData.expiresAt; // Empty or null, remove it\n      }\n      \n      // Only admins and super admins can set language permissions\n      if (user?.role !== 'admin' && user?.role !== 'super_admin') {\n        delete transformedData.allowedLanguages;\n      }\n      \n      const response = await apiRequest('PUT', `/api/admin/users/${id}`, transformedData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setIsEditUserOpen(false);\n      setEditingUser(null);\n      editForm.reset();\n      resetAvatarUpload();\n      toast({\n        title: 'Success',\n        description: 'User updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update user',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest('DELETE', `/api/admin/users/${userId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({\n        title: 'Success',\n        description: 'User deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete user',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/admin/login');\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Logout failed',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const onCreateUser = async (data: CreateUserForm) => {\n    await createUserMutation.mutateAsync(data);\n  };\n\n  const onEditUser = async (data: EditUserForm) => {\n    if (editingUser) {\n      await editUserMutation.mutateAsync({ id: editingUser.id, userData: data });\n    }\n  };\n\n  const handleEditUser = async (user: User) => {\n    setEditingUser(user);\n    \n    // Get the current password if available\n    const userWithPassword = usersWithPasswords.find(u => u.id === user.id);\n    const currentPassword = userWithPassword?.password || '';\n    \n    // Format expiresAt date for datetime-local input\n    let formattedExpiresAt = '';\n    if (user.expiresAt) {\n      const date = new Date(user.expiresAt);\n      // Format as YYYY-MM-DDTHH:MM for datetime-local input\n      formattedExpiresAt = date.toISOString().slice(0, 16);\n    }\n    \n    // Fetch user's current language permissions\n    let userLanguages = ['en']; // Default to English\n    try {\n      const response = await fetch(`/api/users/${user.id}/languages`);\n      if (response.ok) {\n        userLanguages = await response.json();\n        if (!userLanguages || userLanguages.length === 0) {\n          userLanguages = ['en']; // Ensure at least English\n        }\n      }\n    } catch (error) {\n      console.error('Failed to fetch user languages:', error);\n    }\n    \n    editForm.reset({\n      username: user.username,\n      email: user.email,\n      password: currentPassword, // Show current password if available\n      role: user.role as 'user' | 'agent' | 'admin',\n      firstName: user.firstName || '',\n      lastName: user.lastName || '',\n      phone: user.phone || '',\n      avatar: user.avatar || '',\n      waveBalance: user.waveBalance || 0,\n      expiresAt: formattedExpiresAt,\n      isVerified: user.isVerified || false,\n      allowedLanguages: userLanguages as Array<typeof SUPPORTED_LANGUAGES[number]>,\n    });\n    setAvatarPreview(user.avatar || '');\n    setIsEditUserOpen(true);\n  };\n\n  // Currency rate handlers\n  const onCreateCurrencyRate = async (data: CreateCurrencyRateFormData) => {\n    await createCurrencyRateMutation.mutateAsync({\n      toCurrency: data.toCurrency,\n      rate: data.rate.toString(), // Convert to string for API\n      isActive: data.isActive ?? false,\n    });\n    setIsCreateCurrencyRateOpen(false);\n    currencyRateForm.reset();\n  };\n\n  const onEditCurrencyRate = async (data: UpdateCurrencyRateFormData) => {\n    if (editingCurrencyRate) {\n      await updateCurrencyRateMutation.mutateAsync({ \n        id: editingCurrencyRate.id, \n        data: {\n          rate: data.rate.toString(), // Convert to string for API\n          isActive: data.isActive ?? false,\n        }\n      });\n      setIsEditCurrencyRateOpen(false);\n      setEditingCurrencyRate(null);\n      editCurrencyRateForm.reset();\n    }\n  };\n\n  const handleEditCurrencyRate = (currencyRate: CurrencyRate) => {\n    setEditingCurrencyRate(currencyRate);\n    editCurrencyRateForm.reset({\n      rate: Number(currencyRate.rate), // Convert to number for form\n      isActive: currencyRate.isActive || false,\n    });\n    setIsEditCurrencyRateOpen(true);\n  };\n\n  const handleDeleteCurrencyRate = async (id: string) => {\n    if (confirm('Are you sure you want to deactivate this currency rate? This action cannot be undone.')) {\n      await deleteCurrencyRateMutation.mutateAsync(id);\n    }\n  };\n\n  const handleDeleteUser = async (userId: string, username: string) => {\n    if (window.confirm(`Are you sure you want to delete user \"${username}\"?`)) {\n      await deleteUserMutation.mutateAsync(userId);\n    }\n  };\n\n  const handleViewCustomerDetails = (customer: User) => {\n    setSelectedCustomer(customer);\n    setIsCustomerDetailsOpen(true);\n  };\n  \n  const handleDeleteProperty = async (propertyId: string, propertyTitle: string) => {\n    if (window.confirm(`Are you sure you want to delete property \"${propertyTitle}\"? This action cannot be undone.`)) {\n      try {\n        await deletePropertyMutation.mutateAsync(propertyId);\n        toast({\n          title: 'Success',\n          description: 'Property deleted successfully',\n        });\n      } catch (error: any) {\n        toast({\n          title: 'Error',\n          description: error.message || 'Failed to delete property',\n          variant: 'destructive',\n        });\n      }\n    }\n  };\n\n  // Reset page to 1 when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchTerm, roleFilter]);\n\n  // Filter users based on search and role\n  const filteredUsers = users.filter(u => {\n    const matchesSearch = !searchTerm || \n      u.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      u.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (u.firstName && u.firstName.toLowerCase().includes(searchTerm.toLowerCase())) ||\n      (u.lastName && u.lastName.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesRole = roleFilter === 'all' || u.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n  \n  const filteredProperties = allProperties.filter(p => {\n    const matchesSearch = !propertySearchTerm || \n      p.title.toLowerCase().includes(propertySearchTerm.toLowerCase()) ||\n      p.address.toLowerCase().includes(propertySearchTerm.toLowerCase()) ||\n      p.city.toLowerCase().includes(propertySearchTerm.toLowerCase()) ||\n      p.country.toLowerCase().includes(propertySearchTerm.toLowerCase()) ||\n      p.description?.toLowerCase().includes(propertySearchTerm.toLowerCase());\n    \n    const matchesType = propertyTypeFilter === 'all' || p.type === propertyTypeFilter;\n    \n    return matchesSearch && matchesType;\n  });\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedUsers = filteredUsers.slice(startIndex, endIndex);\n  const showPagination = filteredUsers.length > itemsPerPage;\n\n  // Statistics\n  const stats = {\n    totalUsers: users.length,\n    agents: users.filter(u => u.role === 'agent').length,\n    customers: users.filter(u => u.role === 'user').length,\n    admins: users.filter(u => u.role === 'admin').length,\n  };\n\n  if (!user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-orange-50 dark:bg-gray-900\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-orange-600 to-orange-700 dark:from-orange-800 dark:to-orange-900 shadow-lg border-b border-orange-800\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center py-4 sm:py-6 space-y-3 sm:space-y-0\">\n            <div className=\"flex items-center justify-center sm:justify-start space-x-2 sm:space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-white/10 rounded-lg\">\n                  <Shield className=\"h-6 w-6 sm:h-8 sm:w-8 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl sm:text-2xl font-bold text-white\">Admin Dashboard</h1>\n                  <p className=\"text-xs sm:text-sm text-orange-100 hidden sm:block\">Estate Management System</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-center sm:justify-end space-x-2 sm:space-x-4\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3 bg-white/10 rounded-lg px-2 sm:px-3 py-1 sm:py-2\">\n                <Avatar className=\"h-8 w-8 sm:h-10 sm:w-10\">\n                  <AvatarImage src={user.avatar || ''} />\n                  <AvatarFallback className=\"bg-white text-orange-600 font-medium\">\n                    {user.firstName?.[0]}{user.lastName?.[0] || user.username[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"hidden sm:block\">\n                  <p className=\"text-sm font-medium text-white\">{user.username}</p>\n                  <p className=\"text-xs text-orange-100\">Super Administrator</p>\n                </div>\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleLogout}\n                className=\"bg-white/10 border-white/20 text-white hover:bg-white hover:text-orange-600 transition-all duration-200\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4 sm:mr-2\" />\n                <span className=\"hidden sm:inline\">Logout</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-6 sm:mb-8\">\n          <Card className=\"bg-gradient-to-br from-orange-500 to-orange-600 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-3 sm:p-4\">\n              <CardTitle className=\"text-xs sm:text-sm font-medium text-orange-100\">Total Users</CardTitle>\n              <div className=\"p-1 sm:p-2 bg-white/20 rounded-lg\">\n                <Users className=\"h-3 w-3 sm:h-4 sm:w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-3 sm:p-4 pt-0\">\n              <div className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-white\">{stats.totalUsers}</div>\n              <p className=\"text-xs text-orange-100 mt-1 hidden sm:block\">Active accounts</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-orange-400 to-orange-500 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-3 sm:p-4\">\n              <CardTitle className=\"text-xs sm:text-sm font-medium text-orange-100\">Agents</CardTitle>\n              <div className=\"p-1 sm:p-2 bg-white/20 rounded-lg\">\n                <Building2 className=\"h-3 w-3 sm:h-4 sm:w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-3 sm:p-4 pt-0\">\n              <div className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-white\">{stats.agents}</div>\n              <p className=\"text-xs text-orange-100 mt-1 hidden sm:block\">Real estate professionals</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-orange-300 to-orange-400 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-3 sm:p-4\">\n              <CardTitle className=\"text-xs sm:text-sm font-medium text-orange-100\">Customers</CardTitle>\n              <div className=\"p-1 sm:p-2 bg-white/20 rounded-lg\">\n                <Users className=\"h-3 w-3 sm:h-4 sm:w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-3 sm:p-4 pt-0\">\n              <div className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-white\">{stats.customers}</div>\n              <p className=\"text-xs text-orange-100 mt-1 hidden sm:block\">Property seekers</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-orange-600 to-orange-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-3 sm:p-4\">\n              <CardTitle className=\"text-xs sm:text-sm font-medium text-orange-100\">Admins</CardTitle>\n              <div className=\"p-1 sm:p-2 bg-white/20 rounded-lg\">\n                <Shield className=\"h-3 w-3 sm:h-4 sm:w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-3 sm:p-4 pt-0\">\n              <div className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-white\">{stats.admins}</div>\n              <p className=\"text-xs text-orange-100 mt-1 hidden sm:block\">System administrators</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* User Management Section */}\n        <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800\">\n          <CardHeader className=\"border-b border-orange-100 dark:border-gray-700 bg-gradient-to-r from-orange-50 to-white dark:from-gray-800 dark:to-gray-800\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n              <div>\n                <CardTitle className=\"text-lg sm:text-xl text-orange-800 dark:text-orange-200 font-bold\">User Management</CardTitle>\n                <CardDescription className=\"text-orange-600 dark:text-orange-300 mt-1\">\n                  Manage real estate agencies, agents, and customers\n                </CardDescription>\n              </div>\n              <Dialog open={isCreateUserOpen} onOpenChange={(open) => {\n                setIsCreateUserOpen(open);\n                if (!open) {\n                  resetAvatarUpload();\n                }\n              }}>\n                <DialogTrigger asChild>\n                  <Button \n                    className=\"bg-orange-600 hover:bg-orange-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200 w-full sm:w-auto\"\n                    data-testid=\"button-create-user\"\n                  >\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Create User\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"w-[95vw] max-w-[95vw] sm:max-w-lg md:max-w-xl lg:max-w-2xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Create New User</DialogTitle>\n                    <DialogDescription>\n                      Add a new user to the system\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onCreateUser)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-username\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      {/* Avatar Upload Field */}\n                      <FormField\n                        control={form.control}\n                        name=\"avatar\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Profile Photo</FormLabel>\n                            <FormControl>\n                              <div className=\"space-y-4\">\n                                <div className=\"flex items-center gap-4\">\n                                  <Avatar className=\"h-16 w-16\">\n                                    <AvatarImage src={avatarPreview} />\n                                    <AvatarFallback>\n                                      <UserPlus className=\"h-8 w-8 text-gray-400\" />\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <div className=\"flex-1\">\n                                    <Input\n                                      type=\"file\"\n                                      accept=\"image/*\"\n                                      onChange={handleAvatarChange}\n                                      className=\"cursor-pointer\"\n                                      data-testid=\"input-avatar\"\n                                    />\n                                    <p className=\"text-sm text-gray-500 mt-1\">\n                                      Upload a profile photo (optional, max 5MB)\n                                    </p>\n                                  </div>\n                                </div>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" data-testid=\"input-password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"role\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Role</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-role\">\n                                  <SelectValue placeholder=\"Select a role\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"user\">Customer</SelectItem>\n                                <SelectItem value=\"agent\">Real Estate Agent</SelectItem>\n                                <SelectItem value=\"admin\">Administrator</SelectItem>\n                                <SelectItem value=\"super_admin\">Super Administrator</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-firstname\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-lastname\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"waveBalance\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Activity className=\"h-4 w-4 text-blue-500\" />\n                              Wave Balance\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                type=\"number\"\n                                min=\"0\"\n                                data-testid=\"input-wave-balance\"\n                                className=\"border-blue-200 focus:border-blue-500 focus:ring-blue-500\"\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-sm text-gray-500\">\n                              Number of waves this user can assign to their properties (0 = unlimited for admin)\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"expiresAt\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Calendar className=\"h-4 w-4 text-orange-500\" />\n                              Account Expiration Date\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                type=\"datetime-local\" \n                                data-testid=\"input-expires-at\"\n                                className=\"border-orange-200 focus:border-orange-500 focus:ring-orange-500\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-sm text-gray-500\">\n                              Leave empty for no expiration. User account will be automatically disabled after this date.\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"isVerified\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border border-orange-200 p-4\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"checkbox-verified\"\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel className=\"flex items-center gap-2 text-orange-600 font-medium\">\n                                <Shield className=\"h-4 w-4\" />\n                                Verified Customer\n                              </FormLabel>\n                              <p className=\"text-sm text-gray-500\">\n                                Grant this customer the orange verified badge. Verified customers are trusted and receive priority support.\n                              </p>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n                      \n                      {/* Language Permissions - Admin & Super Admin Only */}\n                      {(user?.role === 'admin' || user?.role === 'super_admin') && (\n                        <FormField\n                          control={form.control}\n                          name=\"allowedLanguages\"\n                          render={({ field }) => (\n                            <FormItem className=\"rounded-md border border-blue-200 p-4\">\n                              <FormLabel className=\"flex items-center gap-2 text-blue-600 font-medium\">\n                                <Languages className=\"h-4 w-4\" />\n                                Language Permissions\n                              </FormLabel>\n                              <FormControl>\n                                <div className=\"space-y-3\">\n                                  <p className=\"text-sm text-gray-500\">\n                                    Select which languages this customer can use to create content\n                                  </p>\n                                  <div className=\"flex flex-wrap gap-4\">\n                                    {SUPPORTED_LANGUAGES.map((lang) => (\n                                      <div key={lang} className=\"flex items-center space-x-2\">\n                                        <Checkbox\n                                          checked={field.value?.includes(lang) || false}\n                                          onCheckedChange={(checked) => {\n                                            const currentLanguages = field.value || ['en'];\n                                            if (checked) {\n                                              field.onChange([...currentLanguages, lang]);\n                                            } else {\n                                              // Prevent removing all languages - at least English must remain\n                                              const newLanguages = currentLanguages.filter(l => l !== lang);\n                                              if (newLanguages.length === 0) {\n                                                field.onChange(['en']);\n                                              } else {\n                                                field.onChange(newLanguages);\n                                              }\n                                            }\n                                          }}\n                                          data-testid={`checkbox-language-${lang}`}\n                                        />\n                                        <label \n                                          className=\"text-sm font-medium cursor-pointer\"\n                                          onClick={() => {\n                                            const currentLanguages = field.value || ['en'];\n                                            const isChecked = currentLanguages.includes(lang);\n                                            if (!isChecked) {\n                                              field.onChange([...currentLanguages, lang]);\n                                            } else {\n                                              const newLanguages = currentLanguages.filter(l => l !== lang);\n                                              if (newLanguages.length === 0) {\n                                                field.onChange(['en']);\n                                              } else {\n                                                field.onChange(newLanguages);\n                                              }\n                                            }\n                                          }}\n                                        >\n                                          {LANGUAGE_NAMES[lang]}\n                                        </label>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                      \n                      <div className=\"flex justify-end space-x-2 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => {\n                            setIsCreateUserOpen(false);\n                            resetAvatarUpload();\n                          }}\n                          data-testid=\"button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createUserMutation.isPending}\n                          data-testid=\"button-submit\"\n                        >\n                          {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n              \n              {/* Edit User Dialog */}\n              <Dialog open={isEditUserOpen} onOpenChange={(open) => {\n                setIsEditUserOpen(open);\n                if (!open) {\n                  setEditingUser(null);\n                  resetAvatarUpload();\n                }\n              }}>\n                <DialogContent className=\"w-[95vw] max-w-[95vw] sm:max-w-lg md:max-w-xl lg:max-w-2xl xl:max-w-3xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Edit User</DialogTitle>\n                    <DialogDescription>\n                      Update user information\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...editForm}>\n                    <form onSubmit={editForm.handleSubmit(onEditUser)} className=\"space-y-4\">\n                      <FormField\n                        control={editForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"edit-input-username\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={editForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" data-testid=\"edit-input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      {/* Avatar Upload Field */}\n                      <FormField\n                        control={editForm.control}\n                        name=\"avatar\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Profile Photo</FormLabel>\n                            <FormControl>\n                              <div className=\"space-y-4\">\n                                <div className=\"flex items-center gap-4\">\n                                  <Avatar className=\"h-16 w-16\">\n                                    <AvatarImage src={avatarPreview} />\n                                    <AvatarFallback>\n                                      <UserPlus className=\"h-8 w-8 text-gray-400\" />\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <div className=\"flex-1\">\n                                    <Input\n                                      type=\"file\"\n                                      accept=\"image/*\"\n                                      onChange={handleAvatarChange}\n                                      className=\"cursor-pointer\"\n                                      data-testid=\"edit-input-avatar\"\n                                    />\n                                    <p className=\"text-sm text-gray-500 mt-1\">\n                                      Upload a profile photo (optional, max 5MB)\n                                    </p>\n                                  </div>\n                                </div>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={editForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password (Leave blank to keep current)</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" data-testid=\"edit-input-password\" placeholder=\"Enter new password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={editForm.control}\n                        name=\"role\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Role</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"edit-select-role\">\n                                  <SelectValue placeholder=\"Select a role\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"user\">Customer</SelectItem>\n                                <SelectItem value=\"agent\">Real Estate Agent</SelectItem>\n                                <SelectItem value=\"admin\">Administrator</SelectItem>\n                                <SelectItem value=\"super_admin\">Super Administrator</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={editForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"edit-input-firstname\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={editForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"edit-input-lastname\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={editForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"edit-input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={editForm.control}\n                        name=\"waveBalance\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Activity className=\"h-4 w-4 text-blue-500\" />\n                              Wave Balance\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                type=\"number\"\n                                min=\"0\"\n                                data-testid=\"edit-input-wave-balance\"\n                                className=\"border-blue-200 focus:border-blue-500 focus:ring-blue-500\"\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-sm text-gray-500\">\n                              Number of waves this user can assign to their properties (0 = unlimited for admin)\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={editForm.control}\n                        name=\"expiresAt\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Calendar className=\"h-4 w-4 text-orange-500\" />\n                              Account Expiration Date\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                type=\"datetime-local\" \n                                data-testid=\"edit-input-expires-at\"\n                                className=\"border-orange-200 focus:border-orange-500 focus:ring-orange-500\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-sm text-gray-500\">\n                              Leave empty for no expiration. User account will be automatically disabled after this date.\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={editForm.control}\n                        name=\"isVerified\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border border-orange-200 p-4\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"edit-checkbox-verified\"\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel className=\"flex items-center gap-2 text-orange-600 font-medium\">\n                                <Shield className=\"h-4 w-4\" />\n                                Verified Customer\n                              </FormLabel>\n                              <p className=\"text-sm text-gray-500\">\n                                Grant this customer the orange verified badge. Verified customers are trusted and receive priority support.\n                              </p>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n                      \n                      {/* Language Permissions - Admin & Super Admin Only */}\n                      {(user?.role === 'admin' || user?.role === 'super_admin') && (\n                        <FormField\n                          control={editForm.control}\n                          name=\"allowedLanguages\"\n                          render={({ field }) => (\n                            <FormItem className=\"rounded-md border border-blue-200 p-4\">\n                              <FormLabel className=\"flex items-center gap-2 text-blue-600 font-medium\">\n                                <Languages className=\"h-4 w-4\" />\n                                Language Permissions\n                              </FormLabel>\n                              <FormControl>\n                                <div className=\"space-y-3\">\n                                  <p className=\"text-sm text-gray-500\">\n                                    Select which languages this customer can use to create content\n                                  </p>\n                                  <div className=\"flex flex-wrap gap-4\">\n                                    {SUPPORTED_LANGUAGES.map((lang) => (\n                                      <div key={lang} className=\"flex items-center space-x-2\">\n                                        <Checkbox\n                                          checked={field.value?.includes(lang) || false}\n                                          onCheckedChange={(checked) => {\n                                            const currentLanguages = field.value || ['en'];\n                                            if (checked) {\n                                              field.onChange([...currentLanguages, lang]);\n                                            } else {\n                                              // Prevent removing all languages - at least English must remain\n                                              const newLanguages = currentLanguages.filter(l => l !== lang);\n                                              if (newLanguages.length === 0) {\n                                                field.onChange(['en']);\n                                              } else {\n                                                field.onChange(newLanguages);\n                                              }\n                                            }\n                                          }}\n                                          data-testid={`edit-checkbox-language-${lang}`}\n                                        />\n                                        <label \n                                          className=\"text-sm font-medium cursor-pointer\"\n                                          onClick={() => {\n                                            const currentLanguages = field.value || ['en'];\n                                            const isChecked = currentLanguages.includes(lang);\n                                            if (!isChecked) {\n                                              field.onChange([...currentLanguages, lang]);\n                                            } else {\n                                              const newLanguages = currentLanguages.filter(l => l !== lang);\n                                              if (newLanguages.length === 0) {\n                                                field.onChange(['en']);\n                                              } else {\n                                                field.onChange(newLanguages);\n                                              }\n                                            }\n                                          }}\n                                        >\n                                          {LANGUAGE_NAMES[lang]}\n                                        </label>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                      \n                      <div className=\"flex justify-end space-x-2 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => {\n                            setIsEditUserOpen(false);\n                            setEditingUser(null);\n                            resetAvatarUpload();\n                          }}\n                          data-testid=\"edit-button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={editUserMutation.isPending}\n                          data-testid=\"edit-button-submit\"\n                        >\n                          {editUserMutation.isPending ? 'Updating...' : 'Update User'}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Filters */}\n            <div className=\"space-y-3 sm:space-y-4 mb-6\">\n              <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-orange-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search users...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 border-orange-200 focus:border-orange-500 focus:ring-orange-500\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3\">\n                  <Select value={roleFilter} onValueChange={setRoleFilter}>\n                    <SelectTrigger className=\"w-full sm:w-48 border-orange-200 focus:border-orange-500 focus:ring-orange-500\" data-testid=\"select-role-filter\">\n                      <SelectValue placeholder=\"Filter by role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Roles</SelectItem>\n                      <SelectItem value=\"user\">Customers</SelectItem>\n                      <SelectItem value=\"agent\">Agents</SelectItem>\n                      <SelectItem value=\"admin\">Admins</SelectItem>\n                      <SelectItem value=\"super_admin\">Super Admins</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {(user?.role === 'admin' || user?.role === 'super_admin') && (\n                    <Button\n                      variant={showPasswords ? \"default\" : \"outline\"}\n                      onClick={() => setShowPasswords(!showPasswords)}\n                      className={`flex items-center gap-2 w-full sm:w-auto transition-all duration-200 ${\n                        showPasswords \n                          ? 'bg-orange-600 hover:bg-orange-700 text-white' \n                          : 'border-orange-300 text-orange-600 hover:bg-orange-50'\n                      }`}\n                      data-testid=\"button-toggle-passwords\"\n                    >\n                      <Key className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">{showPasswords ? 'Hide Passwords' : 'Show Passwords'}</span>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Users Table */}\n            <div className=\"border border-orange-200 rounded-lg overflow-hidden\">\n              {usersLoading ? (\n                <div className=\"p-8 text-center\">\n                  <div className=\"animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                  <p>Loading users...</p>\n                </div>\n              ) : paginatedUsers.length === 0 ? (\n                <div className=\"p-8 text-center text-gray-500\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No users found</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gradient-to-r from-orange-100 to-orange-50 dark:from-gray-800 dark:to-gray-800\">\n                      <tr>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider hidden sm:table-cell\">\n                          Role\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider hidden md:table-cell\">\n                          Status\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider hidden lg:table-cell\">\n                          Expiration\n                        </th>\n                        {(user?.role === 'admin' || user?.role === 'super_admin') && showPasswords && (\n                          <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider hidden lg:table-cell\">\n                            Password\n                          </th>\n                        )}\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider hidden lg:table-cell\">\n                          Created\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-right text-xs font-semibold text-orange-800 dark:text-orange-200 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                      {paginatedUsers.map((u) => (\n                        <tr key={u.id} data-testid={`user-row-${u.id}`} className=\"hover:bg-orange-50/50 dark:hover:bg-gray-800/50 transition-colors duration-150\">\n                          <td className=\"px-3 sm:px-6 py-4\">\n                            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                              <Avatar className=\"h-8 w-8 sm:h-10 sm:w-10 ring-2 ring-orange-200\">\n                                <AvatarImage src={u.avatar || ''} />\n                                <AvatarFallback className=\"bg-orange-100 text-orange-700 font-medium\">\n                                  {u.firstName?.[0]}{u.lastName?.[0] || u.username[0]}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"min-w-0 flex-1\">\n                                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                                  {u.firstName && u.lastName ? `${u.firstName} ${u.lastName}` : u.username}\n                                </div>\n                                <div className=\"text-xs sm:text-sm text-gray-500 truncate\">{u.email}</div>\n                                <div className=\"sm:hidden mt-1 flex items-center space-x-2\">\n                                  <Badge \n                                    variant={u.role === 'admin' ? 'destructive' : u.role === 'agent' ? 'default' : 'secondary'}\n                                    className=\"text-xs\"\n                                    data-testid={`badge-role-${u.id}`}\n                                  >\n                                    {u.role === 'agent' ? 'Agent' : u.role === 'admin' ? 'Admin' : 'Customer'}\n                                  </Badge>\n                                  <Badge \n                                    variant={u.isVerified ? 'default' : 'secondary'}\n                                    className={`text-xs md:hidden ${\n                                      u.isVerified \n                                        ? 'bg-orange-100 text-orange-800 hover:bg-orange-200' \n                                        : 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'\n                                    }`}\n                                    data-testid={`badge-status-${u.id}`}\n                                  >\n                                    {u.isVerified ? 'Verified' : 'Unverified'}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-3 sm:px-6 py-4 whitespace-nowrap hidden sm:table-cell\">\n                            <Badge \n                              variant={u.role === 'admin' ? 'destructive' : u.role === 'agent' ? 'default' : 'secondary'}\n                              className=\"bg-gradient-to-r text-xs font-medium\"\n                              data-testid={`badge-role-${u.id}`}\n                            >\n                              {u.role === 'agent' ? 'Real Estate Agent' : \n                               u.role === 'admin' ? 'Administrator' : 'Customer'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-3 sm:px-6 py-4 whitespace-nowrap hidden md:table-cell\">\n                            <Badge \n                              variant={u.isVerified ? 'default' : 'secondary'}\n                              className={`text-xs font-medium ${\n                                u.isVerified \n                                  ? 'bg-orange-100 text-orange-800 hover:bg-orange-200 border-orange-300' \n                                  : 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'\n                              }`}\n                              data-testid={`badge-status-${u.id}`}\n                            >\n                              {u.isVerified ? 'Verified' : 'Pending'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-3 sm:px-6 py-4 whitespace-nowrap hidden lg:table-cell\">\n                            {(() => {\n                              const daysUntilExpiration = calculateDaysUntilExpiration(u.expiresAt);\n                              const { status, color, bgColor } = getExpirationStatus(daysUntilExpiration);\n                              return (\n                                <Badge \n                                  className={`text-xs font-medium ${color} ${bgColor} border-0`}\n                                  data-testid={`badge-expiration-${u.id}`}\n                                >\n                                  {status}\n                                </Badge>\n                              );\n                            })()}\n                          </td>\n                          {(user?.role === 'admin' || user?.role === 'super_admin') && showPasswords && (\n                            <td className=\"px-3 sm:px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden lg:table-cell\">\n                              <code className=\"bg-orange-50 dark:bg-gray-800 text-orange-700 dark:text-orange-300 px-2 py-1 rounded text-xs border border-orange-200\">\n                                {usersWithPasswords.find(up => up.id === u.id)?.password || '••••••••'}\n                              </code>\n                            </td>\n                          )}\n                          <td className=\"px-3 sm:px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden lg:table-cell\">\n                            <div className=\"text-xs\">\n                              {u.createdAt ? new Date(u.createdAt).toLocaleDateString() : 'N/A'}\n                            </div>\n                          </td>\n                          <td className=\"px-3 sm:px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                            <div className=\"flex gap-1 sm:gap-2 justify-end\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleViewCustomerDetails(u)}\n                                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50 border-blue-200 p-1 sm:p-2\"\n                                data-testid={`button-view-${u.id}`}\n                              >\n                                <Eye className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                              </Button>\n                              {(user?.role === 'admin' || user?.role === 'super_admin') && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleEditUser(u)}\n                                  className=\"text-orange-600 hover:text-orange-700 hover:bg-orange-50 border-orange-200 p-1 sm:p-2\"\n                                  data-testid={`button-edit-${u.id}`}\n                                >\n                                  <Edit className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                </Button>\n                              )}\n                              {u.id !== user.id && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteUser(u.id, u.username)}\n                                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200 p-1 sm:p-2\"\n                                  data-testid={`button-delete-${u.id}`}\n                                >\n                                  <Trash2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </div>\n\n            {/* Pagination */}\n            {showPagination && (\n              <div className=\"mt-6 px-4 py-3 bg-white dark:bg-gray-800 border-t border-orange-200 dark:border-gray-700 rounded-b-lg\">\n                <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0\">\n                  <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    Showing {startIndex + 1} to {Math.min(endIndex, filteredUsers.length)} of {filteredUsers.length} users\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage === 1}\n                      className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                      data-testid=\"button-prev-page\"\n                    >\n                      Previous\n                    </Button>\n                    \n                    <div className=\"flex items-center space-x-1\">\n                      {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                        let pageNumber;\n                        if (totalPages <= 5) {\n                          pageNumber = i + 1;\n                        } else if (currentPage <= 3) {\n                          pageNumber = i + 1;\n                        } else if (currentPage >= totalPages - 2) {\n                          pageNumber = totalPages - 4 + i;\n                        } else {\n                          pageNumber = currentPage - 2 + i;\n                        }\n                        \n                        return (\n                          <Button\n                            key={pageNumber}\n                            variant={currentPage === pageNumber ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(pageNumber)}\n                            className={`w-8 h-8 p-0 ${\n                              currentPage === pageNumber\n                                ? 'bg-orange-600 text-white hover:bg-orange-700'\n                                : 'text-orange-600 border-orange-200 hover:bg-orange-50'\n                            }`}\n                            data-testid={`button-page-${pageNumber}`}\n                          >\n                            {pageNumber}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                      disabled={currentPage === totalPages}\n                      className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                      data-testid=\"button-next-page\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Client Location Tracking Section - Admin and Super Admin */}\n        {(user?.role === 'admin' || user?.role === 'super_admin') && (\n          <ClientLocationTrackingCard />\n        )}\n\n        {/* Currency Rate Management Section - Admin and Super Admin */}\n        {(user?.role === 'admin' || user?.role === 'super_admin') && (\n          <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800 mt-8\">\n            <CardHeader className=\"border-b border-orange-100 dark:border-gray-700 bg-gradient-to-r from-orange-50 to-white dark:from-gray-800 dark:to-gray-800\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div>\n                  <CardTitle className=\"text-lg sm:text-xl text-orange-800 dark:text-orange-200 font-bold\">Currency Exchange Rates</CardTitle>\n                  <CardDescription className=\"text-orange-600 dark:text-orange-300 mt-1\">\n                    Manage USD exchange rates for supported currencies (IQD, EUR, AED)\n                  </CardDescription>\n                </div>\n                <Dialog open={isCreateCurrencyRateOpen} onOpenChange={setIsCreateCurrencyRateOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      className=\"bg-orange-600 hover:bg-orange-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200 w-full sm:w-auto\"\n                      data-testid=\"button-create-currency-rate\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Exchange Rate\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Add New Exchange Rate</DialogTitle>\n                      <DialogDescription>\n                        Set the exchange rate from 1 USD to the target currency\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...currencyRateForm}>\n                      <form onSubmit={currencyRateForm.handleSubmit(onCreateCurrencyRate)} className=\"space-y-6\">\n                        <FormField\n                          control={currencyRateForm.control}\n                          name=\"toCurrency\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Target Currency</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-currency\">\n                                    <SelectValue placeholder=\"Select target currency\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"IQD\">Iraqi Dinar (IQD)</SelectItem>\n                                  <SelectItem value=\"EUR\">Euro (EUR)</SelectItem>\n                                  <SelectItem value=\"AED\">UAE Dirham (AED)</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={currencyRateForm.control}\n                          name=\"rate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Exchange Rate (1 USD =)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"number\"\n                                  step=\"0.000001\"\n                                  placeholder=\"e.g., 1173.5\"\n                                  data-testid=\"input-exchange-rate\"\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={currencyRateForm.control}\n                          name=\"isActive\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel className=\"text-base\">Active Rate</FormLabel>\n                                <FormDescription>\n                                  Make this rate active for user transactions\n                                </FormDescription>\n                              </div>\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value ?? false}\n                                  onCheckedChange={field.onChange}\n                                  data-testid=\"checkbox-is-active\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateCurrencyRateOpen(false)} data-testid=\"button-cancel-create\">\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={createCurrencyRateMutation.isPending} data-testid=\"button-submit-create\">\n                            {createCurrencyRateMutation.isPending ? 'Creating...' : 'Add Rate'}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"p-6\">\n              {currencyRatesLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600\"></div>\n                </div>\n              ) : currencyRates.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No currency exchange rates configured yet.</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b border-orange-200 dark:border-gray-600\">\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">From</th>\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">To</th>\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Exchange Rate</th>\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Status</th>\n                        <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Last Updated</th>\n                        <th className=\"text-right py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {currencyRates.map((rate) => (\n                        <tr key={rate.id} className=\"border-b border-gray-100 dark:border-gray-700 hover:bg-orange-25 dark:hover:bg-gray-750\" data-testid={`row-currency-rate-${rate.id}`}>\n                          <td className=\"py-4 px-4 font-medium\">{rate.fromCurrency}</td>\n                          <td className=\"py-4 px-4 font-medium\">{rate.toCurrency}</td>\n                          <td className=\"py-4 px-4 font-mono text-lg\">{Number(rate.rate).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 6 })}</td>\n                          <td className=\"py-4 px-4\">\n                            <Badge variant={rate.isActive ? 'default' : 'secondary'} className={rate.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'} data-testid={`badge-status-${rate.id}`}>\n                              {rate.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4 px-4 text-sm text-gray-500\">\n                            {new Date(rate.updatedAt || rate.createdAt || new Date()).toLocaleDateString()}\n                          </td>\n                          <td className=\"py-4 px-4 text-right space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditCurrencyRate(rate)}\n                              className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                              data-testid={`button-edit-${rate.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteCurrencyRate(rate.id)}\n                              disabled={deleteCurrencyRateMutation.isPending}\n                              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                              data-testid={`button-delete-${rate.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* All Properties Management - Super Admin Only */}\n        {user?.role === 'super_admin' && (\n          <Card className=\"shadow-lg border-0 bg-white dark:bg-gray-800 mt-8\">\n            <CardHeader className=\"border-b border-orange-100 dark:border-gray-700 bg-gradient-to-r from-orange-50 to-white dark:from-gray-800 dark:to-gray-800\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div>\n                  <CardTitle className=\"text-lg sm:text-xl text-orange-800 dark:text-orange-200 font-bold flex items-center gap-2\">\n                    <Building2 className=\"h-6 w-6\" />\n                    All Properties Management\n                  </CardTitle>\n                  <CardDescription className=\"text-orange-600 dark:text-orange-300 mt-1\">\n                    View and manage all properties in the system ({filteredProperties.length} properties)\n                  </CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {/* Filters */}\n              <div className=\"space-y-3 sm:space-y-4 mb-6\">\n                <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-orange-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search properties by title, address, city...\"\n                      value={propertySearchTerm}\n                      onChange={(e) => setPropertySearchTerm(e.target.value)}\n                      className=\"pl-10 border-orange-200 focus:border-orange-500 focus:ring-orange-500\"\n                      data-testid=\"input-property-search\"\n                    />\n                  </div>\n                  <Select value={propertyTypeFilter} onValueChange={setPropertyTypeFilter}>\n                    <SelectTrigger className=\"w-full sm:w-48 border-orange-200 focus:border-orange-500 focus:ring-orange-500\" data-testid=\"select-property-type-filter\">\n                      <SelectValue placeholder=\"Filter by type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"apartment\">Apartment</SelectItem>\n                      <SelectItem value=\"house\">House</SelectItem>\n                      <SelectItem value=\"villa\">Villa</SelectItem>\n                      <SelectItem value=\"land\">Land</SelectItem>\n                      <SelectItem value=\"commercial\">Commercial</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Properties Table */}\n              <div className=\"border border-orange-200 rounded-lg overflow-hidden\">\n                {propertiesLoading ? (\n                  <div className=\"p-8 text-center\">\n                    <div className=\"animate-spin h-8 w-8 border-4 border-orange-600 border-t-transparent rounded-full mx-auto\"></div>\n                    <p className=\"mt-4 text-gray-600\">Loading properties...</p>\n                  </div>\n                ) : filteredProperties.length === 0 ? (\n                  <div className=\"p-8 text-center text-gray-500\">\n                    <Building2 className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No properties found</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border-collapse\">\n                      <thead>\n                        <tr className=\"border-b border-orange-200 dark:border-gray-600 bg-orange-50 dark:bg-gray-700\">\n                          <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Image</th>\n                          <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Title</th>\n                          <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Type</th>\n                          <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Location</th>\n                          <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Price</th>\n                          <th className=\"text-left py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Status</th>\n                          <th className=\"text-right py-3 px-4 font-semibold text-gray-700 dark:text-gray-300\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredProperties.map((property) => (\n                          <tr key={property.id} className=\"border-b border-gray-100 dark:border-gray-700 hover:bg-orange-25 dark:hover:bg-gray-750\" data-testid={`row-property-${property.id}`}>\n                            <td className=\"py-3 px-4\">\n                              {property.images && property.images.length > 0 ? (\n                                <img\n                                  src={normalizePropertyImageUrl(property.images[0])}\n                                  alt={property.title}\n                                  className=\"w-16 h-16 object-cover rounded\"\n                                />\n                              ) : (\n                                <div className=\"w-16 h-16 bg-gray-200 rounded flex items-center justify-center\">\n                                  <ImageIcon className=\"h-6 w-6 text-gray-400\" />\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"max-w-xs\">\n                                <p className=\"font-semibold text-gray-800 dark:text-gray-200 truncate\">{property.title}</p>\n                                <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">{property.bedrooms}bd • {property.bathrooms}ba • {property.area}m²</p>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <Badge variant=\"outline\" className=\"capitalize\">{property.type}</Badge>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"max-w-xs\">\n                                <p className=\"text-sm text-gray-700 dark:text-gray-300 truncate\">{property.city}</p>\n                                <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">{property.country}</p>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex flex-col\">\n                                <span className=\"font-bold text-green-600\">${parseFloat(property.price).toLocaleString()}</span>\n                                <Badge className={`text-xs mt-1 ${\n                                  property.listingType === 'sale' \n                                    ? 'bg-red-100 text-red-800 hover:bg-red-200' \n                                    : 'bg-green-100 text-green-800 hover:bg-green-200'\n                                }`}>\n                                  {property.listingType === 'sale' ? 'Sale' : 'Rent'}\n                                </Badge>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <Badge variant={property.status === 'active' ? 'default' : 'secondary'} className={property.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>\n                                {property.status}\n                              </Badge>\n                            </td>\n                            <td className=\"py-3 px-4 text-right\">\n                              <div className=\"flex justify-end gap-2\">\n                                <Link href={`/en/properties/${property.slug || property.id}`}>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                                    data-testid={`button-view-${property.id}`}\n                                  >\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                </Link>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteProperty(property.id, property.title)}\n                                  disabled={deletePropertyMutation.isPending}\n                                  className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                                  data-testid={`button-delete-property-${property.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Edit Currency Rate Modal */}\n        <Dialog open={isEditCurrencyRateOpen} onOpenChange={setIsEditCurrencyRateOpen}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Exchange Rate</DialogTitle>\n              <DialogDescription>\n                Update the exchange rate from 1 USD to {editingCurrencyRate?.toCurrency}\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editCurrencyRateForm}>\n              <form onSubmit={editCurrencyRateForm.handleSubmit(onEditCurrencyRate)} className=\"space-y-6\">\n                <FormField\n                  control={editCurrencyRateForm.control}\n                  name=\"rate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exchange Rate (1 USD = {editingCurrencyRate?.toCurrency})</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"number\"\n                          step=\"0.000001\"\n                          placeholder=\"e.g., 1173.5\"\n                          data-testid=\"input-edit-exchange-rate\"\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editCurrencyRateForm.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Active Rate</FormLabel>\n                        <FormDescription>\n                          Make this rate active for user transactions\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value ?? false}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"checkbox-edit-is-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditCurrencyRateOpen(false)} data-testid=\"button-cancel-edit\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateCurrencyRateMutation.isPending} data-testid=\"button-submit-edit\">\n                    {updateCurrencyRateMutation.isPending ? 'Updating...' : 'Update Rate'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Customer Details Modal */}\n        <Dialog open={isCustomerDetailsOpen} onOpenChange={setIsCustomerDetailsOpen}>\n          <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-3\">\n                <Avatar className=\"h-12 w-12 ring-2 ring-orange-200\">\n                  <AvatarImage src={selectedCustomer?.avatar || ''} />\n                  <AvatarFallback className=\"bg-orange-100 text-orange-700 font-medium text-lg\">\n                    {selectedCustomer?.firstName?.[0]}{selectedCustomer?.lastName?.[0] || selectedCustomer?.username[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h2 className=\"text-2xl font-bold\">\n                    {selectedCustomer?.firstName && selectedCustomer?.lastName \n                      ? `${selectedCustomer.firstName} ${selectedCustomer.lastName}` \n                      : selectedCustomer?.username}\n                  </h2>\n                  <p className=\"text-gray-600\">{selectedCustomer?.email}</p>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Complete customer profile and property portfolio\n              </DialogDescription>\n            </DialogHeader>\n\n            {selectedCustomer && (\n              <Tabs defaultValue=\"overview\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"properties\">Properties</TabsTrigger>\n                  <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-6 mt-6\">\n                  {/* Customer Information Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {/* Basic Info */}\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm font-medium flex items-center\">\n                          <Users className=\"h-4 w-4 mr-2\" />\n                          Customer Details\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Username:</span>\n                          <span className=\"font-medium\">{selectedCustomer.username}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Role:</span>\n                          <Badge variant={selectedCustomer.role === 'admin' ? 'destructive' : 'secondary'}>\n                            {selectedCustomer.role === 'agent' ? 'Agent' : selectedCustomer.role === 'admin' ? 'Admin' : 'Customer'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Status:</span>\n                          <Badge \n                            variant={selectedCustomer.isVerified ? 'default' : 'secondary'}\n                            className={`${\n                              selectedCustomer.isVerified \n                                ? 'bg-orange-100 text-orange-800 hover:bg-orange-200 border-orange-300' \n                                : 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'\n                            }`}\n                          >\n                            {selectedCustomer.isVerified ? 'Verified' : 'Pending'}\n                          </Badge>\n                        </div>\n                        {selectedCustomer.phone && (\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600\">Phone:</span>\n                            <span className=\"font-medium\">{selectedCustomer.phone}</span>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                    {/* Statistics */}\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm font-medium flex items-center\">\n                          <BarChart3 className=\"h-4 w-4 mr-2\" />\n                          Portfolio Stats\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Total Properties:</span>\n                          <span className=\"font-bold text-lg text-orange-600\">{customerProperties.length}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">For Sale:</span>\n                          <span className=\"font-medium\">{customerProperties.filter(p => p.listingType === 'sale').length}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">For Rent:</span>\n                          <span className=\"font-medium\">{customerProperties.filter(p => p.listingType === 'rent').length}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Total Value:</span>\n                          <span className=\"font-medium text-green-600\">\n                            ${customerProperties.reduce((sum, p) => sum + (p.price || 0), 0).toLocaleString()}\n                          </span>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Account Info */}\n                    <Card>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-sm font-medium flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Account Info\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Joined:</span>\n                          <span className=\"font-medium\">\n                            {selectedCustomer.createdAt ? new Date(selectedCustomer.createdAt).toLocaleDateString() : 'N/A'}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Expiration:</span>\n                          <span className=\"font-medium\">\n                            {(() => {\n                              const daysUntilExpiration = calculateDaysUntilExpiration(selectedCustomer.expiresAt);\n                              const { status, color } = getExpirationStatus(daysUntilExpiration);\n                              return <span className={color}>{status}</span>;\n                            })()}\n                          </span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"properties\" className=\"space-y-6 mt-6\">\n                  {/* Properties Section */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center justify-between\">\n                        <span className=\"flex items-center\">\n                          <Building2 className=\"h-5 w-5 mr-2\" />\n                          Properties Portfolio ({customerProperties.length})\n                        </span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {customerPropertiesLoading ? (\n                        <div className=\"flex items-center justify-center py-8\">\n                          <div className=\"animate-spin h-8 w-8 border-4 border-blue-600 border-t-transparent rounded-full\"></div>\n                          <span className=\"ml-3\">Loading properties...</span>\n                        </div>\n                      ) : customerProperties.length === 0 ? (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <Building2 className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                          <p>No properties found for this customer</p>\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          {customerProperties.map((property) => (\n                            <Card key={property.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                              <div className=\"relative\">\n                                {property.images && property.images.length > 0 ? (\n                                  <img\n                                    src={normalizePropertyImageUrl(property.images[0].imageUrl || property.images[0])}\n                                    alt={property.title}\n                                    className=\"w-full h-32 object-cover\"\n                                  />\n                                ) : (\n                                  <div className=\"w-full h-32 bg-gray-200 flex items-center justify-center\">\n                                    <ImageIcon className=\"h-8 w-8 text-gray-400\" />\n                                  </div>\n                                )}\n                                <Badge \n                                  className={`absolute top-2 right-2 ${\n                                    property.listingType === 'sale' \n                                      ? 'bg-red-500 hover:bg-red-600' \n                                      : 'bg-green-500 hover:bg-green-600'\n                                  }`}\n                                >\n                                  {property.listingType === 'sale' ? 'For Sale' : 'For Rent'}\n                                </Badge>\n                              </div>\n                              <CardContent className=\"p-4\">\n                                <h3 className=\"font-semibold text-sm mb-2 line-clamp-1\">{property.title}</h3>\n                                <div className=\"space-y-1 text-xs text-gray-600\">\n                                  <div className=\"flex items-center\">\n                                    <MapPin className=\"h-3 w-3 mr-1\" />\n                                    <span className=\"line-clamp-1\">{property.location}</span>\n                                  </div>\n                                  <div className=\"flex items-center\">\n                                    <Home className=\"h-3 w-3 mr-1\" />\n                                    <span>{property.type}</span>\n                                  </div>\n                                  <div className=\"flex items-center justify-between mt-2\">\n                                    <div className=\"flex items-center\">\n                                      <DollarSign className=\"h-3 w-3 mr-1\" />\n                                      <span className=\"font-bold text-green-600\">\n                                        ${property.price?.toLocaleString()}\n                                      </span>\n                                    </div>\n                                    <div className=\"text-xs text-gray-500\">\n                                      {property.bedrooms}bd • {property.bathrooms}ba\n                                    </div>\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"analytics\" className=\"mt-6\">\n                  <CustomerAnalytics \n                    customerId={selectedCustomer.id} \n                    customerName={selectedCustomer.firstName && selectedCustomer.lastName \n                      ? `${selectedCustomer.firstName} ${selectedCustomer.lastName}` \n                      : selectedCustomer.username}\n                  />\n                </TabsContent>\n              </Tabs>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":119491},"server/storageFactory.ts":{"content":"import { IStorage } from \"./storage\";\nimport { MemStorage } from \"./memStorage\";\nimport { initializeDb } from \"./db\";\n\n// Storage factory that determines the best storage implementation to use\nclass StorageFactory {\n  private static instance: IStorage | null = null;\n  private static isInitialized = false;\n\n  static async getStorage(): Promise<IStorage> {\n    if (this.instance && this.isInitialized) {\n      return this.instance;\n    }\n\n    // Check if MySQL VPS database is explicitly configured\n    const isVpsConfigured = process.env.MYSQL_URL;\n    \n    try {\n      await initializeDb();\n      console.log(\"✅ MySQL database initialized successfully\");\n      \n      // Create DatabaseStorage instance\n      const { DatabaseStorage } = await import(\"./storage\");\n      this.instance = new DatabaseStorage();\n      console.log(\"🔗 Using MySQL DatabaseStorage\");\n      \n      // Initialize default users if they don't exist\n      await this.initializeDefaultUsers(this.instance);\n    } catch (error) {\n      // If VPS database is configured but failing, don't fall back to MemStorage\n      if (isVpsConfigured) {\n        console.error(\"❌ VPS database is configured but connection failed!\");\n        console.error(\"🔧 Fix the database connection issue before proceeding.\");\n        console.error(\"💡 Check IP permissions and database credentials.\");\n        throw new Error(`VPS database connection failed: ${error}`);\n      }\n      \n      // Only fall back to MemStorage if no database is configured (local dev)\n      console.warn(\"⚠️ No database configured, using in-memory storage for development\");\n      console.warn(\"💡 Set MYSQL_URL environment variable to use a database\");\n      this.instance = new MemStorage();\n      console.log(\"💾 Using MemStorage (in-memory) - DEVELOPMENT ONLY\");\n    }\n\n    this.isInitialized = true;\n    return this.instance;\n  }\n\n  // For synchronous access after initialization\n  static getInstance(): IStorage {\n    if (!this.instance || !this.isInitialized) {\n      throw new Error(\"Storage not initialized. Call getStorage() first.\");\n    }\n    return this.instance!;\n  }\n\n  // Initialize default users in MySQL if they don't exist\n  private static async initializeDefaultUsers(storage: IStorage): Promise<void> {\n    try {\n      // Check if admin user exists\n      const adminUser = await storage.getUserByUsername('admin');\n      \n      if (!adminUser) {\n        console.log('🔧 Creating default admin user...');\n        \n        // Create admin user\n        await storage.createUser({\n          username: 'admin',\n          email: 'admin@estateai.com',\n          password: 'admin123', // Will be hashed by createUser\n          role: 'super_admin',\n          firstName: 'System',\n          lastName: 'Admin',\n          phone: '+964 750 000 0000',\n          isVerified: true\n        });\n        \n        console.log('✅ Default admin user created');\n        console.log('🔑 Username: admin, Password: admin123');\n      }\n      \n      // Check if agent user exists\n      const agentUser = await storage.getUserByUsername('john_agent');\n      \n      if (!agentUser) {\n        console.log('🔧 Creating default agent user...');\n        \n        // Create agent user\n        await storage.createUser({\n          username: 'john_agent',\n          email: 'john@estateai.com',\n          password: 'agent123', // Will be hashed by createUser\n          role: 'agent',\n          firstName: 'John',\n          lastName: 'Smith',\n          phone: '+964 750 123 4567',\n          isVerified: true\n        });\n        \n        console.log('✅ Default agent user created');\n        console.log('🔑 Username: john_agent, Password: agent123');\n      }\n      \n      if (adminUser && agentUser) {\n        console.log('ℹ️ Default users already exist in database');\n      }\n      \n    } catch (error) {\n      console.error('❌ Error initializing default users:', error);\n    }\n  }\n}\n\nexport { StorageFactory };","size_bytes":3958},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { mysqlTable, text, varchar, int, decimal, boolean, timestamp, uniqueIndex } from \"drizzle-orm/mysql-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Language constants\nexport const SUPPORTED_LANGUAGES = [\"en\", \"ar\", \"kur\"] as const;\nexport const LANGUAGE_NAMES = {\n  en: \"English\",\n  ar: \"Arabic\", \n  kur: \"Kurdish Sorani\"\n} as const;\nexport type Language = typeof SUPPORTED_LANGUAGES[number];\n\n// Users table (no JSON columns)\nexport const users = mysqlTable(\"users\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  username: varchar(\"username\", { length: 191 }).notNull().unique(),\n  email: varchar(\"email\", { length: 320 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"user\"),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  avatar: text(\"avatar\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  waveBalance: int(\"wave_balance\").default(10),\n  expiresAt: timestamp(\"expires_at\"),\n  isExpired: boolean(\"is_expired\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User languages table (normalized from users.allowed_languages JSON)\nexport const userLanguages = mysqlTable(\"user_languages\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  userId: varchar(\"user_id\", { length: 36 }).notNull().references(() => users.id, { onDelete: 'cascade' }),\n  language: varchar(\"language\", { length: 3 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserLanguage: uniqueIndex(\"unique_user_language\").on(table.userId, table.language),\n}));\n\n// Waves table\nexport const waves = mysqlTable(\"waves\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  color: varchar(\"color\", { length: 7 }).default(\"#3B82F6\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\", { length: 36 }).references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Properties table (no JSON columns)\nexport const properties = mysqlTable(\"properties\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { length: 50 }).notNull(),\n  listingType: varchar(\"listing_type\", { length: 20 }).notNull(),\n  price: decimal(\"price\", { precision: 12, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).default(\"USD\"),\n  bedrooms: int(\"bedrooms\"),\n  bathrooms: int(\"bathrooms\"),\n  area: int(\"area\"),\n  address: text(\"address\").notNull(),\n  city: varchar(\"city\", { length: 100 }).notNull(),\n  country: varchar(\"country\", { length: 100 }).notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  status: varchar(\"status\", { length: 16 }).default(\"active\"),\n  language: varchar(\"language\", { length: 3 }).notNull().default(\"en\"),\n  agentId: varchar(\"agent_id\", { length: 36 }).references(() => users.id),\n  contactPhone: varchar(\"contact_phone\", { length: 20 }),\n  waveId: varchar(\"wave_id\", { length: 36 }).references(() => waves.id),\n  views: int(\"views\").default(0),\n  isFeatured: boolean(\"is_featured\").default(false),\n  slug: varchar(\"slug\", { length: 255 }).unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Property images table (normalized from properties.images JSON)\nexport const propertyImages = mysqlTable(\"property_images\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  propertyId: varchar(\"property_id\", { length: 36 }).notNull().references(() => properties.id, { onDelete: 'cascade' }),\n  imageUrl: text(\"image_url\").notNull(),\n  sortOrder: int(\"sort_order\").default(0),\n  altText: varchar(\"alt_text\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Property amenities table (normalized from properties.amenities JSON)\nexport const propertyAmenities = mysqlTable(\"property_amenities\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  propertyId: varchar(\"property_id\", { length: 36 }).notNull().references(() => properties.id, { onDelete: 'cascade' }),\n  amenity: varchar(\"amenity\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniquePropertyAmenity: uniqueIndex(\"unique_property_amenity\").on(table.propertyId, table.amenity),\n}));\n\n// Property features table (normalized from properties.features JSON)\nexport const propertyFeatures = mysqlTable(\"property_features\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  propertyId: varchar(\"property_id\", { length: 36 }).notNull().references(() => properties.id, { onDelete: 'cascade' }),\n  feature: varchar(\"feature\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniquePropertyFeature: uniqueIndex(\"unique_property_feature\").on(table.propertyId, table.feature),\n}));\n\n// Inquiries table\nexport const inquiries = mysqlTable(\"inquiries\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  propertyId: varchar(\"property_id\", { length: 36 }).references(() => properties.id),\n  userId: varchar(\"user_id\", { length: 36 }).references(() => users.id),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  email: varchar(\"email\", { length: 320 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\", { length: 16 }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Favorites table\nexport const favorites = mysqlTable(\"favorites\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).references(() => users.id, { onDelete: 'cascade' }),\n  propertyId: varchar(\"property_id\", { length: 36 }).references(() => properties.id, { onDelete: 'cascade' }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserPropertyFavorite: uniqueIndex(\"unique_user_property_favorite\").on(table.userId, table.propertyId),\n}));\n\n// Search history table\nexport const searchHistory = mysqlTable(\"search_history\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).references(() => users.id),\n  query: text(\"query\").notNull(),\n  results: int(\"results\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Search filters table (normalized from search_history.filters JSON)\nexport const searchFilters = mysqlTable(\"search_filters\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  searchId: varchar(\"search_id\", { length: 36 }).notNull().references(() => searchHistory.id, { onDelete: 'cascade' }),\n  filterKey: varchar(\"filter_key\", { length: 50 }).notNull(),\n  filterValue: varchar(\"filter_value\", { length: 200 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customer activity table\nexport const customerActivity = mysqlTable(\"customer_activity\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).notNull().references(() => users.id),\n  activityType: varchar(\"activity_type\", { length: 50 }).notNull(),\n  propertyId: varchar(\"property_id\", { length: 36 }).references(() => properties.id),\n  points: int(\"points\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activity metadata table (normalized from customer_activity.metadata JSON)\nexport const activityMetadata = mysqlTable(\"activity_metadata\", {\n  id: int(\"id\").primaryKey().autoincrement(),\n  activityId: varchar(\"activity_id\", { length: 36 }).notNull().references(() => customerActivity.id, { onDelete: 'cascade' }),\n  metadataKey: varchar(\"metadata_key\", { length: 50 }).notNull(),\n  metadataValue: text(\"metadata_value\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customer points table\nexport const customerPoints = mysqlTable(\"customer_points\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).notNull().unique().references(() => users.id),\n  totalPoints: int(\"total_points\").default(0),\n  currentLevel: varchar(\"current_level\", { length: 20 }).default(\"Bronze\"),\n  pointsThisMonth: int(\"points_this_month\").default(0),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Currency rates table\nexport const currencyRates = mysqlTable(\"currency_rates\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  fromCurrency: varchar(\"from_currency\", { length: 3 }).notNull().default(\"USD\"),\n  toCurrency: varchar(\"to_currency\", { length: 3 }).notNull(),\n  rate: decimal(\"rate\", { precision: 12, scale: 6 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  setBy: varchar(\"set_by\", { length: 36 }).references(() => users.id),\n  effectiveDate: timestamp(\"effective_date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Client locations table (no JSON metadata)\nexport const clientLocations = mysqlTable(\"client_locations\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).references(() => users.id),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }).notNull(),\n  accuracy: int(\"accuracy\"),\n  source: varchar(\"source\", { length: 32 }).default(\"map_button\"),\n  userAgent: text(\"user_agent\"),\n  language: varchar(\"language\", { length: 10 }),\n  permissionStatus: varchar(\"permission_status\", { length: 20 }),\n  city: varchar(\"city\", { length: 100 }),\n  country: varchar(\"country\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customer wave permissions table\nexport const customerWavePermissions = mysqlTable(\"customer_wave_permissions\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).notNull().references(() => users.id),\n  waveId: varchar(\"wave_id\", { length: 36 }).notNull().references(() => waves.id),\n  maxProperties: int(\"max_properties\").notNull().default(1),\n  usedProperties: int(\"used_properties\").default(0),\n  grantedBy: varchar(\"granted_by\", { length: 36 }).references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  properties: many(properties),\n  inquiries: many(inquiries),\n  favorites: many(favorites),\n  searchHistory: many(searchHistory),\n  customerActivity: many(customerActivity),\n  customerPoints: many(customerPoints),\n  wavePermissions: many(customerWavePermissions),\n  createdWaves: many(waves),\n  clientLocations: many(clientLocations),\n  userLanguages: many(userLanguages),\n}));\n\nexport const userLanguagesRelations = relations(userLanguages, ({ one }) => ({\n  user: one(users, {\n    fields: [userLanguages.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const propertiesRelations = relations(properties, ({ one, many }) => ({\n  agent: one(users, {\n    fields: [properties.agentId],\n    references: [users.id],\n  }),\n  wave: one(waves, {\n    fields: [properties.waveId],\n    references: [waves.id],\n  }),\n  inquiries: many(inquiries),\n  favorites: many(favorites),\n  images: many(propertyImages),\n  amenities: many(propertyAmenities),\n  features: many(propertyFeatures),\n}));\n\nexport const propertyImagesRelations = relations(propertyImages, ({ one }) => ({\n  property: one(properties, {\n    fields: [propertyImages.propertyId],\n    references: [properties.id],\n  }),\n}));\n\nexport const propertyAmenitiesRelations = relations(propertyAmenities, ({ one }) => ({\n  property: one(properties, {\n    fields: [propertyAmenities.propertyId],\n    references: [properties.id],\n  }),\n}));\n\nexport const propertyFeaturesRelations = relations(propertyFeatures, ({ one }) => ({\n  property: one(properties, {\n    fields: [propertyFeatures.propertyId],\n    references: [properties.id],\n  }),\n}));\n\nexport const wavesRelations = relations(waves, ({ one, many }) => ({\n  properties: many(properties),\n  permissions: many(customerWavePermissions),\n  createdBy: one(users, {\n    fields: [waves.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const customerWavePermissionsRelations = relations(customerWavePermissions, ({ one }) => ({\n  user: one(users, {\n    fields: [customerWavePermissions.userId],\n    references: [users.id],\n  }),\n  wave: one(waves, {\n    fields: [customerWavePermissions.waveId],\n    references: [waves.id],\n  }),\n  grantedBy: one(users, {\n    fields: [customerWavePermissions.grantedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const currencyRatesRelations = relations(currencyRates, ({ one }) => ({\n  setBy: one(users, {\n    fields: [currencyRates.setBy],\n    references: [users.id],\n  }),\n}));\n\nexport const clientLocationsRelations = relations(clientLocations, ({ one }) => ({\n  user: one(users, {\n    fields: [clientLocations.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const inquiriesRelations = relations(inquiries, ({ one }) => ({\n  property: one(properties, {\n    fields: [inquiries.propertyId],\n    references: [properties.id],\n  }),\n  user: one(users, {\n    fields: [inquiries.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const favoritesRelations = relations(favorites, ({ one }) => ({\n  user: one(users, {\n    fields: [favorites.userId],\n    references: [users.id],\n  }),\n  property: one(properties, {\n    fields: [favorites.propertyId],\n    references: [properties.id],\n  }),\n}));\n\nexport const searchHistoryRelations = relations(searchHistory, ({ one, many }) => ({\n  user: one(users, {\n    fields: [searchHistory.userId],\n    references: [users.id],\n  }),\n  filters: many(searchFilters),\n}));\n\nexport const searchFiltersRelations = relations(searchFilters, ({ one }) => ({\n  search: one(searchHistory, {\n    fields: [searchFilters.searchId],\n    references: [searchHistory.id],\n  }),\n}));\n\nexport const customerActivityRelations = relations(customerActivity, ({ one, many }) => ({\n  user: one(users, {\n    fields: [customerActivity.userId],\n    references: [users.id],\n  }),\n  property: one(properties, {\n    fields: [customerActivity.propertyId],\n    references: [properties.id],\n  }),\n  metadata: many(activityMetadata),\n}));\n\nexport const activityMetadataRelations = relations(activityMetadata, ({ one }) => ({\n  activity: one(customerActivity, {\n    fields: [activityMetadata.activityId],\n    references: [customerActivity.id],\n  }),\n}));\n\nexport const customerPointsRelations = relations(customerPoints, ({ one }) => ({\n  user: one(users, {\n    fields: [customerPoints.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas (without JSON validation)\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  isExpired: true,\n});\n\nexport const insertUserLanguageSchema = createInsertSchema(userLanguages).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  language: z.enum(SUPPORTED_LANGUAGES),\n});\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n  slug: true,\n}).extend({\n  language: z.enum(SUPPORTED_LANGUAGES).default(\"en\"),\n});\n\nexport const updatePropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  views: true,\n  slug: true,\n}).extend({\n  language: z.enum(SUPPORTED_LANGUAGES).optional(),\n}).partial();\n\nexport const insertPropertyImageSchema = createInsertSchema(propertyImages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPropertyAmenitySchema = createInsertSchema(propertyAmenities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPropertyFeatureSchema = createInsertSchema(propertyFeatures).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInquirySchema = createInsertSchema(inquiries).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSearchHistorySchema = createInsertSchema(searchHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSearchFilterSchema = createInsertSchema(searchFilters).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerActivitySchema = createInsertSchema(customerActivity).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivityMetadataSchema = createInsertSchema(activityMetadata).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerPointsSchema = createInsertSchema(customerPoints).omit({\n  id: true,\n  lastActivity: true,\n  updatedAt: true,\n});\n\nexport const insertWaveSchema = createInsertSchema(waves).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerWavePermissionSchema = createInsertSchema(customerWavePermissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCurrencyRateSchema = createInsertSchema(currencyRates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  effectiveDate: true,\n});\n\nexport const updateCurrencyRateSchema = createInsertSchema(currencyRates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  effectiveDate: true,\n}).partial();\n\nexport const insertClientLocationSchema = createInsertSchema(clientLocations).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  latitude: z.union([z.number(), z.string()]).transform(v => \n    typeof v === 'number' ? v.toFixed(8) : v\n  ),\n  longitude: z.union([z.number(), z.string()]).transform(v => \n    typeof v === 'number' ? v.toFixed(8) : v\n  ),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UserLanguage = typeof userLanguages.$inferSelect;\nexport type InsertUserLanguage = z.infer<typeof insertUserLanguageSchema>;\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type PropertyImage = typeof propertyImages.$inferSelect;\nexport type InsertPropertyImage = z.infer<typeof insertPropertyImageSchema>;\nexport type PropertyAmenity = typeof propertyAmenities.$inferSelect;\nexport type InsertPropertyAmenity = z.infer<typeof insertPropertyAmenitySchema>;\nexport type PropertyFeature = typeof propertyFeatures.$inferSelect;\nexport type InsertPropertyFeature = z.infer<typeof insertPropertyFeatureSchema>;\nexport type Inquiry = typeof inquiries.$inferSelect;\nexport type InsertInquiry = z.infer<typeof insertInquirySchema>;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type SearchHistory = typeof searchHistory.$inferSelect;\nexport type InsertSearchHistory = z.infer<typeof insertSearchHistorySchema>;\nexport type SearchFilter = typeof searchFilters.$inferSelect;\nexport type InsertSearchFilter = z.infer<typeof insertSearchFilterSchema>;\nexport type CustomerActivity = typeof customerActivity.$inferSelect;\nexport type InsertCustomerActivity = z.infer<typeof insertCustomerActivitySchema>;\nexport type ActivityMetadata = typeof activityMetadata.$inferSelect;\nexport type InsertActivityMetadata = z.infer<typeof insertActivityMetadataSchema>;\nexport type CustomerPoints = typeof customerPoints.$inferSelect;\nexport type InsertCustomerPoints = z.infer<typeof insertCustomerPointsSchema>;\nexport type Wave = typeof waves.$inferSelect;\nexport type InsertWave = z.infer<typeof insertWaveSchema>;\nexport type CustomerWavePermission = typeof customerWavePermissions.$inferSelect;\nexport type InsertCustomerWavePermission = z.infer<typeof insertCustomerWavePermissionSchema>;\nexport type CurrencyRate = typeof currencyRates.$inferSelect;\nexport type InsertCurrencyRate = z.infer<typeof insertCurrencyRateSchema>;\nexport type UpdateCurrencyRate = z.infer<typeof updateCurrencyRateSchema>;\nexport type ClientLocation = typeof clientLocations.$inferSelect;\nexport type InsertClientLocation = z.infer<typeof insertClientLocationSchema>;\n\n// Property with relations\nexport type PropertyWithDetails = Property & {\n  agent: User | null;\n  wave: Wave | null;\n  images: PropertyImage[];\n  amenities: PropertyAmenity[];\n  features: PropertyFeature[];\n  inquiries: Inquiry[];\n  favorites: Favorite[];\n};\n\n// User with relations\nexport type UserWithLanguages = User & {\n  userLanguages: UserLanguage[];\n};\n\n// Wave with permissions\nexport type WaveWithPermissions = Wave & {\n  permissions: CustomerWavePermission[];\n  properties: Property[];\n};\n\n// Property filters type\nexport interface PropertyFilters {\n  type?: string;\n  listingType?: \"sale\" | \"rent\";\n  minPrice?: number;\n  maxPrice?: number;\n  bedrooms?: number;\n  bathrooms?: number;\n  city?: string;\n  country?: string;\n  language?: Language;\n  features?: string[];\n  amenities?: string[];\n  search?: string;\n  sortBy?: \"price\" | \"date\" | \"views\";\n  sortOrder?: \"asc\" | \"desc\";\n  limit?: number;\n  offset?: number;\n}\n","size_bytes":21333},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ReactNode } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { RefreshCw, AlertTriangle } from 'lucide-react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen flex items-center justify-center p-4\">\n          <div className=\"max-w-md w-full\">\n            <Alert className=\"border-red-200 bg-red-50 dark:bg-red-950 dark:border-red-800\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n              <AlertDescription className=\"text-red-800 dark:text-red-200\">\n                <div className=\"font-medium mb-2\">Something went wrong</div>\n                <div className=\"text-sm mb-4\">\n                  {this.state.error?.message || 'An unexpected error occurred'}\n                </div>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-red-300 text-red-700 hover:bg-red-100 dark:border-red-700 dark:text-red-300 dark:hover:bg-red-900\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Reload Page\n                </Button>\n              </AlertDescription>\n            </Alert>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":2033},"server/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcryptjs';\nimport { StorageFactory } from './storageFactory';\nimport type { User } from '@shared/schema';\n\n// Extend Express Request to include user and session\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n      session: {\n        userId?: string;\n        destroy: (callback: (err?: any) => void) => void;\n        save: (callback?: (err?: any) => void) => void;\n        reload: (callback: (err?: any) => void) => void;\n        touch: () => void;\n        resetMaxAge: () => void;\n      };\n    }\n  }\n}\n\n// Hash password utility\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n};\n\n// Compare password utility\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hash);\n};\n\n// Authentication middleware\nexport const requireAuth = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  next();\n};\n\n// Role-based access control middleware\nexport const requireRole = (role: string) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    try {\n      const storage = StorageFactory.getInstance();\n      const user = await storage.getUser(req.session.userId);\n      if (!user || (user.role !== role && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: 'Forbidden: Insufficient privileges' });\n      }\n      \n      req.user = user;\n      next();\n    } catch (error) {\n      res.status(500).json({ message: 'Error checking user role' });\n    }\n  };\n};\n\n// Multiple roles middleware\nexport const requireAnyRole = (roles: string[]) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    try {\n      const storage = StorageFactory.getInstance();\n      const user = await storage.getUser(req.session.userId);\n      if (!user || (!roles.includes(user.role) && user.role !== 'super_admin')) {\n        return res.status(403).json({ message: 'Forbidden: Insufficient privileges' });\n      }\n      \n      req.user = user;\n      next();\n    } catch (error) {\n      res.status(500).json({ message: 'Error checking user role' });\n    }\n  };\n};\n\n// Populate user middleware (for protected routes)\nexport const populateUser = async (req: Request, res: Response, next: NextFunction) => {\n  if (req.session?.userId) {\n    try {\n      const storage = StorageFactory.getInstance();\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        req.user = user;\n      }\n    } catch (error) {\n      console.error('Error populating user:', error);\n    }\n  }\n  next();\n};\n\n// Check if user account is expired\nexport const checkExpiration = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  // Admins and super_admins are exempt from expiration checks\n  if (req.user.role === 'admin' || req.user.role === 'super_admin') {\n    return next();\n  }\n\n  // Check if user is expired\n  if (req.user.isExpired) {\n    return res.status(403).json({ \n      message: 'Your account has expired. Please contact an administrator to renew your account.',\n      expired: true \n    });\n  }\n\n  // Check if expiration date has passed\n  if (req.user.expiresAt && new Date(req.user.expiresAt) < new Date()) {\n    return res.status(403).json({ \n      message: 'Your account has expired. Please contact an administrator to renew your account.',\n      expired: true \n    });\n  }\n\n  next();\n};\n\n// Middleware to validate user can add data in the specified language\nexport const validateLanguagePermission = async (req: Request, res: Response, next: NextFunction) => {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  try {\n    let requestedLanguage = req.body.language;\n    \n    // For updates, if no language specified, get the existing property language\n    if (!requestedLanguage && req.method === 'PUT' && req.params.id) {\n      const storage = StorageFactory.getInstance();\n      const existingProperty = await storage.getProperty(req.params.id);\n      if (existingProperty) {\n        requestedLanguage = existingProperty.language || 'en';\n      } else {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n    }\n    \n    // For creates, default to \"en\" if no language specified\n    if (!requestedLanguage) {\n      requestedLanguage = 'en';\n    }\n    \n    // Super admins can add data in any language\n    if (req.user.role === 'super_admin') {\n      return next();\n    }\n\n    // Check if user has permission for this language\n    const storage = StorageFactory.getInstance();\n    const userLanguages = await storage.getUserLanguages(req.user.id);\n    const userAllowedLanguages = userLanguages.map(ul => ul.language);\n    \n    // If user has no language permissions assigned, deny all access\n    if (userAllowedLanguages.length === 0) {\n      return res.status(403).json({ \n        message: 'You have no language permissions assigned. Contact an administrator to get language access.' \n      });\n    }\n    \n    if (!userAllowedLanguages.includes(requestedLanguage)) {\n      return res.status(403).json({ \n        message: `You don't have permission to post in language '${requestedLanguage}'. Allowed languages: ${userAllowedLanguages.join(', ')}` \n      });\n    }\n    \n    next();\n  } catch (error) {\n    console.error('Error validating language permission:', error);\n    res.status(500).json({ message: 'Error validating language permission' });\n  }\n};","size_bytes":5962},"client/src/components/contact-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useCreateInquiry } from \"@/hooks/use-properties\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Property, User } from \"@/types\";\nimport { Phone, MessageSquare, Mail, Star, Send, CheckCircle } from \"lucide-react\";\n\n// Helper function to format phone number in international format\nconst formatPhoneNumberInternational = (phoneNumber: string): string => {\n  if (!phoneNumber) return '';\n  \n  // Remove all non-digit characters except +\n  const cleaned = phoneNumber.replace(/[^\\d+]/g, '');\n  \n  // If it already starts with +, use as is, otherwise add + if it looks like international format\n  if (cleaned.startsWith('+')) {\n    // Format: +964 750 123 4567\n    const countryCode = cleaned.substring(1, 4); // 964\n    const number = cleaned.substring(4);\n    \n    if (number.length >= 9) {\n      return `+${countryCode} ${number.substring(0, 3)} ${number.substring(3, 6)} ${number.substring(6)}`;\n    }\n  }\n  \n  // If no + and starts with 964, add + and format\n  if (cleaned.startsWith('964') && cleaned.length >= 12) {\n    const countryCode = cleaned.substring(0, 3);\n    const number = cleaned.substring(3);\n    return `+${countryCode} ${number.substring(0, 3)} ${number.substring(3, 6)} ${number.substring(6)}`;\n  }\n  \n  // Return original if can't format\n  return phoneNumber;\n};\n\ninterface ContactFormProps {\n  property: Property;\n  agent?: User;\n  className?: string;\n}\n\nexport default function ContactForm({ property, agent, className }: ContactFormProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const createInquiry = useCreateInquiry();\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    message: `I'm interested in ${property.title}. Could you please provide more information?`\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await createInquiry.mutateAsync({\n        propertyId: property.id,\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        message: formData.message,\n      });\n      \n      toast({\n        title: \"Message Sent\",\n        description: \"Your inquiry has been sent to the agent. They will contact you soon.\",\n      });\n      \n      // Reset form\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        message: `I'm interested in ${property.title}. Could you please provide more information?`\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const agentInitials = agent ? \n    `${agent.firstName?.[0] || ''}${agent.lastName?.[0] || ''}`.toUpperCase() : \n    'A';\n\n  const agentName = agent ? \n    `${agent.firstName || ''} ${agent.lastName || ''}`.trim() || agent.username : \n    'Real Estate Agent';\n\n  return (\n    <Card className={`sticky top-6 border-0 bg-gradient-to-br from-white to-gray-50 dark:from-gray-900 dark:to-gray-800 ${className}`} data-testid=\"contact-form\">\n      <CardHeader className=\"text-center pb-6 bg-gradient-to-r from-orange-50 to-orange-100 dark:from-gray-800 dark:to-gray-700 rounded-t-lg\">\n        <Avatar className=\"w-24 h-24 mx-auto mb-6 ring-4 ring-orange-200 ring-offset-2 shadow-lg\">\n          <AvatarImage src={agent?.avatar} alt={agentName} />\n          <AvatarFallback className=\"text-xl font-semibold bg-gradient-to-br from-orange-400 to-orange-600 text-white\">{agentInitials}</AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex items-center justify-center gap-2 mb-2\">\n          <CardTitle className=\"text-xl font-bold text-gray-900 dark:text-gray-100\" data-testid=\"agent-name\">{agentName}</CardTitle>\n          {agent?.isVerified && (\n            <Badge \n              className=\"bg-orange-500 text-white hover:bg-orange-600 border-0 p-1.5 shadow-md\"\n              data-testid=\"verified-badge\"\n            >\n              <CheckCircle className=\"h-4 w-4\" />\n            </Badge>\n          )}\n        </div>\n        <p className=\"text-sm font-medium text-orange-700 dark:text-orange-300 bg-white/50 dark:bg-gray-800/50 px-3 py-1 rounded-full mx-auto text-center w-fit\">{t('contact.agentTitle')}</p>\n        \n      </CardHeader>\n      \n      <CardContent className=\"p-6 space-y-5\">\n        {/* Contact Information */}\n        {((property as any).contactPhone || agent?.phone) && (\n          <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 p-4 rounded-lg border border-blue-100 dark:border-gray-600\">\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              <Phone className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n              <p className=\"text-sm font-medium text-blue-800 dark:text-blue-300\">{t('contact.contactNumber')}</p>\n            </div>\n            <div className=\"flex justify-center\">\n              <p className=\"font-mono font-bold text-lg text-center text-gray-900 dark:text-gray-100 tracking-wider bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-lg border\" dir=\"ltr\" style={{ direction: 'ltr', unicodeBidi: 'embed' }}>\n                {formatPhoneNumberInternational((property as any).contactPhone || agent?.phone)}\n              </p>\n            </div>\n          </div>\n        )}\n        \n        {/* Contact Buttons */}\n        <div className=\"space-y-4\">\n          <Button \n            className=\"w-full h-14 bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:from-blue-600 hover:via-blue-700 hover:to-blue-800 text-white font-bold shadow-2xl hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-[1.03] hover:-translate-y-1 rounded-xl border border-blue-400/20 backdrop-blur-sm\"\n            onClick={() => {\n              const phone = (property as any).contactPhone || agent?.phone;\n              if (phone) {\n                window.open(`tel:${phone}`, '_self');\n              }\n            }}\n            disabled={!((property as any).contactPhone || agent?.phone)}\n            data-testid=\"call-button\"\n          >\n            <Phone className=\"mr-3 h-5 w-5 drop-shadow-lg\" />\n            <span className=\"text-lg tracking-wide\">{t('contact.callNow')}</span>\n          </Button>\n          \n          <Button \n            className=\"w-full h-14 bg-gradient-to-r from-green-500 via-green-600 to-green-700 hover:from-green-600 hover:via-green-700 hover:to-green-800 text-white font-bold shadow-2xl hover:shadow-green-500/25 transition-all duration-300 transform hover:scale-[1.03] hover:-translate-y-1 rounded-xl border border-green-400/20 backdrop-blur-sm\"\n            onClick={() => {\n              const phone = (property as any).contactPhone || agent?.phone;\n              if (phone) {\n                const whatsappPhone = phone.replace(/[^\\d+]/g, '');\n                const message = encodeURIComponent(`Hi! I'm interested in the property: ${property.title}. Could you please provide more information?`);\n                window.open(`https://wa.me/${whatsappPhone}?text=${message}`, '_blank');\n              }\n            }}\n            disabled={!((property as any).contactPhone || agent?.phone)}\n            data-testid=\"whatsapp-button\"\n          >\n            <MessageSquare className=\"mr-3 h-5 w-5 drop-shadow-lg\" />\n            <span className=\"text-lg tracking-wide\">{t('contact.whatsapp')}</span>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8042},"client/src/hooks/usePropertyEvents.ts":{"content":"import { useEffect, useRef } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport type { Property } from '@/types';\n\ninterface PropertyEventOptions {\n  currentFilters?: Record<string, any>;\n  onPropertyCreated?: (property: Property) => void;\n  onPropertyUpdated?: (property: Property) => void;\n  onPropertyDeleted?: (propertyId: string) => void;\n}\n\nexport function usePropertyEvents(options: PropertyEventOptions = {}) {\n  const queryClient = useQueryClient();\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const currentFiltersRef = useRef<Record<string, any> | undefined>();\n  const callbacksRef = useRef<{\n    onPropertyCreated?: (property: Property) => void;\n    onPropertyUpdated?: (property: Property) => void;\n    onPropertyDeleted?: (propertyId: string) => void;\n  }>({});\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const { currentFilters, onPropertyCreated, onPropertyUpdated, onPropertyDeleted } = options;\n\n  // Update refs without triggering reconnection\n  currentFiltersRef.current = currentFilters;\n  callbacksRef.current = { onPropertyCreated, onPropertyUpdated, onPropertyDeleted };\n\n  useEffect(() => {\n    const maxReconnectAttempts = 10;\n    let isCleaningUp = false;\n\n    // Helper functions for handling events\n    const handlePropertyCreated = (property: Property) => {\n      console.log('🔄 Handling property created - invalidating queries and forcing refetch');\n      \n      // Aggressively invalidate and refetch all property-related queries\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/properties'],\n        refetchType: 'all'\n      });\n\n      // Force immediate refetch to bypass any caching\n      queryClient.refetchQueries({ \n        queryKey: ['/api/properties']\n      });\n\n      // If we have current filters, also invalidate the specific filtered query\n      if (currentFiltersRef.current) {\n        const normalizedFilters = Object.fromEntries(\n          Object.entries(currentFiltersRef.current)\n            .filter(([, value]) => value !== undefined && value !== null && value !== '')\n            .sort(([a], [b]) => a.localeCompare(b))\n        );\n        \n        queryClient.invalidateQueries({ \n          queryKey: ['/api/properties', normalizedFilters],\n          refetchType: 'all'\n        });\n\n        queryClient.refetchQueries({ \n          queryKey: ['/api/properties', normalizedFilters]\n        });\n      }\n\n      // Invalidate featured properties\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/properties/featured'],\n        refetchType: 'all'\n      });\n\n      // Call custom callback if provided\n      callbacksRef.current.onPropertyCreated?.(property);\n    };\n\n    const handlePropertyUpdated = (property: Property) => {\n      console.log('🔄 Handling property updated - invalidating queries and forcing refetch');\n      \n      // Aggressively invalidate and refetch all property-related queries\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/properties'],\n        refetchType: 'all'\n      });\n\n      queryClient.refetchQueries({ \n        queryKey: ['/api/properties']\n      });\n\n      // Invalidate specific property query\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/properties', property.id],\n        refetchType: 'all'\n      });\n\n      // If we have current filters, also invalidate the specific filtered query\n      if (currentFiltersRef.current) {\n        const normalizedFilters = Object.fromEntries(\n          Object.entries(currentFiltersRef.current)\n            .filter(([, value]) => value !== undefined && value !== null && value !== '')\n            .sort(([a], [b]) => a.localeCompare(b))\n        );\n        \n        queryClient.invalidateQueries({ \n          queryKey: ['/api/properties', normalizedFilters],\n          refetchType: 'all'\n        });\n\n        queryClient.refetchQueries({ \n          queryKey: ['/api/properties', normalizedFilters]\n        });\n      }\n\n      // Call custom callback if provided\n      callbacksRef.current.onPropertyUpdated?.(property);\n    };\n\n    const handlePropertyDeleted = (data: any) => {\n      const propertyId = data.propertyId || data.id;\n      console.log('🔄 Handling property deleted - invalidating queries and forcing refetch');\n      \n      // Aggressively invalidate and refetch all property-related queries\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/properties'],\n        refetchType: 'all'\n      });\n\n      queryClient.refetchQueries({ \n        queryKey: ['/api/properties']\n      });\n\n      // Remove specific property from cache\n      queryClient.removeQueries({ \n        queryKey: ['/api/properties', propertyId] \n      });\n\n      // If we have current filters, also invalidate the specific filtered query\n      if (currentFiltersRef.current) {\n        const normalizedFilters = Object.fromEntries(\n          Object.entries(currentFiltersRef.current)\n            .filter(([, value]) => value !== undefined && value !== null && value !== '')\n            .sort(([a], [b]) => a.localeCompare(b))\n        );\n        \n        queryClient.invalidateQueries({ \n          queryKey: ['/api/properties', normalizedFilters],\n          refetchType: 'all'\n        });\n\n        queryClient.refetchQueries({ \n          queryKey: ['/api/properties', normalizedFilters]\n        });\n      }\n\n      // Call custom callback if provided\n      callbacksRef.current.onPropertyDeleted?.(propertyId);\n    };\n\n    const createConnection = () => {\n      if (isCleaningUp) return;\n\n      // Clean up any existing connection\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n\n      // Create EventSource connection\n      const eventSource = new EventSource('/api/properties/stream');\n      eventSourceRef.current = eventSource;\n\n      // Handle connection established\n      eventSource.onopen = () => {\n        console.log('✅ SSE connection established and ready');\n        console.log('📊 EventSource readyState:', eventSource.readyState);\n        // Reset reconnect attempts on successful connection\n        reconnectAttemptsRef.current = 0;\n      };\n\n      // Handle messages - only for system messages like heartbeat and connected\n      eventSource.onmessage = (event) => {\n        console.log('📨 SSE Raw message received:', event.data);\n        try {\n          const data = JSON.parse(event.data);\n          console.log('📨 SSE Parsed message:', data);\n          \n          if (data.type === 'connected') {\n            console.log('✅ SSE connected:', data.message);\n          } else if (data.type === 'heartbeat') {\n            // Handle heartbeat - just keep connection alive\n            console.log('💓 SSE heartbeat received');\n          } else {\n            console.log('❓ Unknown SSE message type:', data.type || data.eventType, data);\n          }\n        } catch (error) {\n          console.error('❌ Error parsing SSE message:', error, 'Raw data:', event.data);\n        }\n      };\n\n      // Handle custom events (primary path - fallback to onmessage if these don't fire)\n      eventSource.addEventListener('property_created', (event) => {\n        try {\n          const property: Property = JSON.parse((event as MessageEvent).data);\n          console.log('🏠 New property created and detected (via addEventListener):', property.title);\n          handlePropertyCreated(property);\n        } catch (error) {\n          console.error('❌ Error handling property_created event:', error);\n        }\n      });\n\n      eventSource.addEventListener('property_updated', (event) => {\n        try {\n          const property: Property = JSON.parse((event as MessageEvent).data);\n          console.log('🔄 Property updated and detected (via addEventListener):', property.title);\n          handlePropertyUpdated(property);\n        } catch (error) {\n          console.error('❌ Error handling property_updated event:', error);\n        }\n      });\n\n      eventSource.addEventListener('property_deleted', (event) => {\n        try {\n          const data = JSON.parse((event as MessageEvent).data);\n          console.log('🗑️ Property deleted and detected (via addEventListener):', data.title || data.id);\n          handlePropertyDeleted(data);\n        } catch (error) {\n          console.error('❌ Error handling property_deleted event:', error);\n        }\n      });\n\n      // Enhanced error handling with exponential backoff reconnection\n      eventSource.onerror = (error) => {\n        console.error('SSE connection error:', error);\n        \n        // Close current connection\n        eventSource.close();\n        eventSourceRef.current = null;\n\n        // Don't reconnect if we're cleaning up\n        if (isCleaningUp) return;\n\n        // Implement exponential backoff reconnection\n        if (reconnectAttemptsRef.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 30000);\n          reconnectAttemptsRef.current++;\n          \n          console.log(`🔄 Attempting to reconnect SSE (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts}) in ${delay}ms`);\n          \n          // Clear any existing timeout\n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            if (!isCleaningUp) {\n              createConnection();\n            }\n          }, delay);\n        } else {\n          console.error('❌ Maximum SSE reconnection attempts reached. Giving up.');\n        }\n      };\n    };\n\n    // Initialize connection\n    createConnection();\n\n    // Cleanup on unmount\n    return () => {\n      console.log('Closing SSE connection');\n      isCleaningUp = true;\n      \n      // Clear reconnection timeout\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n      \n      // Close connection\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    };\n  }, [queryClient]); // Removed currentFilters and callbacks to prevent unnecessary reconnections\n\n  // Return connection status\n  const isConnected = eventSourceRef.current?.readyState === EventSource.OPEN;\n  const isConnecting = eventSourceRef.current?.readyState === EventSource.CONNECTING;\n\n  return {\n    isConnected,\n    isConnecting,\n    eventSource: eventSourceRef.current\n  };\n}","size_bytes":10551},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-2xl data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      style={{color: '#000'}}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm text-black dark:text-white outline-none focus:bg-accent data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5799},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useTranslation, redirectToLanguage } from \"@/lib/i18n\";\nimport { SEOHead } from \"@/components/SEOHead\";\nimport { useCurrency } from \"@/lib/currency-context\";\nimport { SUPPORTED_CURRENCIES } from \"@/lib/currency\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  User,\n  Globe,\n  Bell,\n  Monitor,\n  Save,\n  Eye,\n  MapPin,\n  Heart,\n  Mail,\n  ArrowLeft,\n  ArrowRight,\n} from \"lucide-react\";\nimport usFlag from \"@assets/generated_images/US_flag_circular_design_55844ad0.png\";\nimport saudiFlag from \"@assets/generated_images/Saudi_flag_circular_design_3c46c604.png\";\nimport kurdishFlag from \"@assets/generated_images/Kurdish_flag_circular_design_55e28463.png\";\n\nexport default function SettingsPage() {\n  const { language, changeLanguage, t } = useTranslation();\n  const { preferredCurrency, setPreferredCurrency } = useCurrency();\n  const [location, setLocation] = useLocation();\n  const [userSettings, setUserSettings] = useState({\n    // Profile Settings\n    displayName: \"\",\n    email: \"\",\n    phone: \"\",\n\n    // Language & Region (will sync with global language)\n    language: language,\n    currency: preferredCurrency,\n    dateFormat: \"MM/DD/YYYY\",\n\n    // Notifications\n    emailNotifications: true,\n    pushNotifications: true,\n    favoriteUpdates: true,\n    priceAlerts: false,\n\n    // Display Preferences\n    mapStyle: \"default\",\n    showPropertyPrices: true,\n    showDistance: true,\n    autoZoom: true,\n\n    // Privacy\n    showProfile: true,\n    shareLocation: false,\n  });\n\n  useEffect(() => {\n    document.title = t(\"settings.title\");\n  }, [t]);\n\n  // Sync local language state with global language state\n  useEffect(() => {\n    setUserSettings((prev) => ({\n      ...prev,\n      language: language,\n    }));\n  }, [language]);\n\n  // Sync local currency state with global currency state\n  useEffect(() => {\n    setUserSettings((prev) => ({\n      ...prev,\n      currency: preferredCurrency,\n    }));\n  }, [preferredCurrency]);\n\n  const handleSave = () => {\n    // In a real app, this would save to the backend\n    console.log(\"Saving settings:\", userSettings);\n    // You could show a toast notification here\n    alert(t(\"settings.settingsSaved\"));\n  };\n\n  const updateSetting = (key: string, value: any) => {\n    if (key === \"language\") {\n      // Update global language state when language is changed\n      changeLanguage(value as \"en\" | \"ar\" | \"kur\");\n      // Redirect to the new language URL\n      redirectToLanguage(value as \"en\" | \"ar\" | \"kur\", location, setLocation);\n    } else if (key === \"currency\") {\n      // Update global currency state when currency is changed\n      setPreferredCurrency(value);\n      // Also update local state for immediate UI feedback\n      setUserSettings((prev) => ({\n        ...prev,\n        [key]: value,\n      }));\n    } else {\n      setUserSettings((prev) => ({\n        ...prev,\n        [key]: value,\n      }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-900\">\n      <SEOHead\n        pageType=\"settings\"\n        canonicalUrl={undefined}\n        ogImage={`/uploads/properties/1759082074149-xrejrtvx6.jpg`}\n        breadcrumbs={[\n          { name: 'Home', url: '/' },\n          { name: 'Settings', url: '/settings' }\n        ]}\n      />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className={`flex items-center mb-8 ${language === 'ar' || language === 'kur' ? 'justify-end' : 'justify-start'}`}>\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`flex items-center gap-2 ${language === 'ar' || language === 'kur' ? 'flex-row-reverse' : ''}`}\n                data-testid=\"back-to-home\"\n              >\n                {language === 'ar' || language === 'kur' ? (\n                  <ArrowLeft className=\"h-4 w-4\" />\n                ) : (\n                  <ArrowLeft className=\"h-4 w-4\" />\n                )}\n                {t(\"settings.backToHome\")}\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Language & Region */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Globe className=\"h-4 w-4\" />\n                {t(\"settings.languageRegion\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>{t(\"settings.language\")}</Label>\n                  <Select\n                    value={userSettings.language}\n                    onValueChange={(value) => updateSetting(\"language\", value)}\n                  >\n                    <SelectTrigger data-testid=\"language-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">\n                        <div className=\"flex items-center gap-2\">\n                          <img \n                            src={usFlag} \n                            alt=\"English\"\n                            title=\"English Language Flag\"\n                            width=\"16\"\n                            height=\"16\"\n                            loading=\"lazy\"\n                            className=\"w-4 h-4 object-contain rounded-sm flex-shrink-0\"\n                          />\n                          <span>English</span>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"ar\">\n                        <div className=\"flex items-center gap-2\">\n                          <img \n                            src={saudiFlag} \n                            alt=\"Arabic\"\n                            title=\"Arabic Language Flag\"\n                            width=\"16\"\n                            height=\"16\"\n                            loading=\"lazy\"\n                            className=\"w-4 h-4 object-contain rounded-sm flex-shrink-0\"\n                          />\n                          <span>العربية (Arabic)</span>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"kur\">\n                        <div className=\"flex items-center gap-2\">\n                          <img \n                            src={kurdishFlag} \n                            alt=\"Kurdish\"\n                            title=\"Kurdish Language Flag\"\n                            width=\"16\"\n                            height=\"16\"\n                            loading=\"lazy\"\n                            className=\"w-4 h-4 object-contain rounded-sm flex-shrink-0\"\n                          />\n                          <span>کوردی (Kurdish)</span>\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>{t(\"settings.currency\")}</Label>\n                  <Select\n                    value={userSettings.currency}\n                    onValueChange={(value) => updateSetting(\"currency\", value)}\n                  >\n                    <SelectTrigger data-testid=\"currency-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(SUPPORTED_CURRENCIES).map(([code, info]) => (\n                        <SelectItem key={code} value={code}>\n                          {code} ({info.symbol})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>{t(\"settings.dateFormat\")}</Label>\n                  <Select\n                    value={userSettings.dateFormat}\n                    onValueChange={(value) =>\n                      updateSetting(\"dateFormat\", value)\n                    }\n                  >\n                    <SelectTrigger data-testid=\"date-format-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notifications */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Bell className=\"h-4 w-4\" />\n                {t(\"settings.notifications\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    {t(\"settings.emailNotifications\")}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.emailNotificationsDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.emailNotifications}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"emailNotifications\", checked)\n                    }\n                    data-testid=\"email-notifications-switch\"\n                  />\n                </div>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Bell className=\"h-4 w-4\" />\n                    {t(\"settings.pushNotifications\")}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.pushNotificationsDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.pushNotifications}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"pushNotifications\", checked)\n                    }\n                    data-testid=\"push-notifications-switch\"\n                  />\n                </div>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Heart className=\"h-4 w-4\" />\n                    {t(\"settings.favoriteUpdates\")}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.favoriteUpdatesDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.favoriteUpdates}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"favoriteUpdates\", checked)\n                    }\n                    data-testid=\"favorite-updates-switch\"\n                  />\n                </div>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label>{t(\"settings.priceAlerts\")}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.priceAlertsDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.priceAlerts}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"priceAlerts\", checked)\n                    }\n                    data-testid=\"price-alerts-switch\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Display Preferences */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Monitor className=\"h-4 w-4\" />\n                {t(\"settings.displayPreferences\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>{t(\"settings.mapStyle\")}</Label>\n                <Select\n                  value={userSettings.mapStyle}\n                  onValueChange={(value) => updateSetting(\"mapStyle\", value)}\n                >\n                  <SelectTrigger data-testid=\"map-style-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"default\">\n                      {t(\"settings.mapStyleDefault\")}\n                    </SelectItem>\n                    <SelectItem value=\"satellite\">\n                      {t(\"settings.mapStyleSatellite\")}\n                    </SelectItem>\n                    <SelectItem value=\"terrain\">\n                      {t(\"settings.mapStyleTerrain\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    {t(\"settings.showPropertyPrices\")}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.showPropertyPricesDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.showPropertyPrices}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"showPropertyPrices\", checked)\n                    }\n                    data-testid=\"show-prices-switch\"\n                  />\n                </div>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4\" />\n                    {t(\"settings.showDistance\")}\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.showDistanceDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.showDistance}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"showDistance\", checked)\n                    }\n                    data-testid=\"show-distance-switch\"\n                  />\n                </div>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className=\"space-y-0.5 flex-1\">\n                  <Label>{t(\"settings.autoZoom\")}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t(\"settings.autoZoomDesc\")}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Switch\n                    checked={userSettings.autoZoom}\n                    onCheckedChange={(checked) =>\n                      updateSetting(\"autoZoom\", checked)\n                    }\n                    data-testid=\"auto-zoom-switch\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" data-testid=\"cancel-settings\">\n                {t(\"settings.cancel\")}\n              </Button>\n            </Link>\n            <Button\n              onClick={handleSave}\n              className=\"flex items-center gap-2\"\n              data-testid=\"save-settings\"\n            >\n              <Save className=\"h-4 w-4\" />\n              {t(\"settings.saveSettings\")}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17535},"client/src/components/ui/optimized-image.tsx":{"content":"import { useState, useRef, useEffect, forwardRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  fallbackSrc?: string;\n  priority?: boolean;\n  sizes?: string;\n  aspectRatio?: 'square' | '4/3' | '16/9' | '3/2' | 'auto';\n  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';\n  blur?: boolean;\n  width?: number | string;\n  height?: number | string;\n  onLoad?: () => void;\n  onError?: () => void;\n}\n\n// Generate responsive image URLs with different sizes\nconst generateResponsiveSrc = (src: string) => {\n  if (!src || typeof src !== 'string') {\n    return null;\n  }\n  if (src.includes('unsplash.com')) {\n    return {\n      webp: {\n        '320w': `${src}&fm=webp&w=320&dpr=1`,\n        '640w': `${src}&fm=webp&w=640&dpr=1`, \n        '960w': `${src}&fm=webp&w=960&dpr=1`,\n        '1280w': `${src}&fm=webp&w=1280&dpr=1`,\n        '1920w': `${src}&fm=webp&w=1920&dpr=1`\n      },\n      jpg: {\n        '320w': `${src}&fm=jpg&w=320&dpr=1`,\n        '640w': `${src}&fm=jpg&w=640&dpr=1`,\n        '960w': `${src}&fm=jpg&w=960&dpr=1`, \n        '1280w': `${src}&fm=jpg&w=1280&dpr=1`,\n        '1920w': `${src}&fm=jpg&w=1920&dpr=1`\n      }\n    };\n  }\n  return null;\n};\n\nconst DEFAULT_FALLBACK = \"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\";\n\nexport const OptimizedImage = forwardRef<HTMLImageElement, OptimizedImageProps>(\n  ({ \n    src, \n    alt, \n    fallbackSrc = DEFAULT_FALLBACK,\n    priority = false,\n    sizes = \"(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw\",\n    aspectRatio = 'auto',\n    objectFit = 'cover',\n    blur = false,\n    width = 800,\n    height = 600,\n    className,\n    onLoad,\n    onError,\n    ...props \n  }, ref) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [hasError, setHasError] = useState(false);\n    const [currentSrc, setCurrentSrc] = useState(src);\n    const imgRef = useRef<HTMLImageElement>(null);\n\n    const responsiveUrls = generateResponsiveSrc(src);\n\n    useEffect(() => {\n      setCurrentSrc(src);\n      setHasError(false);\n      setIsLoaded(false);\n    }, [src]);\n\n    const handleLoad = () => {\n      setIsLoaded(true);\n      onLoad?.();\n    };\n\n    const handleError = () => {\n      if (currentSrc !== fallbackSrc) {\n        setCurrentSrc(fallbackSrc);\n        setHasError(false);\n      } else {\n        setHasError(true);\n      }\n      onError?.();\n    };\n\n    const aspectRatioClass = {\n      'square': 'aspect-square',\n      '4/3': 'aspect-[4/3]',\n      '16/9': 'aspect-video', \n      '3/2': 'aspect-[3/2]',\n      'auto': ''\n    }[aspectRatio];\n\n    const objectFitClass = `object-${objectFit}`;\n\n    // Preload critical images\n    useEffect(() => {\n      if (priority && responsiveUrls) {\n        // Preload WebP version for modern browsers\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.as = 'image';\n        link.href = responsiveUrls.webp['960w'];\n        link.type = 'image/webp';\n        document.head.appendChild(link);\n\n        // Cleanup\n        return () => {\n          document.head.removeChild(link);\n        };\n      }\n    }, [priority, responsiveUrls]);\n\n    if (hasError) {\n      return (\n        <div className={cn(\n          \"bg-muted flex items-center justify-center text-muted-foreground text-sm\",\n          aspectRatioClass,\n          className\n        )}>\n          Failed to load image\n        </div>\n      );\n    }\n\n    return (\n      <picture className={cn(\"block\", className)}>\n        {responsiveUrls && (\n          <>\n            {/* WebP sources for modern browsers */}\n            <source\n              type=\"image/webp\"\n              srcSet={Object.entries(responsiveUrls.webp).map(([size, url]) => `${url} ${size}`).join(', ')}\n              sizes={sizes}\n            />\n            {/* JPEG fallback for older browsers */}\n            <source\n              type=\"image/jpeg\" \n              srcSet={Object.entries(responsiveUrls.jpg).map(([size, url]) => `${url} ${size}`).join(', ')}\n              sizes={sizes}\n            />\n          </>\n        )}\n        <img\n          ref={ref || imgRef}\n          src={currentSrc}\n          alt={alt}\n          title={props.title || alt}\n          width={width}\n          height={height}\n          className={cn(\n            \"w-full h-full transition-opacity duration-300\",\n            aspectRatioClass,\n            objectFitClass,\n            isLoaded ? 'opacity-100' : 'opacity-0',\n            blur && !isLoaded && 'blur-sm',\n            className\n          )}\n          loading={priority ? 'eager' : 'lazy'}\n          decoding={priority ? 'sync' : 'async'}\n          fetchPriority={priority ? 'high' : 'auto'}\n          onLoad={handleLoad}\n          onError={handleError}\n          data-testid=\"optimized-image\"\n          {...props}\n        />\n      </picture>\n    );\n  }\n);\n\nOptimizedImage.displayName = \"OptimizedImage\";\n\n// Image placeholder component for loading states\nexport const ImagePlaceholder = ({ \n  aspectRatio = 'auto', \n  className \n}: { \n  aspectRatio?: OptimizedImageProps['aspectRatio']; \n  className?: string \n}) => {\n  const aspectRatioClass = {\n    'square': 'aspect-square',\n    '4/3': 'aspect-[4/3]',\n    '16/9': 'aspect-video', \n    '3/2': 'aspect-[3/2]',\n    'auto': ''\n  }[aspectRatio];\n\n  return (\n    <div className={cn(\n      \"bg-muted animate-pulse flex items-center justify-center\",\n      aspectRatioClass,\n      className\n    )}>\n      <div className=\"w-8 h-8 bg-muted-foreground/20 rounded\" />\n    </div>\n  );\n};","size_bytes":5631},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/config/dbConfig.ts":{"content":"// Remove dotenv import to let Replit handle environment variables natively\n\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  user: string;\n  password: string;\n  database: string;\n  connectionUrl: string;\n}\n\nfunction getDatabaseConfig(): DatabaseConfig {\n  // Check if individual MySQL environment variables are provided (trim whitespace)\n  const mysqlHost = process.env.MYSQL_HOST?.trim();\n  const mysqlPort = process.env.MYSQL_PORT?.trim();\n  const mysqlUser = process.env.MYSQL_USER?.trim();\n  const mysqlPassword = process.env.MYSQL_PASSWORD?.trim();\n  const mysqlDatabase = process.env.MYSQL_DATABASE?.trim();\n\n  // If individual MySQL environment variables are provided, use them directly\n  if (mysqlHost && mysqlUser && mysqlDatabase) {\n    const port = parseInt(mysqlPort || \"3306\");\n    const encodedPassword = mysqlPassword ? encodeURIComponent(mysqlPassword) : '';\n    const auth = encodedPassword ? `${encodeURIComponent(mysqlUser)}:${encodedPassword}` : encodeURIComponent(mysqlUser);\n    const connectionUrl = `mysql://${auth}@${mysqlHost}:${port}/${mysqlDatabase}`;\n    \n    const config: DatabaseConfig = {\n      host: mysqlHost,\n      port: port,\n      user: mysqlUser,\n      password: mysqlPassword || \"\",\n      database: mysqlDatabase,\n      connectionUrl,\n    };\n    \n    return config;\n  }\n  \n  // Fallback to MYSQL_URL if provided\n  const mysqlUrl = process.env.MYSQL_URL;\n  if (mysqlUrl) {\n    // Parse mysql:// URL manually since new URL() doesn't support it\n    const urlPattern = /^mysql:\\/\\/(?:([^:]+)(?::([^@]+))?@)?([^:\\/]+)(?::(\\d+))?\\/(.+)$/;\n    const match = mysqlUrl.match(urlPattern);\n    \n    if (!match) {\n      throw new Error(\"Invalid MYSQL_URL format. Expected: mysql://user:password@host:port/database\");\n    }\n    \n    const [, user, password, host, port, database] = match;\n    \n    const config: DatabaseConfig = {\n      host: host,\n      port: parseInt(port || \"3306\"),\n      user: user || \"root\",\n      password: password ? decodeURIComponent(password) : \"\",\n      database: database,\n      connectionUrl: mysqlUrl,\n    };\n    \n    return config;\n  }\n  \n  // If no configuration provided, throw error\n  throw new Error(\n    \"No MySQL database configured. \" +\n    \"Set MYSQL_URL or individual MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, and MYSQL_DATABASE environment variables.\"\n  );\n}\n\nfunction validateDatabaseConfig(config: DatabaseConfig): void {\n  if (!config.host) {\n    throw new Error(\"Database host is required\");\n  }\n\n  if (!config.database) {\n    throw new Error(\"Database name is required\");\n  }\n\n  if (!config.connectionUrl.startsWith(\"mysql://\")) {\n    throw new Error(\"Invalid MySQL connection URL format\");\n  }\n}\n\nexport function getValidatedDatabaseConfig(): DatabaseConfig {\n  const config = getDatabaseConfig();\n  validateDatabaseConfig(config);\n  return config;\n}\n\nexport { DatabaseConfig };\n","size_bytes":2866},"client/src/hooks/use-properties.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Property, PropertyFilters, AISearchResponse, Inquiry } from \"@/types\";\n\nexport function useProperties(filters?: PropertyFilters) {\n  // Create a stable, serializable version of filters for the query key\n  const normalizedFilters = filters ? Object.fromEntries(\n    Object.entries(filters)\n      .filter(([, value]) => value !== undefined && value !== null && value !== '')\n      .sort(([a], [b]) => a.localeCompare(b)) // Sort keys for consistency\n  ) : {};\n\n  return useQuery<Property[]>({\n    queryKey: [\"/api/properties\", normalizedFilters],\n    staleTime: 10 * 1000, // 10 seconds - shorter cache for real-time updates\n    gcTime: 30 * 1000, // 30 seconds in memory\n    refetchInterval: 15 * 1000, // Poll every 15 seconds for real-time updates\n    refetchIntervalInBackground: true, // Keep polling even when window is not focused\n    queryFn: async () => {\n      console.log('🔄 Fetching properties from API...');\n      const params = new URLSearchParams();\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value !== undefined && value !== null && value !== '') {\n            params.append(key, value.toString());\n          }\n        });\n      }\n      const url = `/api/properties${params.toString() ? `?${params}` : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch properties');\n      const data = await response.json();\n      console.log('✅ Properties fetched:', data.length, 'properties');\n      return data;\n    },\n  });\n}\n\nexport function useFeaturedProperties() {\n  return useQuery<Property[]>({\n    queryKey: [\"/api/properties/featured\"],\n    staleTime: 2 * 60 * 1000, // 2 minutes cache for featured\n    gcTime: 5 * 60 * 1000, // 5 minutes in memory\n  });\n}\n\nexport function useProperty(idOrSlug: string) {\n  return useQuery<Property>({\n    queryKey: [\"/api/properties\", idOrSlug],\n    queryFn: async () => {\n      const response = await fetch(`/api/properties/${idOrSlug}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch property: ${response.status}`);\n      }\n      return response.json();\n    },\n    enabled: !!idOrSlug,\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n    gcTime: 10 * 60 * 1000, // 10 minutes in memory\n  });\n}\n\n\nexport function useCreateProperty() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (property: Partial<Property>) => {\n      const response = await apiRequest(\"POST\", \"/api/properties\", property);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n    },\n  });\n}\n\nexport function useUpdateProperty() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, ...property }: Partial<Property> & { id: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/properties/${id}`, property);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\", data.id] });\n      // Also invalidate slug-based cache if slug exists\n      if (data.slug) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/properties\", data.slug] });\n      }\n    },\n  });\n}\n\nexport function useDeleteProperty() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/properties/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/properties\"] });\n    },\n  });\n}\n\nexport function useAISearch() {\n  return useMutation<AISearchResponse, Error, { query: string; userId?: string }>({\n    mutationFn: async ({ query, userId }) => {\n      const response = await apiRequest(\"POST\", \"/api/search/ai\", { query, userId });\n      return response.json();\n    },\n  });\n}\n\nexport function useSearchSuggestions() {\n  return useQuery<string[]>({\n    queryKey: [\"/api/search/suggestions\"],\n  });\n}\n\nexport function useCreateInquiry() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (inquiry: Partial<Inquiry>) => {\n      const response = await apiRequest(\"POST\", \"/api/inquiries\", inquiry);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inquiries\"] });\n    },\n  });\n}\n\n\nexport function useUpdateInquiryStatus() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/inquiries/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inquiries\"] });\n    },\n  });\n}\n\nexport function useFavorites(userId: string | undefined) {\n  return useQuery<Property[]>({\n    queryKey: [\"/api/users\", userId, \"favorites\"],\n    enabled: !!userId,\n  });\n}\n\nexport function useAddToFavorites() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ userId, propertyId }: { userId: string; propertyId: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/favorites\", { userId, propertyId });\n      return response.json();\n    },\n    onSuccess: (_, { userId, propertyId }) => {\n      // Update the specific favorite check immediately (most important)\n      queryClient.setQueryData(\n        [\"/api/favorites/check\", { userId, propertyId }],\n        { isFavorite: true }\n      );\n      // Only invalidate queries for this specific property\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/favorites/check\", { userId, propertyId }]\n      });\n      // Also invalidate the user's favorites list\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId, \"favorites\"] });\n    },\n  });\n}\n\nexport function useRemoveFromFavorites() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ userId, propertyId }: { userId: string; propertyId: string }) => {\n      const response = await apiRequest(\"DELETE\", \"/api/favorites\", { userId, propertyId });\n      return response.json();\n    },\n    onSuccess: (_, { userId, propertyId }) => {\n      // Update the specific favorite check immediately (most important)\n      queryClient.setQueryData(\n        [\"/api/favorites/check\", { userId, propertyId }],\n        { isFavorite: false }\n      );\n      // Only invalidate queries for this specific property\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/favorites/check\", { userId, propertyId }]\n      });\n      // Also invalidate the user's favorites list to refresh the favorites page\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", userId, \"favorites\"] });\n    },\n  });\n}\n\nexport function useIsFavorite(userId: string | undefined, propertyId: string) {\n  return useQuery<{ isFavorite: boolean }>({\n    queryKey: [\"/api/favorites/check\", { userId, propertyId }],\n    enabled: !!userId && !!propertyId,\n    queryFn: async () => {\n      const response = await fetch(`/api/favorites/check?userId=${userId}&propertyId=${propertyId}`);\n      if (!response.ok) throw new Error('Failed to check favorite status');\n      return response.json();\n    },\n  });\n}\n","size_bytes":7570},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Vazirmatn:wght@100;200;300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom Kurdish Fonts */\n@font-face {\n  font-family: 'UniQAIDAR Asiacell';\n  src: url('@assets/UniQAIDAR_Asiacell 001_1758107005933.ttf') format('truetype');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'UniQAIDAR Asiacell';\n  src: url('@assets/UniQAIDAR_Asiacell 002_1758107005922.ttf') format('truetype');\n  font-weight: 600;\n  font-style: normal;\n  font-display: swap;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(25 95% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(74 43% 70%);\n  --secondary-foreground: hsl(0 0% 0%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(25 95% 90%);\n  --accent-foreground: hsl(25 95% 20%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(25 95% 53%);\n  --chart-1: hsl(25 95% 53%);\n  --chart-2: hsl(74 43% 70%);\n  --chart-3: hsl(120 45% 55%);\n  --chart-4: hsl(190 85% 55%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(25 95% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(25 95% 90%);\n  --sidebar-accent-foreground: hsl(25 95% 20%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(25 95% 53%);\n  --font-sans: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n  --font-arabic: \"Vazirmatn\", \"Tajawal\", \"Cairo\", \"Geeza Pro\", \"SF Arabic\", \"Segoe UI Arabic\", \"Noto Naskh Arabic\", sans-serif;\n  --font-kurdish: \"Vazirmatn\", \"UniQAIDAR Asiacell\", \"Noto Sans Kurdish\", \"Noto Naskh Arabic\", \"Cairo\", \"Tajawal\", \"Geeza Pro\", \"SF Arabic\", \"Segoe UI Arabic\", \"Tahoma\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* ========================================\n     RESPONSIVE TYPOGRAPHY SYSTEM\n     Fluid scaling using clamp() for smooth resizing\n     ======================================== */\n  \n  /* Base font sizes with fluid scaling */\n  --text-xs: clamp(0.75rem, 0.7rem + 0.25vw, 0.875rem);        /* 12px - 14px */\n  --text-sm: clamp(0.875rem, 0.8rem + 0.375vw, 1rem);         /* 14px - 16px */\n  --text-base: clamp(1rem, 0.9rem + 0.5vw, 1.125rem);         /* 16px - 18px */\n  --text-lg: clamp(1.125rem, 1rem + 0.625vw, 1.25rem);        /* 18px - 20px */\n  --text-xl: clamp(1.25rem, 1.1rem + 0.75vw, 1.5rem);         /* 20px - 24px */\n  --text-2xl: clamp(1.5rem, 1.3rem + 1vw, 1.875rem);          /* 24px - 30px */\n  --text-3xl: clamp(1.875rem, 1.6rem + 1.375vw, 2.25rem);     /* 30px - 36px */\n  --text-4xl: clamp(2.25rem, 1.9rem + 1.75vw, 3rem);          /* 36px - 48px */\n  --text-5xl: clamp(3rem, 2.5rem + 2.5vw, 4rem);              /* 48px - 64px */\n  \n  /* Display sizes for hero text and major headings */\n  --text-display-sm: clamp(2.5rem, 2rem + 2.5vw, 3.5rem);     /* 40px - 56px */\n  --text-display-md: clamp(3.5rem, 2.8rem + 3.5vw, 4.5rem);   /* 56px - 72px */\n  --text-display-lg: clamp(4.5rem, 3.5rem + 5vw, 6rem);       /* 72px - 96px */\n  --text-display-xl: clamp(6rem, 4.5rem + 7.5vw, 8rem);       /* 96px - 128px */\n  \n  /* Corresponding line heights for optimal readability */\n  --leading-xs: clamp(1rem, 0.9rem + 0.5vw, 1.25rem);         /* 16px - 20px */\n  --leading-sm: clamp(1.25rem, 1.1rem + 0.75vw, 1.5rem);      /* 20px - 24px */\n  --leading-base: clamp(1.5rem, 1.3rem + 1vw, 1.75rem);       /* 24px - 28px */\n  --leading-lg: clamp(1.75rem, 1.5rem + 1.25vw, 2rem);        /* 28px - 32px */\n  --leading-xl: clamp(2rem, 1.7rem + 1.5vw, 2.25rem);         /* 32px - 36px */\n  --leading-2xl: clamp(2.25rem, 1.9rem + 1.75vw, 2.625rem);   /* 36px - 42px */\n  --leading-3xl: clamp(2.5rem, 2.1rem + 2vw, 3rem);           /* 40px - 48px */\n  --leading-4xl: clamp(3rem, 2.5rem + 2.5vw, 3.75rem);        /* 48px - 60px */\n  --leading-5xl: clamp(3.75rem, 3rem + 3.75vw, 5rem);         /* 60px - 80px */\n  \n  /* Display line heights */\n  --leading-display-sm: clamp(3rem, 2.4rem + 3vw, 4rem);      /* 48px - 64px */\n  --leading-display-md: clamp(4rem, 3.2rem + 4vw, 5rem);      /* 64px - 80px */\n  --leading-display-lg: clamp(5rem, 4rem + 5vw, 6.5rem);      /* 80px - 104px */\n  --leading-display-xl: clamp(6.5rem, 5rem + 7.5vw, 8.5rem); /* 104px - 136px */\n  \n  /* Letter spacing for different text sizes */\n  --tracking-tight: -0.025em;\n  --tracking-tighter: -0.05em;\n  --tracking-wide: 0.025em;\n  --tracking-wider: 0.05em;\n  \n  /* Maximum content widths for optimal reading */\n  --max-width-prose: clamp(16rem, 65ch, 70rem);\n  --max-width-prose-lg: clamp(18rem, 70ch, 75rem);\n  --max-width-prose-xl: clamp(20rem, 75ch, 80rem);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(25 95% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(74 43% 30%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(25 95% 15%);\n  --accent-foreground: hsl(25 95% 85%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(25 95% 53%);\n  --chart-1: hsl(25 95% 53%);\n  --chart-2: hsl(74 43% 70%);\n  --chart-3: hsl(120 45% 55%);\n  --chart-4: hsl(190 85% 55%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(25 95% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(25 95% 15%);\n  --sidebar-accent-foreground: hsl(25 95% 85%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(25 95% 53%);\n  --font-sans: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n  --font-arabic: \"Vazirmatn\", \"Tajawal\", \"Cairo\", \"Geeza Pro\", \"SF Arabic\", \"Segoe UI Arabic\", \"Noto Naskh Arabic\", sans-serif;\n  --font-kurdish: \"Vazirmatn\", \"UniQAIDAR Asiacell\", \"Noto Sans Kurdish\", \"Noto Naskh Arabic\", \"Cairo\", \"Tajawal\", \"Geeza Pro\", \"SF Arabic\", \"Segoe UI Arabic\", \"Tahoma\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n\n  /* Typography variables remain the same in dark mode for consistency */\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    height: 100%;\n  }\n\n  #root {\n    min-height: 100vh;\n    min-height: 100dvh; /* Dynamic viewport height for mobile */\n  }\n\n  /* Restrict scrolling for home/map page only */\n  .map-page body {\n    height: 100vh;\n    height: 100dvh; /* Dynamic viewport height for mobile */\n    overflow: hidden;\n  }\n\n  .map-page html {\n    height: 100%;\n    overflow: hidden;\n  }\n\n  .map-page #root {\n    height: 100vh;\n    height: 100dvh; /* Dynamic viewport height for mobile */\n    overflow: hidden;\n  }\n\n  /* Arabic Language Support - using higher specificity instead of !important */\n  html [lang=\"ar\"]:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(.company-name), \n  html [lang=\"ar\"] *:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(svg):not([data-lucide]):not(.company-name), \n  html .arabic-font:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(.company-name), \n  html .arabic-font *:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(svg):not([data-lucide]):not(.company-name) {\n    font-family: var(--font-arabic);\n    direction: rtl;\n    text-align: right;\n  }\n\n  /* Kurdish Language Support - using higher specificity instead of !important */\n  html [lang=\"kur\"]:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(.company-name):not(button):not([role=\"button\"]), \n  html [lang=\"kur\"] *:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(svg):not([data-lucide]):not(.company-name):not(button):not([role=\"button\"]), \n  html .kurdish-font:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(.company-name):not(button):not([role=\"button\"]), \n  html .kurdish-font *:not(i):not(.fa):not(.fas):not(.far):not(.fal):not(.fab):not([class*=\"icon\"]):not(svg):not([data-lucide]):not(.company-name):not(button):not([role=\"button\"]) {\n    font-family: var(--font-kurdish);\n    direction: rtl;\n    text-align: right;\n  }\n}\n\n/* ========================================\n   RESPONSIVE TYPOGRAPHY UTILITY CLASSES\n   ======================================== */\n\n@layer utilities {\n  /* Heading classes with responsive scaling */\n  .heading-1 {\n    @apply text-4xl md:text-5xl lg:text-display-sm font-bold;\n    letter-spacing: var(--tracking-tighter);\n    line-height: var(--leading-4xl);\n  }\n  \n  .heading-2 {\n    @apply text-3xl md:text-4xl lg:text-5xl font-bold;\n    letter-spacing: var(--tracking-tight);\n    line-height: var(--leading-3xl);\n  }\n  \n  .heading-3 {\n    @apply text-2xl md:text-3xl lg:text-4xl font-semibold;\n    letter-spacing: var(--tracking-tight);\n    line-height: var(--leading-2xl);\n  }\n  \n  .heading-4 {\n    @apply text-xl md:text-2xl lg:text-3xl font-semibold;\n    letter-spacing: var(--tracking-normal);\n    line-height: var(--leading-xl);\n  }\n  \n  .heading-5 {\n    @apply text-lg md:text-xl lg:text-2xl font-medium;\n    letter-spacing: var(--tracking-normal);\n    line-height: var(--leading-lg);\n  }\n  \n  .heading-6 {\n    @apply text-base md:text-lg lg:text-xl font-medium;\n    letter-spacing: var(--tracking-normal);\n    line-height: var(--leading-base);\n  }\n\n  /* Display text for hero sections and large headings */\n  .display-xl {\n    font-size: var(--text-display-xl);\n    line-height: var(--leading-display-xl);\n    letter-spacing: var(--tracking-tighter);\n    @apply font-black;\n  }\n  \n  .display-lg {\n    font-size: var(--text-display-lg);\n    line-height: var(--leading-display-lg);\n    letter-spacing: var(--tracking-tighter);\n    @apply font-black;\n  }\n  \n  .display-md {\n    font-size: var(--text-display-md);\n    line-height: var(--leading-display-md);\n    letter-spacing: var(--tracking-tight);\n    @apply font-bold;\n  }\n  \n  .display-sm {\n    font-size: var(--text-display-sm);\n    line-height: var(--leading-display-sm);\n    letter-spacing: var(--tracking-tight);\n    @apply font-bold;\n  }\n\n  /* Body text classes with optimal reading experience */\n  .body-xl {\n    @apply text-xl leading-relaxed;\n    max-width: var(--max-width-prose-xl);\n  }\n  \n  .body-lg {\n    @apply text-lg leading-relaxed;\n    max-width: var(--max-width-prose-lg);\n  }\n  \n  .body-base {\n    @apply text-base leading-relaxed;\n    max-width: var(--max-width-prose);\n  }\n  \n  .body-sm {\n    @apply text-sm leading-normal;\n    max-width: var(--max-width-prose);\n  }\n\n  /* Caption and small text */\n  .caption {\n    @apply text-sm text-muted-foreground;\n    letter-spacing: var(--tracking-wide);\n  }\n  \n  .overline {\n    @apply text-xs uppercase font-medium;\n    letter-spacing: var(--tracking-wider);\n  }\n\n  /* Responsive text utilities */\n  .text-responsive-xs { font-size: var(--text-xs); }\n  .text-responsive-sm { font-size: var(--text-sm); }\n  .text-responsive-base { font-size: var(--text-base); }\n  .text-responsive-lg { font-size: var(--text-lg); }\n  .text-responsive-xl { font-size: var(--text-xl); }\n  .text-responsive-2xl { font-size: var(--text-2xl); }\n  .text-responsive-3xl { font-size: var(--text-3xl); }\n  .text-responsive-4xl { font-size: var(--text-4xl); }\n  .text-responsive-5xl { font-size: var(--text-5xl); }\n\n  /* Leading utilities */\n  .leading-responsive-xs { line-height: var(--leading-xs); }\n  .leading-responsive-sm { line-height: var(--leading-sm); }\n  .leading-responsive-base { line-height: var(--leading-base); }\n  .leading-responsive-lg { line-height: var(--leading-lg); }\n  .leading-responsive-xl { line-height: var(--leading-xl); }\n  .leading-responsive-2xl { line-height: var(--leading-2xl); }\n  .leading-responsive-3xl { line-height: var(--leading-3xl); }\n  .leading-responsive-4xl { line-height: var(--leading-4xl); }\n  .leading-responsive-5xl { line-height: var(--leading-5xl); }\n\n  /* Typography scale for consistent hierarchy */\n  .scale-xs { \n    @apply text-xs leading-responsive-xs; \n    letter-spacing: var(--tracking-wide);\n  }\n  .scale-sm { \n    @apply text-sm leading-responsive-sm; \n    letter-spacing: var(--tracking-normal);\n  }\n  .scale-base { \n    @apply text-base leading-responsive-base; \n    letter-spacing: var(--tracking-normal);\n  }\n  .scale-lg { \n    @apply text-lg leading-responsive-lg; \n    letter-spacing: var(--tracking-normal);\n  }\n  .scale-xl { \n    @apply text-xl leading-responsive-xl; \n    letter-spacing: var(--tracking-tight);\n  }\n  .scale-2xl { \n    @apply text-2xl leading-responsive-2xl; \n    letter-spacing: var(--tracking-tight);\n  }\n  .scale-3xl { \n    @apply text-3xl leading-responsive-3xl; \n    letter-spacing: var(--tracking-tight);\n  }\n  .scale-4xl { \n    @apply text-4xl leading-responsive-4xl; \n    letter-spacing: var(--tracking-tighter);\n  }\n  .scale-5xl { \n    @apply text-5xl leading-responsive-5xl; \n    letter-spacing: var(--tracking-tighter);\n  }\n\n  /* Content width utilities for optimal reading */\n  .prose-responsive {\n    max-width: var(--max-width-prose);\n  }\n  \n  .prose-responsive-lg {\n    max-width: var(--max-width-prose-lg);\n  }\n  \n  .prose-responsive-xl {\n    max-width: var(--max-width-prose-xl);\n  }\n\n  /* Mobile-specific typography optimizations */\n  @media (max-width: 640px) {\n    .mobile-heading-1 {\n      @apply text-3xl font-bold;\n      line-height: 1.2;\n      letter-spacing: var(--tracking-tight);\n    }\n    \n    .mobile-heading-2 {\n      @apply text-2xl font-bold;\n      line-height: 1.3;\n      letter-spacing: var(--tracking-normal);\n    }\n    \n    .mobile-body {\n      @apply text-base leading-relaxed;\n      line-height: 1.6;\n    }\n  }\n\n  /* High DPI display optimizations */\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    .crisp-text {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  }\n}\n\n/* Custom Leaflet Popup Styles with Animations */\n.leaflet-popup-content-wrapper {\n  border-radius: 16px !important;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.12), 0 8px 25px rgba(0, 0, 0, 0.08) !important;\n  border: 1px solid rgba(255, 255, 255, 0.2) !important;\n  padding: 0 !important;\n  backdrop-filter: blur(8px) !important;\n  background: rgba(255, 255, 255, 0.98) !important;\n  animation: popupSlideIn 0.3s ease-out forwards !important;\n}\n\n.leaflet-popup-content {\n  margin: 0 !important;\n  padding: 0 !important;\n  font-family: var(--font-sans) !important;\n  overflow: hidden !important;\n  border-radius: 16px !important;\n}\n\n.leaflet-popup-tip {\n  background: rgba(255, 255, 255, 0.98) !important;\n  border: none !important;\n  box-shadow: none !important;\n  backdrop-filter: blur(8px) !important;\n}\n\n.custom-popup .leaflet-popup-close-button {\n  top: 8px !important;\n  right: 8px !important;\n  width: 32px !important;\n  height: 32px !important;\n  font-size: 16px !important;\n  color: white !important;\n  background: linear-gradient(135deg, rgba(0, 0, 0, 0.7) 0%, rgba(0, 0, 0, 0.5) 100%) !important;\n  border-radius: 50% !important;\n  text-align: center !important;\n  line-height: 32px !important;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3), 0 2px 8px rgba(0, 0, 0, 0.2) !important;\n  border: none !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;\n  z-index: 1000 !important;\n  font-weight: 600 !important;\n  backdrop-filter: blur(8px) !important;\n  cursor: pointer !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n}\n\n.custom-popup .leaflet-popup-close-button:hover {\n  background: linear-gradient(135deg, rgba(220, 38, 38, 0.9) 0%, rgba(185, 28, 28, 0.8) 100%) !important;\n  transform: scale(1.1) rotate(90deg) !important;\n  box-shadow: 0 6px 25px rgba(220, 38, 38, 0.4), 0 3px 12px rgba(0, 0, 0, 0.3) !important;\n  border: none !important;\n  color: white !important;\n}\n\n.custom-popup .leaflet-popup-close-button:active {\n  transform: scale(0.95) rotate(90deg) !important;\n  transition: all 0.1s ease !important;\n}\n\n/* Popup Animation Keyframes */\n@keyframes popupSlideIn {\n  0% {\n    transform: scale(0.85) translateY(10px) !important;\n    opacity: 0 !important;\n  }\n  100% {\n    transform: scale(1) translateY(0) !important;\n    opacity: 1 !important;\n  }\n}\n\n@keyframes popupSlideOut {\n  0% {\n    transform: scale(1) translateY(0) !important;\n    opacity: 1 !important;\n  }\n  100% {\n    transform: scale(0.95) translateY(-5px) !important;\n    opacity: 0 !important;\n  }\n}\n\n/* Professional Responsive Popup Styles */\n.responsive-popup {\n  width: 320px;\n  max-width: 92vw;\n  background: linear-gradient(135deg, #ffffff 0%, #fafbfc 100%);\n  border-radius: 16px;\n  overflow: hidden;\n  position: relative;\n}\n\n.responsive-popup::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 3px;\n  background: linear-gradient(90deg, hsl(25 95% 53%), hsl(74 43% 70%), hsl(25 95% 65%));\n  animation: gradientShimmer 2s ease-in-out infinite;\n}\n\n.responsive-popup .popup-image {\n  width: 100%;\n  height: 160px;\n  margin-bottom: 0;\n  overflow: hidden;\n  position: relative;\n  background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);\n}\n\n.responsive-popup .popup-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  display: block;\n  transition: transform 0.3s ease;\n}\n\n.responsive-popup .popup-image:hover img {\n  transform: scale(1.05);\n}\n\n.responsive-popup .popup-content {\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n}\n\n.responsive-popup .popup-title {\n  font-weight: 700;\n  font-size: 16px;\n  margin: 0 0 8px 0;\n  line-height: 1.4;\n  color: #0f172a;\n  word-wrap: break-word;\n  letter-spacing: -0.025em;\n}\n\n.responsive-popup .popup-address {\n  font-size: 13px;\n  color: #64748b;\n  margin: 0 0 12px 0;\n  word-wrap: break-word;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.responsive-popup .popup-address::before {\n  content: '📍';\n  font-size: 12px;\n}\n\n.responsive-popup .popup-price {\n  font-weight: 800;\n  font-size: 20px;\n  color: hsl(25 95% 45%);\n  margin: 0 0 12px 0;\n  text-shadow: 0 1px 2px rgba(30, 64, 175, 0.1);\n}\n\n.responsive-popup .popup-details {\n  font-size: 13px;\n  color: #475569;\n  margin: 0 0 20px 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  font-weight: 500;\n}\n\n.responsive-popup .popup-details span {\n  background: hsla(25, 95%, 53%, 0.08);\n  padding: 4px 8px;\n  border-radius: 6px;\n  border: 1px solid hsla(25, 95%, 53%, 0.1);\n  transition: all 0.2s ease;\n}\n\n.responsive-popup .popup-details span:hover {\n  background: hsla(25, 95%, 53%, 0.12);\n  transform: translateY(-1px);\n}\n\n.responsive-popup .popup-button {\n  width: 100%;\n  background: linear-gradient(135deg, hsl(25 95% 53%) 0%, hsl(25 95% 60%) 100%);\n  color: white;\n  border: none;\n  padding: 14px 20px;\n  border-radius: 12px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  touch-action: manipulation;\n  position: relative;\n  overflow: hidden;\n  box-shadow: 0 4px 14px hsla(25, 95%, 53%, 0.3);\n  letter-spacing: 0.5px;\n}\n\n.responsive-popup .popup-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.responsive-popup .popup-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px hsla(25, 95%, 53%, 0.4);\n  background: linear-gradient(135deg, hsl(25 95% 48%) 0%, hsl(25 95% 53%) 100%);\n}\n\n.responsive-popup .popup-button:hover::before {\n  left: 100%;\n}\n\n.responsive-popup .popup-button:active {\n  transform: translateY(0);\n  box-shadow: 0 4px 14px hsla(25, 95%, 53%, 0.3);\n}\n\n/* Animation Keyframes */\n@keyframes contentFadeIn {\n  0% {\n    opacity: 0;\n    transform: translateY(8px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes gradientShimmer {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n@keyframes imageSlideIn {\n  0% {\n    opacity: 0;\n    transform: scale(1.1);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes textSlideUp {\n  0% {\n    opacity: 0;\n    transform: translateY(12px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes buttonSlideUp {\n  0% {\n    opacity: 0;\n    transform: translateY(16px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Mobile-specific adjustments */\n@media (max-width: 768px) {\n  .responsive-popup {\n    width: 300px;\n    max-width: 90vw;\n  }\n  \n  .responsive-popup .popup-content {\n    padding: 16px;\n  }\n  \n  .responsive-popup .popup-title {\n    font-size: 15px;\n  }\n  \n  .responsive-popup .popup-price {\n    font-size: 18px;\n  }\n}\n\n@media (max-width: 640px) {\n  .responsive-popup {\n    width: 280px;\n    max-width: 88vw;\n  }\n  \n  .responsive-popup .popup-image {\n    height: 140px;\n  }\n  \n  .responsive-popup .popup-content {\n    padding: 14px;\n  }\n  \n  .responsive-popup .popup-title {\n    font-size: 14px;\n  }\n  \n  .responsive-popup .popup-address {\n    font-size: 12px;\n  }\n  \n  .responsive-popup .popup-price {\n    font-size: 17px;\n  }\n  \n  .responsive-popup .popup-details {\n    font-size: 12px;\n    gap: 8px;\n  }\n  \n  .responsive-popup .popup-button {\n    padding: 12px 18px;\n    font-size: 13px;\n  }\n}\n\n/* Very small screens */\n@media (max-width: 480px) {\n  .responsive-popup {\n    width: 260px;\n    max-width: 85vw;\n  }\n  \n  .responsive-popup .popup-image {\n    height: 120px;\n  }\n  \n  .responsive-popup .popup-content {\n    padding: 12px;\n  }\n  \n  .responsive-popup .popup-title {\n    font-size: 13px;\n  }\n  \n  .responsive-popup .popup-address {\n    font-size: 11px;\n  }\n  \n  .responsive-popup .popup-price {\n    font-size: 16px;\n  }\n  \n  .responsive-popup .popup-details {\n    font-size: 11px;\n    gap: 6px;\n  }\n  \n  .responsive-popup .popup-details span {\n    padding: 3px 6px;\n    font-size: 10px;\n  }\n  \n  .responsive-popup .popup-button {\n    padding: 10px 16px;\n    font-size: 12px;\n    border-radius: 10px;\n  }\n}\n\n/* Extra small screens */\n@media (max-width: 360px) {\n  .responsive-popup {\n    width: 240px;\n    max-width: 82vw;\n  }\n  \n  .responsive-popup .popup-image {\n    height: 100px;\n  }\n  \n  .responsive-popup .popup-content {\n    padding: 10px;\n  }\n  \n  .responsive-popup .popup-details {\n    flex-direction: column;\n    gap: 4px;\n  }\n}\n\n/* Custom Property Marker Styles */\n.custom-property-marker {\n  background: transparent !important;\n  border: none !important;\n  cursor: pointer !important;\n}\n\n.clickable-marker {\n  pointer-events: auto !important;\n  cursor: pointer !important;\n}\n\n.property-marker-icon {\n  transition: all 0.3s ease !important;\n  cursor: pointer !important;\n  pointer-events: auto !important;\n}\n\n.custom-property-marker:hover .property-marker-icon {\n  transform: scale(1.15) !important;\n  box-shadow: 0 8px 25px rgba(0,0,0,0.4) !important;\n}\n\n/* Ensure icons inside markers don't block clicks */\n.custom-property-marker i {\n  pointer-events: none !important;\n}\n\n/* Map legend color updates */\n.leaflet-control-layers {\n  background: rgba(255, 255, 255, 0.95) !important;\n  backdrop-filter: blur(8px) !important;\n}\n\n/* Premium Property Animations */\n.premium-marker {\n  animation: premiumPulse 2s ease-in-out infinite !important;\n}\n\n.premium-ring {\n  position: absolute !important;\n  top: -8px !important;\n  left: -8px !important;\n  right: -8px !important;\n  bottom: -8px !important;\n  border: 2px solid #fbbf24 !important;\n  border-radius: 50% !important;\n  opacity: 0.7 !important;\n  animation: premiumRing 2s ease-in-out infinite !important;\n  pointer-events: none !important;\n}\n\n@keyframes premiumPulse {\n  0%, 100% {\n    transform: scale(1);\n    box-shadow: 0 4px 12px rgba(0,0,0,0.25);\n  }\n  50% {\n    transform: scale(1.05);\n    box-shadow: 0 6px 20px rgba(251, 191, 36, 0.4);\n  }\n}\n\n@keyframes premiumRing {\n  0% {\n    transform: scale(0.8);\n    opacity: 0.8;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 0.3;\n  }\n  100% {\n    transform: scale(1.4);\n    opacity: 0;\n  }\n}\n\n/* Marker clustering improvements */\n.leaflet-marker-icon.custom-property-marker {\n  border: none !important;\n  background: transparent !important;\n}\n\n/* Enhanced hover effects for all markers */\n.custom-property-marker:hover .property-marker-icon {\n  transform: scale(1.2) !important;\n  box-shadow: 0 8px 25px rgba(0,0,0,0.4) !important;\n  z-index: 1000 !important;\n}\n\n/* Premium marker hover enhancement */\n.premium-marker:hover {\n  box-shadow: 0 8px 30px rgba(251, 191, 36, 0.6) !important;\n}\n\n/* Cluster Marker Styles */\n.custom-cluster-marker {\n  background: transparent !important;\n  border: none !important;\n  cursor: pointer !important;\n}\n\n.cluster-marker {\n  transition: all 0.3s ease !important;\n  cursor: pointer !important;\n}\n\n.custom-cluster-marker:hover .cluster-marker {\n  transform: scale(1.1) !important;\n  box-shadow: 0 6px 20px hsla(25, 95%, 53%, 0.6) !important;\n}\n\n/* Cluster popup styles */\n.custom-cluster-popup .leaflet-popup-content-wrapper {\n  border-radius: 12px !important;\n  overflow: hidden !important;\n  max-width: 90vw !important;\n  width: auto !important;\n}\n\n.custom-cluster-popup .leaflet-popup-content {\n  margin: 0 !important;\n  padding: 0 !important;\n  width: 350px !important;\n  max-width: 90vw !important;\n  overflow: hidden !important;\n}\n\n/* Professional cluster popup close button - pure white background */\n.custom-cluster-popup .leaflet-popup-close-button {\n  top: 8px !important;\n  right: 8px !important;\n  width: 32px !important;\n  height: 32px !important;\n  font-size: 16px !important;\n  color: #333333 !important;\n  background: rgba(255, 255, 255, 1) !important;\n  border-radius: 50% !important;\n  text-align: center !important;\n  line-height: 32px !important;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15), 0 2px 8px rgba(0, 0, 0, 0.1) !important;\n  border: 1px solid rgba(0, 0, 0, 0.1) !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;\n  z-index: 1000 !important;\n  font-weight: 600 !important;\n  cursor: pointer !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n}\n\n.custom-cluster-popup .leaflet-popup-close-button:hover {\n  background: rgba(255, 255, 255, 1) !important;\n  transform: scale(1.1) !important;\n  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2), 0 3px 12px rgba(0, 0, 0, 0.15) !important;\n  border: 1px solid rgba(0, 0, 0, 0.2) !important;\n  color: #000000 !important;\n}\n\n.custom-cluster-popup .leaflet-popup-close-button:active {\n  transform: scale(0.95) !important;\n  transition: all 0.1s ease !important;\n}\n\n.cluster-property-item:hover {\n  background: hsla(25, 95%, 53%, 0.05) !important;\n  transition: background 0.2s ease !important;\n}\n\n.cluster-property-item:last-child {\n  border-bottom: none !important;\n}\n\n/* Responsive cluster popup styling */\n@media (max-width: 768px) {\n  .custom-cluster-popup .leaflet-popup-content {\n    width: 320px !important;\n    max-width: 88vw !important;\n  }\n  \n  .custom-cluster-popup .leaflet-popup-content-wrapper {\n    max-width: 88vw !important;\n  }\n}\n\n@media (max-width: 640px) {\n  .custom-cluster-popup .leaflet-popup-content {\n    width: 300px !important;\n    max-width: 85vw !important;\n  }\n  \n  .custom-cluster-popup .leaflet-popup-content-wrapper {\n    max-width: 85vw !important;\n  }\n}\n\n@media (max-width: 480px) {\n  .custom-cluster-popup .leaflet-popup-content {\n    width: 280px !important;\n    max-width: 82vw !important;\n  }\n  \n  .custom-cluster-popup .leaflet-popup-content-wrapper {\n    max-width: 82vw !important;\n  }\n}\n\n@media (max-width: 360px) {\n  .custom-cluster-popup .leaflet-popup-content {\n    width: 260px !important;\n    max-width: 80vw !important;\n  }\n  \n  .custom-cluster-popup .leaflet-popup-content-wrapper {\n    max-width: 80vw !important;\n  }\n}\n\n/* Light Sweep Effect Animation */\n.light-sweep {\n  position: relative;\n  overflow: hidden;\n}\n\n.light-sweep::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgba(255, 255, 255, 0.4),\n    transparent\n  );\n  transform: skewX(-12deg);\n  animation: lightSweep 3s ease-in-out infinite;\n  animation-delay: 2s;\n}\n\n/* Light Sweep Animation for Badge */\n@keyframes lightSweep {\n  0% {\n    transform: translateX(-100%) skewX(-12deg);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(200%) skewX(-12deg);\n    opacity: 0;\n  }\n}\n\n/* Language Modal Orange Light Sweep Animation */\n@keyframes sweep {\n  0% {\n    transform: translateX(-100%) skewX(-12deg);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(200%) skewX(-12deg);\n    opacity: 0;\n  }\n}\n\n.animate-sweep {\n  animation: sweep 2s ease-in-out infinite;\n  animation-delay: 1s;\n}\n\n/* Professional Slow Spin Animation for Location Button */\n@keyframes slow-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-slow-spin {\n  animation: slow-spin 2s ease-in-out infinite;\n}","size_bytes":31721},"client/src/hooks/useAuth.ts":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (username: string, password: string) => Promise<any>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useAuthProvider() {\n  const queryClient = useQueryClient();\n  \n  // Always check auth status - sessions use httpOnly cookies that aren't accessible via document.cookie\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    refetchOnWindowFocus: false, // Prevent unnecessary refetches\n    refetchOnReconnect: false, // Prevent unnecessary refetches\n    // Use custom query function to handle 401s gracefully\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/auth/me', {\n          credentials: 'include',\n        });\n        \n        // If 401, return null instead of throwing error\n        if (response.status === 401) {\n          return null;\n        }\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}`);\n        }\n        \n        return await response.json();\n      } catch (error) {\n        // Return null for network errors too to avoid noise\n        console.debug('Auth check failed (expected when not logged in):', error);\n        return null;\n      }\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', { username, password });\n      return await response.json();\n    },\n    onSuccess: async (data) => {\n      // Invalidate and refetch auth data to ensure fresh user info from server\n      await queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/logout');\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Clear all cached data to prevent role/data leaks between users\n      queryClient.clear();\n      queryClient.setQueryData(['/api/auth/me'], null);\n    },\n  });\n\n  const login = async (username: string, password: string) => {\n    const response = await loginMutation.mutateAsync({ username, password });\n    return response;\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    logout,\n  };\n}\n\nexport const AuthContext_Export = AuthContext;","size_bytes":3175},"client/src/components/typography-showcase.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function TypographyShowcase() {\n  return (\n    <div className=\"space-y-8 p-6 max-w-7xl mx-auto\">\n      {/* Header Section */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"display-lg crisp-text bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\" data-testid=\"showcase-title\">\n          Responsive Typography System\n        </h1>\n        <p className=\"body-lg text-muted-foreground max-w-3xl mx-auto\" data-testid=\"showcase-description\">\n          A comprehensive Tailwind CSS responsive typography system featuring fluid scaling, \n          optimal readability, and seamless adaptation across all device sizes.\n        </p>\n      </div>\n\n      <Separator />\n\n      {/* Display Text Examples */}\n      <Card data-testid=\"card-display-text\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Display Text</CardTitle>\n          <CardDescription>Large hero text for major headings and landing pages</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-8\">\n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-display-xl\">display-xl</Badge>\n            <h1 className=\"display-xl\" data-testid=\"text-display-xl\">Hero Title</h1>\n            <p className=\"caption\">96px - 128px (fluid scaling)</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-display-lg\">display-lg</Badge>\n            <h1 className=\"display-lg\" data-testid=\"text-display-lg\">Large Display</h1>\n            <p className=\"caption\">72px - 96px (fluid scaling)</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-display-md\">display-md</Badge>\n            <h1 className=\"display-md\" data-testid=\"text-display-md\">Medium Display</h1>\n            <p className=\"caption\">56px - 72px (fluid scaling)</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-display-sm\">display-sm</Badge>\n            <h1 className=\"display-sm\" data-testid=\"text-display-sm\">Small Display</h1>\n            <p className=\"caption\">40px - 56px (fluid scaling)</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Heading Hierarchy */}\n      <Card data-testid=\"card-headings\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Heading Hierarchy</CardTitle>\n          <CardDescription>Semantic headings with responsive scaling and optimal line heights</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-heading-1\">h1 / heading-1</Badge>\n            <h1 className=\"heading-1\" data-testid=\"text-heading-1\">Primary Heading</h1>\n            <p className=\"caption\">Responsive: 36px → 48px → 56px</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-heading-2\">h2 / heading-2</Badge>\n            <h2 className=\"heading-2\" data-testid=\"text-heading-2\">Secondary Heading</h2>\n            <p className=\"caption\">Responsive: 30px → 36px → 48px</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-heading-3\">h3 / heading-3</Badge>\n            <h3 className=\"heading-3\" data-testid=\"text-heading-3\">Tertiary Heading</h3>\n            <p className=\"caption\">Responsive: 24px → 30px → 36px</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-heading-4\">h4 / heading-4</Badge>\n            <h4 className=\"heading-4\" data-testid=\"text-heading-4\">Fourth Level Heading</h4>\n            <p className=\"caption\">Responsive: 20px → 24px → 30px</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-heading-5\">h5 / heading-5</Badge>\n            <h5 className=\"heading-5\" data-testid=\"text-heading-5\">Fifth Level Heading</h5>\n            <p className=\"caption\">Responsive: 18px → 20px → 24px</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-heading-6\">h6 / heading-6</Badge>\n            <h6 className=\"heading-6\" data-testid=\"text-heading-6\">Sixth Level Heading</h6>\n            <p className=\"caption\">Responsive: 16px → 18px → 20px</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Body Text Examples */}\n      <Card data-testid=\"card-body-text\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Body Text</CardTitle>\n          <CardDescription>Optimized for readability with proper line heights and content widths</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-body-xl\">body-xl</Badge>\n            <p className=\"body-xl\" data-testid=\"text-body-xl\">\n              This is extra large body text designed for important introductory paragraphs \n              and lead content. It uses optimal line spacing and content width constraints \n              for enhanced readability across all devices.\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-body-lg\">body-lg</Badge>\n            <p className=\"body-lg\" data-testid=\"text-body-lg\">\n              Large body text perfect for featured content, article introductions, and \n              important information that needs to stand out while maintaining excellent \n              readability and user experience.\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-body-base\">body-base</Badge>\n            <p className=\"body-base\" data-testid=\"text-body-base\">\n              Standard body text that forms the foundation of most content. This size provides \n              optimal readability for extended reading sessions, with carefully balanced \n              line height and character spacing for comfortable consumption across all screen sizes.\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-body-sm\">body-sm</Badge>\n            <p className=\"body-sm\" data-testid=\"text-body-sm\">\n              Small body text suitable for supporting information, captions, and secondary content. \n              Despite its smaller size, it maintains readability through proper line spacing and \n              character proportions.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Typography Scale Examples */}\n      <Card data-testid=\"card-typography-scale\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Typography Scale</CardTitle>\n          <CardDescription>Fluid responsive scaling with clamp() for smooth transitions</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-xs\">scale-xs</Badge>\n              <span className=\"scale-xs\" data-testid=\"text-scale-xs\">Extra Small Text</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-sm\">scale-sm</Badge>\n              <span className=\"scale-sm\" data-testid=\"text-scale-sm\">Small Text</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-base\">scale-base</Badge>\n              <span className=\"scale-base\" data-testid=\"text-scale-base\">Base Text</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-lg\">scale-lg</Badge>\n              <span className=\"scale-lg\" data-testid=\"text-scale-lg\">Large Text</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-xl\">scale-xl</Badge>\n              <span className=\"scale-xl\" data-testid=\"text-scale-xl\">Extra Large Text</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-2xl\">scale-2xl</Badge>\n              <span className=\"scale-2xl\" data-testid=\"text-scale-2xl\">2X Large Text</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"w-20\" data-testid=\"badge-scale-3xl\">scale-3xl</Badge>\n              <span className=\"scale-3xl\" data-testid=\"text-scale-3xl\">3X Large Text</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Responsive Text Examples */}\n      <Card data-testid=\"card-responsive-examples\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Responsive Scaling Examples</CardTitle>\n          <CardDescription>Text that adapts fluidly based on viewport width</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-responsive-title\">Responsive Title</Badge>\n            <h2 className=\"text-responsive-4xl font-bold\" data-testid=\"text-responsive-title\">\n              This title scales from 36px to 48px\n            </h2>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-responsive-subtitle\">Responsive Subtitle</Badge>\n            <h3 className=\"text-responsive-2xl font-semibold\" data-testid=\"text-responsive-subtitle\">\n              This subtitle scales from 24px to 30px\n            </h3>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-responsive-body\">Responsive Body</Badge>\n            <p className=\"text-responsive-base leading-responsive-base prose-responsive\" data-testid=\"text-responsive-body\">\n              This body text scales from 16px to 18px with optimal line height. The fluid \n              scaling ensures that text remains perfectly readable across all screen sizes, \n              from mobile phones to large desktop displays. The clamp() function provides \n              smooth transitions without jarring size jumps at breakpoints.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Utility Classes Examples */}\n      <Card data-testid=\"card-utilities\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Utility Classes</CardTitle>\n          <CardDescription>Additional typography utilities for specific use cases</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-caption\">caption</Badge>\n            <p className=\"caption\" data-testid=\"text-caption\">\n              Caption text for images, tables, and supporting information\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-overline\">overline</Badge>\n            <p className=\"overline\" data-testid=\"text-overline\">Section Overline</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-mobile\">Mobile Optimized</Badge>\n            <h3 className=\"mobile-heading-1 sm:heading-2\" data-testid=\"text-mobile\">\n              Mobile-optimized heading that switches at small breakpoint\n            </h3>\n            <p className=\"mobile-body\" data-testid=\"text-mobile-body\">\n              Body text optimized specifically for mobile reading experience.\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Badge variant=\"outline\" data-testid=\"badge-crisp\">Crisp Text</Badge>\n            <p className=\"text-2xl crisp-text\" data-testid=\"text-crisp\">\n              High DPI optimized text rendering for crisp display\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Dark Mode Example */}\n      <Card data-testid=\"card-dark-mode\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Dark Mode Compatibility</CardTitle>\n          <CardDescription>Typography system maintains consistency across light and dark themes</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"p-6 bg-background border rounded-lg\">\n            <h3 className=\"heading-3 mb-4\" data-testid=\"text-dark-title\">Light Theme Example</h3>\n            <p className=\"body-base\" data-testid=\"text-dark-body\">\n              The typography system automatically adapts to your theme settings while \n              maintaining all the responsive scaling and readability optimizations.\n            </p>\n          </div>\n          \n          <div className=\"p-6 bg-muted rounded-lg\">\n            <h3 className=\"heading-3 mb-4\" data-testid=\"text-muted-title\">Muted Background Example</h3>\n            <p className=\"body-base\" data-testid=\"text-muted-body\">\n              Typography remains perfectly readable on different background colors \n              thanks to the semantic color system integration.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Implementation Guide */}\n      <Card data-testid=\"card-implementation\">\n        <CardHeader>\n          <CardTitle className=\"heading-2\">Implementation Guide</CardTitle>\n          <CardDescription>How to use these typography classes in your project</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <h4 className=\"heading-4\" data-testid=\"text-impl-semantic\">Semantic HTML with Typography Classes</h4>\n            <pre className=\"text-sm bg-muted p-4 rounded-lg overflow-x-auto\" data-testid=\"code-semantic\">\n{`<h1 className=\"heading-1\">Main Page Title</h1>\n<h2 className=\"heading-2\">Section Title</h2>\n<p className=\"body-base\">Standard paragraph text</p>\n<p className=\"caption\">Image caption or metadata</p>`}\n            </pre>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"heading-4\" data-testid=\"text-impl-responsive\">Responsive Scaling</h4>\n            <pre className=\"text-sm bg-muted p-4 rounded-lg overflow-x-auto\" data-testid=\"code-responsive\">\n{`<h1 className=\"text-responsive-4xl\">Fluid scaling title</h1>\n<p className=\"text-responsive-base leading-responsive-base\">\n  Body text with fluid scaling\n</p>`}\n            </pre>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h4 className=\"heading-4\" data-testid=\"text-impl-display\">Display Text for Heroes</h4>\n            <pre className=\"text-sm bg-muted p-4 rounded-lg overflow-x-auto\" data-testid=\"code-display\">\n{`<h1 className=\"display-lg crisp-text\">\n  Hero Section Title\n</h1>\n<p className=\"body-xl prose-responsive\">\n  Hero description with optimal reading width\n</p>`}\n            </pre>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15835},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/language-selection-modal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Globe } from \"lucide-react\";\nimport usFlag from \"@assets/generated_images/US_flag_circular_design_55844ad0.png\";\nimport saudiFlag from \"@assets/generated_images/Saudi_flag_circular_design_3c46c604.png\";\nimport kurdishFlag from \"@assets/generated_images/Kurdish_flag_circular_design_55e28463.png\";\n\ninterface LanguageSelectionProps {\n  isOpen: boolean;\n  onLanguageSelect: (language: string) => void;\n}\n\nexport default function LanguageSelection({ \n  isOpen,\n  onLanguageSelect \n}: LanguageSelectionProps) {\n  const languages = [\n    {\n      code: 'en',\n      name: 'English',\n      nativeName: 'English',\n      flag: usFlag\n    },\n    {\n      code: 'ar',\n      name: 'Arabic',\n      nativeName: 'العربية',\n      flag: saudiFlag\n    },\n    {\n      code: 'kur',\n      name: 'Kurdish',\n      nativeName: 'کوردی',\n      flag: kurdishFlag\n    }\n  ];\n\n  const handleLanguageSelect = (languageCode: string) => {\n    onLanguageSelect(languageCode);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-background dark:bg-gray-900 flex items-center justify-center p-4 z-50\">\n      <div className=\"w-full max-w-md mx-auto\">\n        <div className=\"text-center mb-8\">\n          <div className=\"mx-auto mb-6 flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n            <Globe className=\"h-8 w-8\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground dark:text-white mb-2\">\n            Choose Your Language\n          </h1>\n          <p className=\"text-sm text-muted-foreground dark:text-gray-400\">\n            Select your preferred language to continue\n          </p>\n        </div>\n\n        <div className=\"space-y-3 mb-6\">\n          {languages.map((language) => (\n            <Card \n              key={language.code}\n              className=\"cursor-pointer transition-all duration-200 hover:shadow-md hover:bg-gray-50 dark:hover:bg-gray-800 border border-border dark:border-gray-700\"\n              onClick={() => handleLanguageSelect(language.code)}\n              data-testid={`language-option-${language.code}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <img \n                    src={language.flag} \n                    alt={language.name}\n                    className=\"w-10 h-10 object-contain rounded-full flex-shrink-0\"\n                  />\n                  <div className=\"flex-1 text-left\">\n                    <h3 className=\"font-medium text-base text-foreground dark:text-white\">{language.name}</h3>\n                    <p className=\"text-sm text-muted-foreground dark:text-gray-400\">\n                      {language.nativeName}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <p className=\"text-xs text-center text-muted-foreground dark:text-gray-400\">\n          You can change this later in settings\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":3204},"client/src/components/search-bar.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useAISearch, useSearchSuggestions } from \"@/hooks/use-properties\";\nimport { Search, Bot, Lightbulb } from \"lucide-react\";\n\ninterface SearchBarProps {\n  onResults?: (results: any) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport default function SearchBar({ onResults, placeholder, className }: SearchBarProps) {\n  const { t } = useTranslation();\n  const [query, setQuery] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const aiSearch = useAISearch();\n  const { data: suggestions } = useSearchSuggestions();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleSearch = async () => {\n    if (!query.trim()) return;\n    \n    try {\n      const result = await aiSearch.mutateAsync({ query });\n      onResults?.(result);\n      setShowSuggestions(false);\n    } catch (error) {\n      console.error(\"Search failed:\", error);\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setQuery(suggestion);\n    setShowSuggestions(false);\n    // Auto-search when suggestion is clicked\n    setTimeout(() => handleSearch(), 100);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (inputRef.current && !inputRef.current.contains(event.target as Node)) {\n        setShowSuggestions(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  return (\n    <div className={`relative ${className}`}>\n        \n        {/* AI Search Suggestions */}\n        {showSuggestions && suggestions && suggestions.length > 0 && (\n          <Card className=\"absolute top-full left-0 right-0 mt-2 z-50 p-0 border border-border bg-card dark:bg-gray-800\">\n            {suggestions.map((suggestion, index) => (\n              <div\n                key={index}\n                onClick={() => handleSuggestionClick(suggestion)}\n                className=\"p-3 hover:bg-muted dark:hover:bg-gray-700 cursor-pointer border-b border-border dark:border-gray-600 last:border-b-0 flex items-center text-foreground dark:text-white\"\n                data-testid={`search-suggestion-${index}`}\n              >\n                <Lightbulb className=\"text-yellow-500 mr-2 h-4 w-4\" />\n                <span className=\"text-sm\">{suggestion}</span>\n              </div>\n            ))}\n          </Card>\n        )}\n\n    </div>\n  );\n}","size_bytes":2785},"server/routes/performance.ts":{"content":"import type { Express } from \"express\";\nimport { performanceMonitor } from \"../middleware/performance\";\nimport { requireRole } from \"../auth\";\n\nexport function registerPerformanceRoutes(app: Express) {\n  // Performance metrics endpoint (admin only)\n  app.get(\"/api/admin/performance\", requireRole(\"admin\"), (req, res) => {\n    try {\n      const { hours = 1 } = req.query;\n      const hoursNumber = Math.min(parseInt(hours as string) || 1, 24); // Max 24 hours\n      \n      const metrics = performanceMonitor.getMetrics(hoursNumber);\n      const endpointStats = performanceMonitor.getEndpointStats(hoursNumber);\n      const slowRequests = performanceMonitor.getSlowRequests(1000, hoursNumber);\n      const averageResponseTime = performanceMonitor.getAverageResponseTime(undefined, hoursNumber);\n      \n      res.json({\n        timeWindow: `${hoursNumber} hour(s)`,\n        totalRequests: metrics.length,\n        averageResponseTime,\n        endpointStats,\n        slowRequests: slowRequests.slice(0, 10), // Top 10 slowest\n        recentMetrics: metrics.slice(-20), // Last 20 requests\n        summary: {\n          fastRequests: metrics.filter(m => m.responseTime < 100).length,\n          normalRequests: metrics.filter(m => m.responseTime >= 100 && m.responseTime < 1000).length,\n          slowRequests: metrics.filter(m => m.responseTime >= 1000).length,\n          errorRequests: metrics.filter(m => m.statusCode >= 400).length\n        }\n      });\n    } catch (error) {\n      console.error(\"Failed to get performance metrics:\", error);\n      res.status(500).json({ message: \"Failed to get performance metrics\" });\n    }\n  });\n  \n  // Real-time performance status\n  app.get(\"/api/admin/performance/status\", requireRole(\"admin\"), (req, res) => {\n    try {\n      const recentMetrics = performanceMonitor.getMetrics(0.25); // Last 15 minutes\n      const currentLoad = recentMetrics.length;\n      const avgResponseTime = performanceMonitor.getAverageResponseTime(undefined, 0.25);\n      const errorRate = recentMetrics.filter(m => m.statusCode >= 400).length / Math.max(recentMetrics.length, 1);\n      \n      let status = \"healthy\";\n      let statusColor = \"green\";\n      \n      if (avgResponseTime > 2000 || errorRate > 0.1) {\n        status = \"critical\";\n        statusColor = \"red\";\n      } else if (avgResponseTime > 1000 || errorRate > 0.05) {\n        status = \"warning\";\n        statusColor = \"yellow\";\n      }\n      \n      res.json({\n        status,\n        statusColor,\n        currentLoad,\n        avgResponseTime,\n        errorRate: Math.round(errorRate * 100),\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Failed to get performance status:\", error);\n      res.status(500).json({ message: \"Failed to get performance status\" });\n    }\n  });\n}","size_bytes":2799},"client/src/pages/properties.tsx":{"content":"import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport PropertyCard from \"@/components/property-card\";\nimport SearchBar from \"@/components/search-bar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { SEOHead } from \"@/components/SEOHead\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useProperties } from \"@/hooks/use-properties\";\nimport { generateSearchMeta } from \"@/lib/meta-enhancement\";\nimport type { PropertyFilters, AISearchResponse } from \"@/types\";\nimport {\n  Search,\n  Filter,\n  Grid,\n  List,\n  MapPin,\n  Home,\n  Building,\n  Castle,\n  Mountain,\n  Tag,\n  Key,\n  Bed,\n  Bath,\n} from \"lucide-react\";\n\nexport default function PropertiesPage() {\n  const { t, language } = useTranslation();\n  const [filters, setFilters] = useState<PropertyFilters>({\n    sortBy: \"date\",\n    sortOrder: \"desc\",\n    limit: 20,\n    offset: 0,\n    language: language,\n  });\n  const [priceRange, setPriceRange] = useState([0, 1000000]);\n  const [cityInput, setCityInput] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<AISearchResponse | null>(\n    null,\n  );\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  const { data: properties, isLoading } = useProperties(filters);\n\n  // Filter properties by language when language changes\n  useEffect(() => {\n    setFilters((prevFilters) => ({\n      ...prevFilters,\n      language: language,\n      offset: 0, // Reset pagination when language changes\n    }));\n  }, [language]);\n\n  // Debounced city filter\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFilters((prev) => ({\n        ...prev,\n        city: cityInput.trim() || undefined,\n        offset: 0,\n      }));\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [cityInput]);\n\n  const handleFilterChange = useCallback(\n    (key: keyof PropertyFilters, value: any) => {\n      setFilters((prev) => ({\n        ...prev,\n        [key]:\n          value === \"all\" || value === \"any\" || value === \"\"\n            ? undefined\n            : value,\n        offset: 0, // Reset pagination when filters change\n      }));\n    },\n    [],\n  );\n\n  // Auto-apply price range with debounce\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFilters((prev) => ({\n        ...prev,\n        minPrice: priceRange[0] > 0 ? priceRange[0] : undefined,\n        maxPrice: priceRange[1] < 1000000 ? priceRange[1] : undefined,\n        offset: 0,\n      }));\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [priceRange]);\n\n  const handleSearchResults = (results: AISearchResponse) => {\n    setSearchResults(results);\n    setFilters((prev) => ({ ...prev, ...results.filters }));\n  };\n\n  const clearFilters = useCallback(() => {\n    setFilters({\n      sortBy: \"date\",\n      sortOrder: \"desc\",\n      limit: 20,\n      offset: 0,\n      language: language, // Retain current language when clearing filters\n    });\n    setPriceRange([0, 1000000]);\n    setCityInput(\"\");\n    setSearchResults(null);\n  }, [language]);\n\n  const displayProperties = searchResults\n    ? searchResults.results\n    : properties || [];\n\n  // Generate properties page structured data\n  const getPropertiesStructuredData = () => {\n    const totalProperties = properties?.length || 0;\n    const currentFilter = filters.listingType || \"all\";\n    const currentType = filters.type || \"all\";\n    const currentCity = filters.city || \"Kurdistan\";\n\n    return {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"ItemList\",\n      name: `Properties for ${currentFilter === \"all\" ? \"Sale & Rent\" : currentFilter} in ${currentCity}`,\n      description: `Browse ${totalProperties} ${currentType !== \"all\" ? currentType : \"property\"} listings for ${currentFilter === \"all\" ? \"sale and rent\" : currentFilter} in ${currentCity}, Iraq. Find your perfect home with detailed property information and expert agents.`,\n      numberOfItems: totalProperties,\n      itemListElement:\n        displayProperties?.slice(0, 10).map((property, index) => ({\n          \"@type\": \"ListItem\",\n          position: index + 1,\n          item: {\n            \"@type\": \"RealEstateListing\",\n            name: property.title,\n            url: `${window.location.origin}/property/${property.slug || property.id}`,\n            image:\n              Array.isArray(property.images) && property.images.length > 0\n                ? property.images.map((img) =>\n                    img.startsWith(\"http\")\n                      ? img\n                      : `${window.location.origin}${img}`,\n                  )\n                : [],\n            address: {\n              \"@type\": \"PostalAddress\",\n              streetAddress: property.address,\n              addressLocality: property.city,\n              addressCountry: property.country,\n            },\n            offers: {\n              \"@type\": \"Offer\",\n              priceCurrency: property.currency || \"USD\",\n              price: property.price,\n              availability: \"https://schema.org/InStock\",\n              priceValidUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n                .toISOString()\n                .split(\"T\")[0], // 30 days from now\n            },\n          },\n        })) || [],\n    };\n  };\n\n  // Generate enhanced SEO content based on filters\n  const seoContent = useMemo(() => {\n    const totalCount = properties?.length || 0;\n    return generateSearchMeta(filters, totalCount, language);\n  }, [filters, properties?.length, language]);\n\n  return (\n    <div className=\"properties-page min-h-screen bg-background\">\n      <SEOHead\n        title={seoContent.title}\n        description={seoContent.description}\n        keywords={seoContent.keywords.join(', ')}\n        ogImage={seoContent.ogImage || (\n          properties && properties.length > 0\n            ? properties[0].images?.[0]\n            : `/uploads/properties/1759082074149-xrejrtvx6.jpg`\n        )}\n        canonicalUrl={undefined}\n        structuredData={getPropertiesStructuredData()}\n        breadcrumbs={[\n          { name: 'Home', url: '/' },\n          { name: 'Properties', url: '/properties' }\n        ]}\n      />\n\n      {/* Header */}\n      <div className=\"bg-muted/30 py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h1\n            className=\"text-3xl font-bold mb-4\"\n            data-testid=\"properties-title\"\n          >\n            Properties for Sale & Rent\n          </h1>\n          <SearchBar onResults={handleSearchResults} />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Filters Sidebar */}\n          <div className=\"lg:w-64 flex-shrink-0\">\n            <Card className=\"sticky top-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"font-semibold flex items-center\">\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    Filters\n                  </h2>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearFilters}\n                    data-testid=\"clear-filters\"\n                  >\n                    Clear\n                  </Button>\n                </div>\n\n                <div className=\"space-y-6\">\n                  {/* Listing Type */}\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      Listing Type\n                    </label>\n                    <Select\n                      value={filters.listingType || \"\"}\n                      onValueChange={(value) =>\n                        handleFilterChange(\"listingType\", value || undefined)\n                      }\n                    >\n                      <SelectTrigger data-testid=\"listing-type-select\">\n                        <SelectValue placeholder=\"All Types\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">\n                          <span className=\"flex items-center gap-2\">\n                            <Filter className=\"h-4 w-4\" />\n                            All Types\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"sale\">\n                          <span className=\"flex items-center gap-2\">\n                            <Tag className=\"h-4 w-4\" />\n                            For Sale\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"rent\">\n                          <span className=\"flex items-center gap-2\">\n                            <Key className=\"h-4 w-4\" />\n                            For Rent\n                          </span>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Property Type */}\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      Property Type\n                    </label>\n                    <Select\n                      value={filters.type || \"\"}\n                      onValueChange={(value) =>\n                        handleFilterChange(\"type\", value || undefined)\n                      }\n                    >\n                      <SelectTrigger data-testid=\"property-type-select\">\n                        <SelectValue placeholder=\"All Properties\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">\n                          <span className=\"flex items-center gap-2\">\n                            <Home\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            All Properties\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"house\">\n                          <span className=\"flex items-center gap-2\">\n                            <Home\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            House\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"apartment\">\n                          <span className=\"flex items-center gap-2\">\n                            <Building\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            Apartment\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"villa\">\n                          <span className=\"flex items-center gap-2\">\n                            <Castle\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            Villa\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"land\">\n                          <span className=\"flex items-center gap-2\">\n                            <Mountain\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            Land\n                          </span>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Price Range */}\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      Price Range: ${priceRange[0].toLocaleString()} - $\n                      {priceRange[1].toLocaleString()}\n                    </label>\n                    <Slider\n                      value={priceRange}\n                      onValueChange={setPriceRange}\n                      max={1000000}\n                      step={10000}\n                      className=\"mt-2\"\n                      data-testid=\"price-range-slider\"\n                    />\n                  </div>\n\n                  {/* Bedrooms */}\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      Bedrooms\n                    </label>\n                    <Select\n                      value={filters.bedrooms?.toString() || \"\"}\n                      onValueChange={(value) =>\n                        handleFilterChange(\n                          \"bedrooms\",\n                          value ? parseInt(value) : undefined,\n                        )\n                      }\n                    >\n                      <SelectTrigger data-testid=\"bedrooms-select\">\n                        <SelectValue placeholder=\"Any\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"any\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bed\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            Any\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"1\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bed\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            1+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"2\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bed\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            2+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"3\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bed\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            3+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"4\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bed\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            4+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"5\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bed\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            5+\n                          </span>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Bathrooms */}\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      Bathrooms\n                    </label>\n                    <Select\n                      value={filters.bathrooms?.toString() || \"\"}\n                      onValueChange={(value) =>\n                        handleFilterChange(\n                          \"bathrooms\",\n                          value ? parseInt(value) : undefined,\n                        )\n                      }\n                    >\n                      <SelectTrigger data-testid=\"bathrooms-select\">\n                        <SelectValue placeholder=\"Any\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"any\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bath\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            Any\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"1\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bath\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            1+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"2\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bath\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            2+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"3\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bath\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            3+\n                          </span>\n                        </SelectItem>\n                        <SelectItem value=\"4\">\n                          <span className=\"flex items-center gap-2\">\n                            <Bath\n                              className=\"h-4 w-4\"\n                              style={{ color: \"#FF7800\" }}\n                            />\n                            4+\n                          </span>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Location */}\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">\n                      City\n                    </label>\n                    <Input\n                      placeholder=\"Enter city...\"\n                      value={cityInput}\n                      onChange={(e) => setCityInput(e.target.value)}\n                      data-testid=\"city-input\"\n                    />\n                  </div>\n                </div>\n\n                {/* Active Filters Display */}\n                <div className=\"mt-4\">\n                  {(filters.type ||\n                    filters.listingType ||\n                    filters.bedrooms ||\n                    filters.bathrooms ||\n                    filters.city ||\n                    filters.minPrice ||\n                    filters.maxPrice) && (\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium text-muted-foreground\">\n                        Active Filters:\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {filters.type && (\n                          <Badge\n                            className=\"flex items-center gap-1\"\n                            style={{\n                              backgroundColor: \"#bdd479\",\n                              color: \"#000\",\n                            }}\n                          >\n                            {filters.type === \"house\" && (\n                              <Home className=\"h-3 w-3\" />\n                            )}\n                            {filters.type === \"apartment\" && (\n                              <Building className=\"h-3 w-3\" />\n                            )}\n                            {filters.type === \"villa\" && (\n                              <Castle className=\"h-3 w-3\" />\n                            )}\n                            {filters.type === \"land\" && (\n                              <Mountain className=\"h-3 w-3\" />\n                            )}\n                            {filters.type === \"house\" && \"House\"}\n                            {filters.type === \"apartment\" && \"Apartment\"}\n                            {filters.type === \"villa\" && \"Villa\"}\n                            {filters.type === \"land\" && \"Land\"}\n                          </Badge>\n                        )}\n                        {filters.listingType && (\n                          <Badge\n                            className=\"flex items-center gap-1\"\n                            style={{\n                              backgroundColor: \"#bdd479\",\n                              color: \"#000\",\n                            }}\n                          >\n                            {filters.listingType === \"sale\" ? (\n                              <Tag className=\"h-3 w-3\" />\n                            ) : (\n                              <Key className=\"h-3 w-3\" />\n                            )}\n                            {filters.listingType === \"sale\"\n                              ? \"For Sale\"\n                              : \"For Rent\"}\n                          </Badge>\n                        )}\n                        {filters.bedrooms && (\n                          <Badge\n                            className=\"flex items-center gap-1\"\n                            style={{\n                              backgroundColor: \"#bdd479\",\n                              color: \"#000\",\n                            }}\n                          >\n                            <Bed className=\"h-3 w-3\" />\n                            {filters.bedrooms}+ Beds\n                          </Badge>\n                        )}\n                        {filters.bathrooms && (\n                          <Badge\n                            className=\"flex items-center gap-1\"\n                            style={{\n                              backgroundColor: \"#bdd479\",\n                              color: \"#000\",\n                            }}\n                          >\n                            <Bath className=\"h-3 w-3\" />\n                            {filters.bathrooms}+ Baths\n                          </Badge>\n                        )}\n                        {filters.city && (\n                          <Badge\n                            className=\"flex items-center gap-1\"\n                            style={{\n                              backgroundColor: \"#bdd479\",\n                              color: \"#000\",\n                            }}\n                          >\n                            <MapPin className=\"h-3 w-3\" />\n                            {filters.city}\n                          </Badge>\n                        )}\n                        {(filters.minPrice || filters.maxPrice) && (\n                          <Badge\n                            style={{\n                              backgroundColor: \"#bdd479\",\n                              color: \"#000\",\n                            }}\n                          >\n                            $\n                            {filters.minPrice\n                              ? filters.minPrice.toLocaleString()\n                              : \"0\"}{\" \"}\n                            - $\n                            {filters.maxPrice\n                              ? filters.maxPrice.toLocaleString()\n                              : \"1M+\"}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            {/* Results Header */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <h2\n                  className=\"text-lg font-semibold\"\n                  data-testid=\"results-count\"\n                >\n                  {isLoading\n                    ? \"Loading...\"\n                    : `${displayProperties.length} Properties Found`}\n                </h2>\n                {searchResults && (\n                  <span className=\"text-sm text-muted-foreground\">\n                    Search: \"{searchResults.query}\"\n                  </span>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                {/* Sort By */}\n                <Select\n                  value={`${filters.sortBy}-${filters.sortOrder}`}\n                  onValueChange={(value) => {\n                    const [sortBy, sortOrder] = value.split(\"-\");\n                    handleFilterChange(\"sortBy\", sortBy);\n                    handleFilterChange(\"sortOrder\", sortOrder);\n                  }}\n                >\n                  <SelectTrigger className=\"w-48\" data-testid=\"sort-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"date-desc\">Newest First</SelectItem>\n                    <SelectItem value=\"date-asc\">Oldest First</SelectItem>\n                    <SelectItem value=\"price-asc\">\n                      Price: Low to High\n                    </SelectItem>\n                    <SelectItem value=\"price-desc\">\n                      Price: High to Low\n                    </SelectItem>\n                    <SelectItem value=\"views-desc\">Most Popular</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* View Mode */}\n                <div className=\"flex border rounded-md\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    data-testid=\"grid-view-button\"\n                  >\n                    <Grid className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    data-testid=\"list-view-button\"\n                  >\n                    <List className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Properties Grid/List */}\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <div className=\"h-48 bg-muted\"></div>\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                      <div className=\"h-4 bg-muted rounded w-2/3 mb-4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : displayProperties.length > 0 ? (\n              <div\n                className={\n                  viewMode === \"grid\"\n                    ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n                    : \"space-y-4\"\n                }\n              >\n                {displayProperties.map((property) => (\n                  <PropertyCard\n                    key={property.id}\n                    property={property}\n                    className={viewMode === \"list\" ? \"flex flex-row\" : \"\"}\n                  />\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-8 text-center\">\n                <MapPin className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">\n                  No Properties Found\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Try adjusting your search criteria or filters to find more\n                  properties.\n                </p>\n                <Button\n                  onClick={clearFilters}\n                  data-testid=\"clear-filters-no-results\"\n                >\n                  Clear All Filters\n                </Button>\n              </Card>\n            )}\n\n            {/* Load More Button */}\n            {displayProperties.length > 0 &&\n              displayProperties.length >= (filters.limit || 20) && (\n                <div className=\"text-center mt-8\">\n                  <Button\n                    onClick={() =>\n                      handleFilterChange(\"limit\", (filters.limit || 20) + 20)\n                    }\n                    data-testid=\"load-more-button\"\n                  >\n                    Load More Properties\n                  </Button>\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":29629},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"server/scripts/add-sample-properties.ts":{"content":"import { StorageFactory } from \"../storageFactory\";\n\nasync function addSampleProperties() {\n  try {\n    const storage = await StorageFactory.getStorage();\n    \n    console.log(\"Adding sample properties with different types...\");\n    \n    // Add apartment\n    const apartment = await storage.createProperty({\n      title: \"Modern Apartment in Erbil Center\",\n      description: \"Beautiful 2-bedroom apartment in the heart of Erbil with modern amenities and city views.\",\n      type: \"apartment\",\n      listingType: \"sale\",\n      price: \"85000\",\n      currency: \"USD\",\n      bedrooms: 2,\n      bathrooms: 1,\n      area: 120,\n      address: \"60 Meter Street\",\n      city: \"Erbil\",\n      country: \"Iraq\",\n      latitude: \"36.191113\",\n      longitude: \"44.009167\",\n      featured: false,\n      language: \"en\",\n      visible: true\n    }, [\"/uploads/properties/1759082074149-xrejrtvx6.jpg\"]);\n    console.log(\"✅ Created apartment:\", apartment.title);\n    \n    // Add villa\n    const villa = await storage.createProperty({\n      title: \"Luxury Villa in Sami Abdulrahman Park Area\",\n      description: \"Stunning 4-bedroom villa with private garden and swimming pool near the park.\",\n      type: \"villa\",\n      listingType: \"sale\",\n      price: \"350000\",\n      currency: \"USD\",\n      bedrooms: 4,\n      bathrooms: 3,\n      area: 400,\n      address: \"Sami Abdulrahman Park\",\n      city: \"Erbil\",\n      country: \"Iraq\",\n      latitude: \"36.178889\",\n      longitude: \"44.008333\",\n      featured: false,\n      language: \"en\",\n      visible: true\n    }, [\"/uploads/properties/1759082074149-xrejrtvx6.jpg\"]);\n    console.log(\"✅ Created villa:\", villa.title);\n    \n    // Add land\n    const land = await storage.createProperty({\n      title: \"Commercial Land in Baharka\",\n      description: \"Prime commercial land plot suitable for development, located in a growing area.\",\n      type: \"land\",\n      listingType: \"sale\",\n      price: \"120000\",\n      currency: \"USD\",\n      bedrooms: 0,\n      bathrooms: 0,\n      area: 500,\n      address: \"Baharka Road\",\n      city: \"Baharka\",\n      country: \"Iraq\",\n      latitude: \"36.298889\",\n      longitude: \"44.051667\",\n      featured: false,\n      language: \"en\",\n      visible: true\n    }, [\"/uploads/properties/1759082074149-xrejrtvx6.jpg\"]);\n    console.log(\"✅ Created land:\", land.title);\n    \n    // Add another apartment for rent\n    const apartmentRent = await storage.createProperty({\n      title: \"Apartment for Rent in Dream City\",\n      description: \"Spacious 3-bedroom apartment available for rent in the popular Dream City complex.\",\n      type: \"apartment\",\n      listingType: \"rent\",\n      price: \"750\",\n      currency: \"USD\",\n      bedrooms: 3,\n      bathrooms: 2,\n      area: 150,\n      address: \"Dream City\",\n      city: \"Erbil\",\n      country: \"Iraq\",\n      latitude: \"36.225556\",\n      longitude: \"43.995278\",\n      featured: false,\n      language: \"en\",\n      visible: true\n    }, [\"/uploads/properties/1759082074149-xrejrtvx6.jpg\"]);\n    console.log(\"✅ Created apartment for rent:\", apartmentRent.title);\n    \n    console.log(\"\\n🎉 Successfully added 4 sample properties!\");\n    console.log(\"Now you can test the filters:\");\n    console.log(\"  - Houses: 1 property\");\n    console.log(\"  - Apartments: 2 properties\");\n    console.log(\"  - Villa: 1 property\");\n    console.log(\"  - Land: 1 property\");\n    \n  } catch (error) {\n    console.error(\"❌ Error adding sample properties:\", error);\n    process.exit(1);\n  }\n  \n  process.exit(0);\n}\n\naddSampleProperties();\n","size_bytes":3517},"scripts/delete-properties-except-farman.ts":{"content":"import { StorageFactory } from \"../server/storageFactory\";\n\nasync function deletePropertiesExceptFarman() {\n  try {\n    console.log(\"🔄 Initializing storage...\");\n    const storage = await StorageFactory.getStorage();\n    \n    // Find the user \"farman\"\n    console.log(\"🔍 Looking for user 'farman'...\");\n    let farmanUser = await storage.getUserByUsername(\"farman\");\n    \n    if (!farmanUser) {\n      // Try to find by email\n      const allUsers = await storage.getAllUsers();\n      farmanUser = allUsers.find(u => \n        u.email?.toLowerCase().includes(\"farman\") || \n        u.username?.toLowerCase().includes(\"farman\") ||\n        u.firstName?.toLowerCase().includes(\"farman\")\n      );\n    }\n    \n    if (!farmanUser) {\n      console.log(\"⚠️ User 'farman' not found. No properties will be preserved.\");\n      console.log(\"❓ Do you want to continue and delete ALL properties? (This script will not proceed without manual confirmation in code)\");\n      return;\n    }\n    \n    console.log(`✅ Found user: ${farmanUser.username} (${farmanUser.email}) - ID: ${farmanUser.id}`);\n    console.log(`📋 First Name: ${farmanUser.firstName}`);\n    \n    // Get all properties\n    console.log(\"\\n🔍 Fetching all properties...\");\n    const allProperties = await storage.getProperties();\n    console.log(`📊 Total properties in database: ${allProperties.length}`);\n    \n    // Separate farman's properties from others\n    const farmanProperties = allProperties.filter(p => p.agentId === farmanUser!.id);\n    const otherProperties = allProperties.filter(p => p.agentId !== farmanUser!.id);\n    \n    console.log(`\\n📈 Properties breakdown:`);\n    console.log(`   - Farman's properties (will be kept): ${farmanProperties.length}`);\n    console.log(`   - Other properties (will be deleted): ${otherProperties.length}`);\n    \n    if (farmanProperties.length > 0) {\n      console.log(`\\n🏠 Farman's properties that will be KEPT:`);\n      farmanProperties.forEach(p => {\n        console.log(`   - ${p.title} (${p.city})`);\n      });\n    }\n    \n    if (otherProperties.length > 0) {\n      console.log(`\\n🗑️  Properties that will be DELETED:`);\n      otherProperties.forEach(p => {\n        console.log(`   - ${p.title} (${p.city}) - Owner: ${p.agentId || 'none'}`);\n      });\n      \n      console.log(`\\n⚠️  Starting deletion of ${otherProperties.length} properties...`);\n      \n      let deletedCount = 0;\n      for (const property of otherProperties) {\n        try {\n          const success = await storage.deleteProperty(property.id);\n          if (success) {\n            deletedCount++;\n            console.log(`   ✅ Deleted: ${property.title}`);\n          }\n        } catch (error) {\n          console.error(`   ❌ Failed to delete ${property.title}:`, error);\n        }\n      }\n      \n      console.log(`\\n✅ Deletion complete!`);\n      console.log(`   - Properties deleted: ${deletedCount}`);\n      console.log(`   - Properties kept (farman's): ${farmanProperties.length}`);\n    } else {\n      console.log(\"\\n✨ No properties to delete. All existing properties belong to farman.\");\n    }\n    \n    // Verify final count\n    const remainingProperties = await storage.getProperties();\n    console.log(`\\n📊 Final property count: ${remainingProperties.length}`);\n    \n  } catch (error) {\n    console.error(\"❌ Error:\", error);\n    throw error;\n  }\n}\n\n// Run the script\ndeletePropertiesExceptFarman()\n  .then(() => {\n    console.log(\"\\n🎉 Script completed successfully!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"\\n💥 Script failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":3621}},"version":2}