import{c as g,I as O,r as p}from"./index-gVtgMtKL.js";/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const x=g("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]);/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const N=g("University",[["circle",{cx:"12",cy:"10",r:"1",key:"1gnqs8"}],["path",{d:"M22 20V8h-4l-6-4-6 4H2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2",key:"1qj5sn"}],["path",{d:"M6 17v.01",key:"roodi6"}],["path",{d:"M6 13v.01",key:"67c122"}],["path",{d:"M18 17v.01",key:"12ktxm"}],["path",{d:"M18 13v.01",key:"tn1rt1"}],["path",{d:"M14 22v-5a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5",key:"11g7fi"}]]);function U(S={}){var f,v;const n=O(),a=p.useRef(null),s=p.useRef(),u=p.useRef({}),d=p.useRef(0),l=p.useRef(null),{currentFilters:m,onPropertyCreated:E,onPropertyUpdated:q,onPropertyDeleted:Q}=S;s.current=m,u.current={onPropertyCreated:E,onPropertyUpdated:q,onPropertyDeleted:Q},p.useEffect(()=>{let y=!1;const R=t=>{var r,e;if(console.log("🔄 Handling property created - invalidating queries and forcing refetch"),n.invalidateQueries({queryKey:["/api/properties"],refetchType:"all"}),n.refetchQueries({queryKey:["/api/properties"]}),s.current){const i=Object.fromEntries(Object.entries(s.current).filter(([,o])=>o!=null&&o!=="").sort(([o],[c])=>o.localeCompare(c)));n.invalidateQueries({queryKey:["/api/properties",i],refetchType:"all"}),n.refetchQueries({queryKey:["/api/properties",i]})}n.invalidateQueries({queryKey:["/api/properties/featured"],refetchType:"all"}),(e=(r=u.current).onPropertyCreated)==null||e.call(r,t)},P=t=>{var r,e;if(console.log("🔄 Handling property updated - invalidating queries and forcing refetch"),n.invalidateQueries({queryKey:["/api/properties"],refetchType:"all"}),n.refetchQueries({queryKey:["/api/properties"]}),n.invalidateQueries({queryKey:["/api/properties",t.id],refetchType:"all"}),s.current){const i=Object.fromEntries(Object.entries(s.current).filter(([,o])=>o!=null&&o!=="").sort(([o],[c])=>o.localeCompare(c)));n.invalidateQueries({queryKey:["/api/properties",i],refetchType:"all"}),n.refetchQueries({queryKey:["/api/properties",i]})}(e=(r=u.current).onPropertyUpdated)==null||e.call(r,t)},T=t=>{var e,i;const r=t.propertyId||t.id;if(console.log("🔄 Handling property deleted - invalidating queries and forcing refetch"),n.invalidateQueries({queryKey:["/api/properties"],refetchType:"all"}),n.refetchQueries({queryKey:["/api/properties"]}),n.removeQueries({queryKey:["/api/properties",r]}),s.current){const o=Object.fromEntries(Object.entries(s.current).filter(([,c])=>c!=null&&c!=="").sort(([c],[k])=>c.localeCompare(k)));n.invalidateQueries({queryKey:["/api/properties",o],refetchType:"all"}),n.refetchQueries({queryKey:["/api/properties",o]})}(i=(e=u.current).onPropertyDeleted)==null||i.call(e,r)},h=()=>{if(y)return;a.current&&a.current.close();const t=new EventSource("/api/properties/stream");a.current=t,t.onopen=()=>{console.log("✅ SSE connection established and ready"),console.log("📊 EventSource readyState:",t.readyState),d.current=0},t.onmessage=r=>{console.log("📨 SSE Raw message received:",r.data);try{const e=JSON.parse(r.data);console.log("📨 SSE Parsed message:",e),e.type==="connected"?console.log("✅ SSE connected:",e.message):e.type==="heartbeat"?console.log("💓 SSE heartbeat received"):console.log("❓ Unknown SSE message type:",e.type||e.eventType,e)}catch(e){console.error("❌ Error parsing SSE message:",e,"Raw data:",r.data)}},t.addEventListener("property_created",r=>{try{const e=JSON.parse(r.data);console.log("🏠 New property created and detected (via addEventListener):",e.title),R(e)}catch(e){console.error("❌ Error handling property_created event:",e)}}),t.addEventListener("property_updated",r=>{try{const e=JSON.parse(r.data);console.log("🔄 Property updated and detected (via addEventListener):",e.title),P(e)}catch(e){console.error("❌ Error handling property_updated event:",e)}}),t.addEventListener("property_deleted",r=>{try{const e=JSON.parse(r.data);console.log("🗑️ Property deleted and detected (via addEventListener):",e.title||e.id),T(e)}catch(e){console.error("❌ Error handling property_deleted event:",e)}}),t.onerror=r=>{if(console.error("SSE connection error:",r),t.close(),a.current=null,!y)if(d.current<10){const e=Math.min(1e3*Math.pow(2,d.current),3e4);d.current++,console.log(`🔄 Attempting to reconnect SSE (attempt ${d.current}/10) in ${e}ms`),l.current&&clearTimeout(l.current),l.current=setTimeout(()=>{y||h()},e)}else console.error("❌ Maximum SSE reconnection attempts reached. Giving up.")}};return h(),()=>{console.log("Closing SSE connection"),y=!0,l.current&&(clearTimeout(l.current),l.current=null),a.current&&(a.current.close(),a.current=null)}},[n]);const C=((f=a.current)==null?void 0:f.readyState)===EventSource.OPEN,K=((v=a.current)==null?void 0:v.readyState)===EventSource.CONNECTING;return{isConnected:C,isConnecting:K,eventSource:a.current}}export{x as S,N as U,U as u};
